[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/client/spa/Pages.js",
    "content": "export {default as Home} from './pages/home'\nexport {default as CreateWard} from './pages/create-ward'\nexport {default as AdmitPatient} from './pages/admit-patient/index'\nexport {default as WardList} from './pages/ward-list'\nexport {default as ViewWard} from './pages/view-ward'\nexport {default as SearchPatient} from './pages/search-patients'\nexport {default as Add} from './pages/add'\nexport {default as ViewPatient} from './pages/view-patient'\nexport {default as Permissions} from './pages/permissions'\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/Pages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/client/spa/Partial.js",
    "content": "export {default as Breadcrumb} from './partial/layout/breadcrumb'\nexport {default as Redirect} from './partial/layout/redirect'\nexport {default as Input} from './partial/shared/input-text'\nexport {default as Loader} from './partial/shared/loader'\nexport {default as Select} from './partial/shared/select'\nexport {default as Fab} from './partial/layout/fab'\nexport {default as Vitals} from './partial/view-patient/vital-signs'\nexport {default as Modal} from './partial/shared/modal'\nexport {default as Login} from './partial/layout/login'\nexport {default as SignatureBox} from './partial/admit-patient/signature-box'\nexport {default as HistoryReport} from './partial/view-patient/history-report'\nexport {default as VitalCharts} from './partial/view-patient/vitals-charts'\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/Partial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/client/spa/WarningScore.js",
    "content": "import {doModal} from './util'\n\nclass NEWSError extends Error {\n\t/**\n\t * Error wrapper for NEWS object\n\t * @param {string} message Error message\n\t * @param {string[]} missing missing vital signs\n\t */\n\tconstructor(message, missing) {\n\t\tsuper(message)\n\t\tthis.name = 'NEWSError'\n\t\tthis.missing = missing\n\t}\n}\n\n/**\n * ! TODO thorough testing\n */\nexport default class WarningScore {\n\t/**\n\t * Warning score wrapper for patient info\n\t * @param {object} report formatted diagnostic report\n\t * @param {number} report.respiratory_rate\n\t * @param {number} report.oxygen_saturation\n\t * @param {number} report.heart_rate\n\t * @param {number} report.body_temperature\n\t * @param {number} report.systolic_bp\n\t * @param {string} report.level_of_consciousness\n\t * @param {string} report.supplemental_oxygen (on/off)\n\t */\n\tconstructor(report = {}) {\n\t\t// can't generate a proper EWS without these\n\t\tthis.requiredFields = [\n\t\t\t'respiratory_rate',\n\t\t\t'oxygen_saturation',\n\t\t\t'heart_rate',\n\t\t\t'body_temperature',\n\t\t\t'systolic_bp',\n\t\t\t'level_of_consciousness',\n\t\t]\n\t\tthis.respRate = report.respiratory_rate\n\t\tthis.oxySat = report.oxygen_saturation\n\t\tthis.heartRate = report.heart_rate\n\t\tthis.bodyTemp = report.body_temperature\n\t\tthis.systolicBP = report.systolic_bp\n\t\tthis.conscLevel = report.level_of_consciousness\n\t\tthis.suppOxygen = report.supplemental_oxygen\n\t\tthis.missingFields = this.requiredFields.filter(field => !(field in report))\n\t\tif (this.missingFields.length === this.requiredFields.length) return\n\t\tif (this.missingFields.length) {\n\t\t\tdoModal('Error with EWS Calculation', `Fields were missing during submission!</p><ul><li class=\"browser-default\">${this.missingFields.join('</li><li>')}`)\n\t\t}\n\t}\n\n\t/**\n\t * returns object with invididually scored elements (for use in chart)\n\t * @return {object} each part of a patient warning score individually scored\n\t */\n\tcalculate() {\n\t\tif (this.missingFields.length) {\n\t\t\treturn {score: 0}\n\t\t}\n\t\treturn {\n\t\t\tresp: this.scoreResp(),\n\t\t\toxySat: this.scoreOxy(),\n\t\t\theartRate: this.scoreHeart(),\n\t\t\tbodyTemp: this.scoreTemp(),\n\t\t\tsystolicBP: this.scoreBP(),\n\t\t\tconscLevel: this.scoreCons(),\n\t\t\tsuppOxygen: this.scoreSuppOxy(),\n\t\t}\n\t}\n\n\t/**\n\t * returns the NEWS for the given set of vital signs\n\t * @returns {number} patient NEWS\n\t */\n\tscore() {\n\t\tconst scores = this.calculate()\n\t\tconsole.table(scores)\n\t\tconst vals = Object.values(scores)\n\t\tconst highest = vals.sort().reverse()\n\t\treturn highest[0]\n\t}\n\n\t/**\n\t * Create an EWS for respiratory rate\n\t * @returns {number}\n\t */\n\tscoreResp() {\n\t\tconst rate = parseFloat(this.respRate, 10)\n\t\tif (rate >= 12 && rate <= 20) return 0\n\t\tif (rate >= 9 && rate <= 11) return 1\n\t\tif (rate >= 21 && rate <= 24) return 2\n\t\tif (rate <= 8 || rate >= 25) return 3\n\t\tthrow new NEWSError(`Unable to calculate NEWS: respiratory rate incorrect (${rate})`)\n\t}\n\n\t/**\n\t * Create EWS for patient oxygen saturation\n\t * @returns {number}\n\t */\n\tscoreOxy() {\n\t\tconst sat = parseFloat(this.oxySat, 10)\n\t\tif (sat >= 96) return 0\n\t\tif (sat >= 94) return 1\n\t\tif (sat >= 92) return 2\n\t\tif (sat <= 91) return 3\n\t\tthrow new NEWSError(`Unable to calculate NEWS: oxygen saturation incorrect (${sat})`)\n\t}\n\n\t/**\n\t * Create EWS for patient heart rate\n\t * @returns {number}\n\t */\n\tscoreHeart() {\n\t\tconst rate = parseFloat(this.heartRate, 10)\n\t\tif (rate <= 40 || rate >= 131) return 3\n\t\tif (rate >= 111 && rate <= 130) return 2\n\t\tif ((rate >= 41 && rate <= 50) || (rate >= 91 && rate <= 110)) return 1\n\t\tif (rate >= 51 && rate <= 90) return 0\n\t\tthrow new NEWSError(`Unable to calculate NEWS: heart rate incorrect (${rate})`)\n\t}\n\n\t/**\n\t * Create EWS for patient body temperature\n\t * @returns {number}\n\t */\n\tscoreTemp() {\n\t\tconst temp = parseFloat(this.bodyTemp, 10)\n\t\tif (temp <= 35) return 3\n\t\tif (temp >= 39.1) return 2\n\t\tif ((temp >= 35.1 && temp <= 36) || (temp >= 38.1 && temp <= 39)) return 1\n\t\tif (temp >= 36.1 && temp <= 38) return 0\n\t\tthrow new NEWSError(`Unable to calculate NEWS: body temperature incorrect (${temp})`)\n\t}\n\n\t/**\n\t * Create EWS for patient blood pressure\n\t * @returns {number}\n\t */\n\tscoreBP() {\n\t\tconst bp = parseFloat(this.systolicBP, 10)\n\t\tif (bp <= 90 || bp >= 220) return 3\n\t\tif (bp >= 91 && bp <= 100) return 2\n\t\tif (bp >= 101 && bp <= 110) return 1\n\t\tif (bp >= 111 && bp <= 219) return 0\n\t\tthrow new NEWSError(`Unable to calculate NEWS: BP incorrect (${bp})`)\n\t}\n\n\t/**\n\t * Create EWS for patient consciousness level\n\t * @returns {number}\n\t */\n\tscoreCons() {\n\t\tif (this.conscLevel === 'A') return 0\n\t\treturn 3\n\t}\n\n\t/**\n\t * Create EWS for patient on supplemental oxygen\n\t * @returns {number}\n\t */\n\tscoreSuppOxy() {\n\t\tif (this.suppOxygen === 'on') return 2\n\t\treturn 0\n\t}\n}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/WarningScore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "NEWSError",
    "memberof": "src/client/spa/WarningScore.js",
    "static": true,
    "longname": "src/client/spa/WarningScore.js~NEWSError",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/WarningScore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/WarningScore.js~NEWSError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~NEWSError#constructor",
    "access": "public",
    "description": "Error wrapper for NEWS object",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Error message"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "missing",
        "description": "missing vital signs"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "name",
    "memberof": "src/client/spa/WarningScore.js~NEWSError",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~NEWSError#name",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "missing",
    "memberof": "src/client/spa/WarningScore.js~NEWSError",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~NEWSError#missing",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "WarningScore",
    "memberof": "src/client/spa/WarningScore.js",
    "static": true,
    "longname": "src/client/spa/WarningScore.js~WarningScore",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/WarningScore.js",
    "importStyle": "WarningScore",
    "description": "! TODO thorough testing",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#constructor",
    "access": "public",
    "description": "Warning score wrapper for patient info",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "report",
        "description": "formatted diagnostic report"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "report.respiratory_rate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "report.oxygen_saturation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "report.heart_rate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "report.body_temperature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "report.systolic_bp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "report.level_of_consciousness",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "report.supplemental_oxygen",
        "description": "(on/off)"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "requiredFields",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#requiredFields",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "respRate",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#respRate",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "oxySat",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#oxySat",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "heartRate",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#heartRate",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "bodyTemp",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#bodyTemp",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "systolicBP",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#systolicBP",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "conscLevel",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#conscLevel",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "suppOxygen",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#suppOxygen",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "missingFields",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#missingFields",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "calculate",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#calculate",
    "access": "public",
    "description": "returns object with invididually scored elements (for use in chart)",
    "lineNumber": 59,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "each part of a patient warning score individually scored"
    },
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "score",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#score",
    "access": "public",
    "description": "returns the NEWS for the given set of vital signs",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} patient NEWS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "patient NEWS"
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "scoreResp",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreResp",
    "access": "public",
    "description": "Create an EWS for respiratory rate",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "scoreOxy",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreOxy",
    "access": "public",
    "description": "Create EWS for patient oxygen saturation",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "scoreHeart",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreHeart",
    "access": "public",
    "description": "Create EWS for patient heart rate",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "scoreTemp",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreTemp",
    "access": "public",
    "description": "Create EWS for patient body temperature",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "scoreBP",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreBP",
    "access": "public",
    "description": "Create EWS for patient blood pressure",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "scoreCons",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreCons",
    "access": "public",
    "description": "Create EWS for patient consciousness level",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "scoreSuppOxy",
    "memberof": "src/client/spa/WarningScore.js~WarningScore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/WarningScore.js~WarningScore#scoreSuppOxy",
    "access": "public",
    "description": "Create EWS for patient on supplemental oxygen",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/client/spa/index.jsx",
    "content": "import {h, render, Component} from 'preact'\nimport {Router} from 'preact-router'\n\nimport {getJwtPayload, showLogin} from './util'\n\nimport {Fab, Breadcrumb, Redirect, Modal, Login} from './Partial'\n\nimport {\n\tSearchPatient,\n\tAdmitPatient,\n\tViewPatient,\n\tPermissions,\n\tCreateWard,\n\tWardList,\n\tHome,\n\tViewWard,\n\tAdd,\n} from './Pages'\n\nimport 'materialize-css/sass/materialize.scss'\nimport './styles/router.scss'\n\nclass App extends Component {\n\t/**\n\t * Main application layer. Top of component tree\n\t * @param {object} props component properties (unused)\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {location: window.location.pathname}\n\t\tthis.onChange = this.onChange.bind(this)\n\t\tthis.login = <Login />\n\t\tthis.showPopup = showLogin\n\t}\n\n\t/**\n\t * Attempt to save the JWT (saved from Google OAuth flow)\n\t * verify the new one, or the old one saved in localStorage\n\t */\n\tcomponentDidMount() {\n\t\t// 1. get token (if exists) from url and store it\n\t\tconst location = new URL(window.location)\n\t\tconst jwt = location.searchParams.get('token')\n\t\tif (jwt) {\n\t\t\tconsole.log('storing JWT')\n\t\t\tlocalStorage.setItem('token', jwt)\n\t\t}\n\n\t\t// 2. ensure that there is a token in storage\n\t\tconst toCheck = jwt || localStorage.getItem('token')\n\t\tif (!toCheck) return this.showPopup()\n\n\t\t// 3. if token in storage, ensure it is fresh\n\t\tconst {exp} = getJwtPayload(toCheck)\n\t\tif ((exp * 1000) < Date.now()) return this.showPopup()\n\n\t\treturn true // keep eslint happy\n\t}\n\n\t/**\n\t * An on change event for whenever the router changes\n\t * Reset the state to re-render the application - used for props in the breadcrumbs\n\t * @param {Event} ev change event\n\t */\n\tonChange(ev) {\n\t\tthis.setState({location: ev.url})\n\t}\n\n\t/**\n\t * Render the application\n\t * @returns {preact.VNode} Application UI\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Breadcrumb location={this.state.location} />\n\t\t\t\t<Router onChange={this.onChange}>\n\t\t\t\t\t<Home path=\"/\" />\n\t\t\t\t\t<WardList path=\"/wards\" />\n\t\t\t\t\t<ViewWard path=\"/wards/:ward_id\" />\n\t\t\t\t\t<Permissions path=\"/permissions\" />\n\t\t\t\t\t<Add path=\"/add\" />\n\t\t\t\t\t<CreateWard path=\"/add/ward\" />\n\t\t\t\t\t<AdmitPatient path=\"/add/patient\" />\n\t\t\t\t\t<SearchPatient path=\"/search/patient\" />\n\t\t\t\t\t<Redirect path=\"/patient\" to=\"/search/patient\" />\n\t\t\t\t\t<ViewPatient path=\"/patient/:patient_id\" />\n\t\t\t\t</Router>\n\t\t\t\t<Fab />\n\t\t\t\t<Modal />\n\t\t\t\t{this.login}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// in public/index.html, render the app in <div preact-root></div>\nrender(<App />, document.querySelector('[preact-root]'))\n\n// hook in to react dev tools\nrequire('preact/debug')\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "App",
    "memberof": "src/client/spa/index.jsx",
    "static": true,
    "longname": "src/client/spa/index.jsx~App",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/index.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/index.jsx~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/index.jsx~App#constructor",
    "access": "public",
    "description": "Main application layer. Top of component tree",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component properties (unused)"
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/index.jsx~App",
    "static": false,
    "longname": "src/client/spa/index.jsx~App#state",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"location\": *}"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "login",
    "memberof": "src/client/spa/index.jsx~App",
    "static": false,
    "longname": "src/client/spa/index.jsx~App#login",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "showPopup",
    "memberof": "src/client/spa/index.jsx~App",
    "static": false,
    "longname": "src/client/spa/index.jsx~App#showPopup",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/index.jsx~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/index.jsx~App#componentDidMount",
    "access": "public",
    "description": "Attempt to save the JWT (saved from Google OAuth flow)\nverify the new one, or the old one saved in localStorage",
    "lineNumber": 40,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "onChange",
    "memberof": "src/client/spa/index.jsx~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/index.jsx~App#onChange",
    "access": "public",
    "description": "An on change event for whenever the router changes\nReset the state to re-render the application - used for props in the breadcrumbs",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "change event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/index.jsx~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/index.jsx~App#render",
    "access": "public",
    "description": "Render the application",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode} Application UI"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": "Application UI"
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/client/spa/pages/add.jsx",
    "content": "import {h} from 'preact'\nimport {Link} from 'preact-router'\n\nimport '../styles/add.scss'\n\nconst Add = () => (\n\t<div className=\"row\">\n\t\t<div className=\"col m6 s12\">\n\t\t\t<Link href=\"/add/patient\">\n\t\t\t\t<div className=\"card hoverable linked-card z-depth-2\">\n\t\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t\t<img src=\"/img/hospital-bed.png\" alt=\"\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t<span className=\"card-title\">Patient</span>\n\t\t\t\t\t\tAdmit a new patient and their accompanying contact to a given location\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t</div>\n\t\t<div className=\"col m6 s12\">\n\t\t\t<Link href=\"/add/ward\">\n\t\t\t\t<div className=\"card hoverable linked-card z-depth-2\">\n\t\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t\t<img src=\"/img/pharmacy.png\" alt=\"\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t<span className=\"card-title\">Ward</span>\n\t\t\t\t\t\tCreate a new ward to admit patients to!\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t</div>\n\t</div>\n)\n\nexport default Add\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/add.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "Add",
    "memberof": "src/client/spa/pages/add.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/add.jsx~Add",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/add.jsx",
    "importStyle": "Add",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/Contact.jsx",
    "content": "import {h} from 'preact'\n\nimport {Input} from '../../Partial'\n\n/**\n * basic contact info form\n * @returns {preact.VNode}\n */\nconst Contact = () => (\n\t<div>\n\t\t<h3>Contact Details</h3>\n\t\t<div className=\"card-panel z-depth-2\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<Input id=\"contact-prefix\" label=\"Title\" />\n\t\t\t\t<Input id=\"contact-given\" label=\"First Name\" />\n\t\t\t\t<Input id=\"contact-family\" label=\"Surname\" />\n\t\t\t\t<Input id=\"contact-fullname\" label=\"Full Name\" />\n\t\t\t\t<Input id=\"contact-phone\" label=\"Phone\" type=\"tel\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n)\n\nexport default Contact\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/Contact.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "Contact",
    "memberof": "src/client/spa/pages/admit-patient/Contact.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/Contact.jsx~Contact",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/Contact.jsx",
    "importStyle": "Contact",
    "description": "basic contact info form",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/History.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\n\nimport HealthHistory from './history/health-history'\nimport OtherQuestions from './history/other'\nimport SignOff from './history/sign-off'\nimport Medication from './history/medication'\nimport Exercise from './history/exercise'\nimport Tobacco from './history/tobacco'\nimport Alcohol from './history/alcohol'\nimport Diet from './history/diet'\nimport Drugs from './history/drugs'\n\nimport '../../styles/patient-history.scss'\n\nclass CreateHistory extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {}\n\t}\n\n\t/**\n\t * on mount, initialise the collapsible that is created\n\t */\n\tcomponentDidMount() {\n\t\tM.Collapsible.init(this.collapsible)\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<h3>Patient History</h3>\n\t\t\t\t<ul className=\"collapsible\" ref={c => this.collapsible = c}>\n\t\t\t\t\t<li className=\"\">\n\t\t\t\t\t\t<div className=\"collapsible-header\">Patient Health History</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><HealthHistory /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Medication</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Medication /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Exercise</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Exercise /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Dietary Habits</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Diet /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Alcohol Use</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Alcohol /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Tobacco Use</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Tobacco /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Drug Use</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><Drugs /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Further Information</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><OtherQuestions /></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div className=\"collapsible-header\">Sign Off</div>\n\t\t\t\t\t\t<div className=\"collapsible-body\"><SignOff /></div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default CreateHistory\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/History.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "CreateHistory",
    "memberof": "src/client/spa/pages/admit-patient/History.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/History.jsx",
    "importStyle": "CreateHistory",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory#componentDidMount",
    "access": "public",
    "description": "on mount, initialise the collapsible that is created",
    "lineNumber": 25,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/History.jsx~CreateHistory#render",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/Patient.jsx",
    "content": "import {h} from 'preact'\nimport isMobile from 'ismobilejs'\n\nimport {Input, Select} from '../../Partial'\n\n/**\n * basic form for patient demographic submission\n * @param {preact.ComponentProps} props comopnent props\n * @returns {preact.VNode}\n */\nconst PatientDemographicInfo = props => (\n\t<div>\n\n\t\t<h3>Patient Details</h3>\n\t\t<div className=\"card-panel z-depth-2\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<Input id=\"patient-prefix\" label=\"Title\" />\n\t\t\t\t<Input id=\"patient-given\" label=\"First Name\" />\n\t\t\t\t<Input id=\"patient-family\" label=\"Surname\" />\n\t\t\t\t{/* <Input id=\"patient-fullname\" label=\"Full Name\" /> */}\n\t\t\t\t<Select\n\t\t\t\t\tid=\"patient-gender\"\n\t\t\t\t\tdefault=\"---Select a Gender---\"\n\t\t\t\t\tlabel=\"Gender\"\n\t\t\t\t\toptions={[{val: 'male', text: 'Male'}, {val: 'female', text: 'Female'}, {val: 'other', text: 'Other'}]}\n\t\t\t\t/>\n\t\t\t\t<Select\n\t\t\t\t\tid=\"location_id\"\n\t\t\t\t\tdefault=\"---Select a Ward---\"\n\t\t\t\t\toptions={props.wards}\n\t\t\t\t\tlabel=\"Patient Ward\"\n\t\t\t\t\tclassName=\"m12\"\n\t\t\t\t/>\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t{/* fuckin clean me lad */}\n\t\t\t\t\t{!isMobile.any\n\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t\t\t\t\t<video ref={v => props.setVideo(v)} id=\"video\" onClick={props.playVideo} />\n\t\t\t\t\t\t\t\t\t<canvas ref={c => props.setCanvas(c)} style={{display: 'none'}} width=\"300\" height=\"300\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"card-action\">\n\t\t\t\t\t\t\t\t\t<a onClick={props.getImg} className=\"teal-text text-lighten-1\">\n\t\t\t\t\t\t\t\t\t\t<i className=\"material-icons left\">camera_alt</i>Take Picture\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t<div className=\"file-field input-field\">\n\t\t\t\t\t\t\t\t<div className=\"btn\">\n\t\t\t\t\t\t\t\t\t<span>Take Photo</span>\n\t\t\t\t\t\t\t\t\t<input onChange={props.setImg} type=\"file\" accept=\"image/*\" capture=\"camera\" value=\"Take Photo\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"file-path-wrapper\">\n\t\t\t\t\t\t\t\t\t<input className=\"file-path validate\" type=\"text\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n)\n\nexport default PatientDemographicInfo\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/Patient.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "PatientDemographicInfo",
    "memberof": "src/client/spa/pages/admit-patient/Patient.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/Patient.jsx~PatientDemographicInfo",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/Patient.jsx",
    "importStyle": "PatientDemographicInfo",
    "description": "basic form for patient demographic submission",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "comopnent props"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx",
    "content": "/* eslint-disable react/no-unused-state */\nimport {Component} from 'preact'\n\nclass Questionnaire extends Component {\n\t/**\n\t *\n\t * @param {preact.ComponentProps} props\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {showQuestionnaire: false}\n\t}\n\n\t/**\n\t * Used to toggle a questionnaire\n\t * @param {Boolean} showQuestionnaire whether to show the questionnaise\n\t */\n\ttoggleQuestionnaire(showQuestionnaire = false) {\n\t\treturn () => this.setState({showQuestionnaire})\n\t}\n}\n\nexport default Questionnaire\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/Questionnaire.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "Questionnaire",
    "memberof": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/Questionnaire.jsx",
    "importStyle": "Questionnaire",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire#state",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"showQuestionnaire\": *}"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "toggleQuestionnaire",
    "memberof": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/Questionnaire.jsx~Questionnaire#toggleQuestionnaire",
    "access": "public",
    "description": "Used to toggle a questionnaire",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "showQuestionnaire",
        "description": "whether to show the questionnaise"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "content": "import {h} from 'preact'\nimport Questionnaire from './Questionnaire'\n\n\nclass Alcohol extends Questionnaire {\n\t/**\n\t * @returns {Preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<h4>Alcohol Use</h4>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"alcohol-does-drink\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t\t\t\t\t<h5>Do you drink alcohol?</h5>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" value=\"yes\" type=\"radio\" />\n\t\t\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire(true).bind(this)}>Yes</span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" value=\"no\" type=\"radio\" checked />\n\t\t\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire().bind(this)}>No</span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.showQuestionnaire ? <AlcoholQuestionnaire /> : ''}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n/**\n * @returns {preact.VNode}\n */\nconst AlcoholQuestionnaire = () => (\n\t<div>\n\t\t<div className=\"col s12\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<h5>What kind?</h5>\n\t\t\t\t\t<input id=\"alcohol-type\" type=\"text\" className=\"validate patient-history-input\" data-form-key=\"alcohol-type\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t<h5>How many drinks do you consume a week?</h5>\n\t\t\t\t\t<input id=\"alcohol-num\" type=\"number\" className=\"validate patient-history-input\" data-form-key=\"alcohol-freq\" value={1} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"alcohol-concern\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h5>Are you concerned about how much you drink?</h5>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"alcohol-consider-stopping\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h5>Have you considered stopping?</h5>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t</div>\n)\n\nexport default Alcohol\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "AlcoholQuestionnaire",
    "memberof": "src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/alcohol.jsx~AlcoholQuestionnaire",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "importStyle": null,
    "description": "",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "Alcohol",
    "memberof": "src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/alcohol.jsx~Alcohol",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/alcohol.jsx",
    "importStyle": "Alcohol",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/client/spa/pages/admit-patient/history/Questionnaire.js~Questionnaire"
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/history/alcohol.jsx~Alcohol",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/alcohol.jsx~Alcohol#render",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/diet.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * @returns {preact.VNode}\n */\nconst Diet = () => (\n\t<div className=\"row\">\n\t\t<h4>Diet</h4>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"diet-dieting\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h5>Are you dieting?</h5>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"diet-difficulties-eating\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h5>Do you have any difficulties in eating or drinking?</h5>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t\t<div className=\" col s12 input-field\">\n\t\t\t<h5>How many meals do you eat per day?</h5>\n\t\t\t<input id=\"meals_eaten\" type=\"number\" value={3} data-form-key=\"diet-meals-eaten\" className=\"validate patient-history-input\" />\n\t\t</div>\n\t</div>\n)\n\nexport default Diet\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/diet.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "Diet",
    "memberof": "src/client/spa/pages/admit-patient/history/diet.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/diet.jsx~Diet",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/diet.jsx",
    "importStyle": "Diet",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/drugs.jsx",
    "content": "import {h} from 'preact'\n\nimport Questionnaire from './Questionnaire'\nimport {IncButton, DecButton} from './util'\n\nclass Drugs extends Questionnaire {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {numDrugs: 1}\n\t}\n\n\t/**\n\t * create a function to increase an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tinc(type) {\n\t\treturn () => this.setState({[type]: this.state[type] + 1})\n\t}\n\n\t/**\n\t * create a function to decrease an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tdec(type) {\n\t\treturn () => this.setState({[type]: this.state[type] - 1})\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<h4>Drug Use</h4>\n\t\t\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"drug-currently-use\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t\t\t<h6>Do you currently use recreational drugs/substances?</h6>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire(true).bind(this)}>Yes</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire().bind(this)}>No</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\t\t\t\t{this.state.showQuestionnaire ? <DrugsQuestionnaire inc={this.inc.bind(this)} dec={this.dec.bind(this)} numDrugs={this.state.numDrugs} /> : ''}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst DrugsQuestionnaire = props => (\n\t<div>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<div>\n\t\t\t\t<h6>Which kind and how frequently?</h6>\n\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"drug-use-frequency\" data-materialize-type=\"multiple-input-group\">\n\t\t\t\t\t{Array.from({length: props.numDrugs}).map((_, idx) => (\n\t\t\t\t\t\t<div className=\"scrip-input row input-group\">\n\t\t\t\t\t\t\t<div className=\"col m6 s12 input-field\">\n\t\t\t\t\t\t\t\t<input id={`drug-name-${idx}`} type=\"text\" className=\"validate name\" />\n\t\t\t\t\t\t\t\t<label htmlFor={`drug-name-${idx}`}>Drug Name</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t<input id={`drug-dose-${idx}`} type=\"text\" className=\"validate dose\" />\n\t\t\t\t\t\t\t\t<label htmlFor={`drug-dose-${idx}`}>Dose</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t<input id={`drug-freq-${idx}`} type=\"text\" className=\"validate frequency\" />\n\t\t\t\t\t\t\t\t<label htmlFor={`drug-freq-${idx}`}>Frequency</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<IncButton onClick={props.inc} />\n\t\t\t\t\t<DecButton onClick={props.dec} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"drug-injected\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h6>Have you ever injected recreational drugs with a needle?</h6>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t</div>\n)\n\nexport default Drugs\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/drugs.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "DrugsQuestionnaire",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~DrugsQuestionnaire",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/drugs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "Drugs",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/drugs.jsx",
    "importStyle": "Drugs",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/client/spa/pages/admit-patient/history/Questionnaire.js~Questionnaire"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"numDrugs\": number}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "inc",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs#inc",
    "access": "public",
    "description": "create a function to increase an item in state",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "dec",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs#dec",
    "access": "public",
    "description": "create a function to decrease an item in state",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/drugs.jsx~Drugs#render",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/exercise.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * @returns {preact.VNode}\n */\nconst Exercise = () => (\n\t<div className=\"row\">\n\t\t<h4>Exercise</h4>\n\t\t<div className=\"col s12\">\n\n\t\t\t<h5>How frequently do you exercise?</h5>\n\t\t\t<form className=\"patient-history-input\" data-form-key=\"exercise-frequency\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"sedentary\" checked />\n\t\t\t\t\t\t<span>Sedentary (no exercise)</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" value=\"mild\" type=\"radio\" />\n\t\t\t\t\t\t<span>Mild Exercise (climb stairs, regular warks)</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" value=\"occasional\" type=\"radio\" />\n\t\t\t\t\t\t<span>Occasional vigorous exercise (&lt;4 times/week for 30 min)</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" value=\"vigorous\" type=\"radio\" />\n\t\t\t\t\t\t<span>Regular vigorous exercise (&gt;4 times/week for 30 min)</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n)\n\nexport default Exercise\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/exercise.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "Exercise",
    "memberof": "src/client/spa/pages/admit-patient/history/exercise.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/exercise.jsx~Exercise",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/exercise.jsx",
    "importStyle": "Exercise",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/health-history.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\n\nimport {IncButton, DecButton} from './util'\n\nclass HealthHistory extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tnumProbs: 1,\n\t\t\tnumOps: 1,\n\t\t\tnumOth: 1,\n\t\t}\n\t}\n\n\t// selects fall over on inc/dec, re-init\n\tcomponentDidUpdate() {\n\t\tconst select = this.mainContainer.querySelectorAll('select')\n\t\tM.FormSelect.init(select)\n\t}\n\n\t/**\n\t * create a function to increase an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tinc(type) {\n\t\treturn () => this.setState({[type]: this.state[type] + 1})\n\t}\n\n\t/**\n\t * create a function to decrease an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tdec(type) {\n\t\treturn () => this.setState({[type]: this.state[type] - 1})\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\" ref={m => this.mainContainer = m}>\n\t\t\t\t<h4>Health History</h4>\n\t\t\t\t<div className=\"input-field col s12 m6\">\n\t\t\t\t\t<select multiple className=\"patient-details-select patient-history-input\" data-form-key=\"health-childhood-illnesses\" data-materialize-type=\"select\">\n\t\t\t\t\t\t<option value=\"\" disabled selected>Select all that apply</option>\n\t\t\t\t\t\t<option value=\"Measles\">Measles</option>\n\t\t\t\t\t\t<option value=\"Mumps\">Mumps</option>\n\t\t\t\t\t\t<option value=\"Rubella\">Rubella</option>\n\t\t\t\t\t\t<option value=\"Chickenpox\">Chickenpox</option>\n\t\t\t\t\t\t<option value=\"Rheumatic Fever\">Rheumatic Fever</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<label>Childhood Illnesses</label>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-field col s12 m6\">\n\t\t\t\t\t<select multiple className=\"patient-details-select patient-history-input\" data-form-key=\"health-immunisations\" data-materialize-type=\"select\">\n\t\t\t\t\t\t<option value=\"\" disabled selected>Select all that apply</option>\n\t\t\t\t\t\t<option value=\"Tetanus\">Tetanus</option>\n\t\t\t\t\t\t<option value=\"Hepatitis\">Hepatitis</option>\n\t\t\t\t\t\t<option value=\"Influenza\">Influenza</option>\n\t\t\t\t\t\t<option value=\"MMR\">MMR</option>\n\t\t\t\t\t\t<option value=\"Meningitis\">Meningitis</option>\n\t\t\t\t\t\t<option value=\"Pneumonia\">Pneumonia</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<label>Immunisations</label>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<h6>Medical Issues</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"health-medical-issues\" data-materialize-type=\"input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numProbs}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`med-issue-name-${idx}`} type=\"text\" className={`validate med-issue-name-${idx}`} />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`med-issue-name-${idx}`}>Medical Problem</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.inc('numProbs').bind(this)} />\n\t\t\t\t\t\t<DecButton onClick={this.dec('numProbs').bind(this)} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<h6>Surgical Operations</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"health-operations\" data-materialize-type=\"input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numOps}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`op-name-${idx}`} type=\"text\" className={`validate med-name-${idx}`} />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`op-name-${idx}`}>Operation</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.inc('numOps').bind(this)} />\n\t\t\t\t\t\t<DecButton onClick={this.dec('numOps').bind(this)} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t<h6>Other Hospitalisations</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"health-hospitalisations\" data-materialize-type=\"input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numOth}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`hosp-name-${idx}`} type=\"text\" className={`validate med-name-${idx}`} />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`hosp-name-${idx}`}>Hospitalisation Reason</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.inc('numOth').bind(this)} />\n\t\t\t\t\t\t<DecButton onClick={this.dec('numOth').bind(this)} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default HealthHistory\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/health-history.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "class",
    "name": "HealthHistory",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/health-history.jsx",
    "importStyle": "HealthHistory",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 120,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"numProbs\": number, \"numOps\": number, \"numOth\": number}"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "inc",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#inc",
    "access": "public",
    "description": "create a function to increase an item in state",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "dec",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#dec",
    "access": "public",
    "description": "create a function to decrease an item in state",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/health-history.jsx~HealthHistory#render",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/medication.jsx",
    "content": "import {h, Component} from 'preact'\n\nimport {IncButton, DecButton} from './util'\n\nclass Medication extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tnumScrip: 1,\n\t\t\tnumOtc: 1,\n\t\t\tnumAllergies: 1,\n\t\t}\n\t\tthis.incScrip = this.inc('numScrip').bind(this)\n\t\tthis.decScrip = this.dec('numScrip').bind(this)\n\t\tthis.incOtc = this.inc('numOtc').bind(this)\n\t\tthis.decOtc = this.dec('numOtc').bind(this)\n\t\tthis.incAllergies = this.inc('numAllergies').bind(this)\n\t\tthis.decAllergies = this.dec('numAllergies').bind(this)\n\t}\n\n\t/**\n\t * create a function to increase an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tinc(type) {\n\t\treturn () => this.setState({[type]: this.state[type] + 1})\n\t}\n\n\t/**\n\t * create a function to decrease an item in state\n\t * @param {string} type key in state to update\n\t * @returns {Function}\n\t */\n\tdec(type) {\n\t\treturn () => this.setState({[type]: this.state[type] - 1})\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<h4>Medication</h4>\n\t\t\t\t<div>\n\t\t\t\t\t<h6>Prescription Medication</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"medication-prescription\" data-materialize-type=\"multiple-input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numScrip}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"scrip-input row input-group\">\n\t\t\t\t\t\t\t\t<div className=\"col m6 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`med-name-${idx}`} type=\"text\" className={`validate name med-name-${idx}`} />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`med-name-${idx}`}>Medication Name</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`med-dose-${idx}`} type=\"text\" className=\"validate dose\" />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`med-dose-${idx}`}>Dose</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`med-freq-${idx}`} type=\"text\" className=\"validate frequency\" />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`med-freq-${idx}`}>Frequency</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.incScrip} />\n\t\t\t\t\t\t<DecButton onClick={this.decScrip} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<div>\n\t\t\t\t\t<h6>Over the Counter Medication</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"medication-otc\" data-materialize-type=\"multiple-input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numOtc}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"scrip-input row input-group\">\n\t\t\t\t\t\t\t\t<div className=\"col m6 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`otc-med-name-${idx}`} type=\"text\" className={`validate name otc-med-name-${idx}`} />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`otc-med-name-${idx}`}>OTC Medication Name</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`otc-med-dose-${idx}`} type=\"text\" className=\"dose validate\" />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`otc-med-dose-${idx}`}>Dose</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col m3 s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`otc-med-freq-${idx}`} type=\"text\" className=\"frequency validate\" />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`otc-med-freq-${idx}`}>Frequency</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.incOtc} />\n\t\t\t\t\t\t<DecButton onClick={this.decOtc} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<div>\n\t\t\t\t\t<h6>Allergies</h6>\n\t\t\t\t\t<div className=\"patient-history-input\" data-form-key=\"medication-allergies\" data-materialize-type=\"input-group\">\n\t\t\t\t\t\t{Array.from({length: this.state.numAllergies}).map((_, idx) => (\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col s12 input-field\">\n\t\t\t\t\t\t\t\t\t<input id={`allergy-name-${idx}`} type=\"text\" className=\"validate med-name\" />\n\t\t\t\t\t\t\t\t\t<label htmlFor={`allergy-name-${idx}`}>Allergy</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<IncButton onClick={this.incAllergies} />\n\t\t\t\t\t\t<DecButton onClick={this.decAllergies} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Medication\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/medication.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "Medication",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/medication.jsx",
    "importStyle": "Medication",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 128,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#state",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"numScrip\": number, \"numOtc\": number, \"numAllergies\": number}"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "incScrip",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#incScrip",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "decScrip",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#decScrip",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "incOtc",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#incOtc",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "decOtc",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#decOtc",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "incAllergies",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#incAllergies",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "decAllergies",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#decAllergies",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "inc",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#inc",
    "access": "public",
    "description": "create a function to increase an item in state",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "dec",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#dec",
    "access": "public",
    "description": "create a function to decrease an item in state",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "key in state to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/medication.jsx~Medication#render",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/other.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * @returns {preact.VNode}\n */\nconst OtherQuestions = () => (\n\t<div className=\"row\">\n\t\t<h4>Other Questions</h4>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<h5>Mental Health and Wellbeing</h5>\n\t\t\t<textarea id=\"mental-health-wellbeing\" className=\"materialize-textarea patient-history-input\" data-form-key=\"other-mental-health-wellbeing\" />\n\t\t</div>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<h5>Social History</h5>\n\t\t\t<textarea id=\"social-history\" className=\"materialize-textarea patient-history-input\" data-form-key=\"other-social-history\" />\n\t\t</div>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<h5>Are you aware of any history with Cancer, Hypertension, Diabetes</h5>\n\t\t\t<textarea id=\"family-history\" className=\"materialize-textarea patient-history-input\" data-form-key=\"other-family-history\" />\n\t\t</div>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<h5>Other Relevant History</h5>\n\t\t\t<textarea id=\"relevant-history\" className=\"materialize-textarea patient-history-input\" data-form-key=\"other-relevant-history\" />\n\t\t</div>\n\t</div>\n)\n\nexport default OtherQuestions\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/other.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "OtherQuestions",
    "memberof": "src/client/spa/pages/admit-patient/history/other.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/other.jsx~OtherQuestions",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/other.jsx",
    "importStyle": "OtherQuestions",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "content": "import {h} from 'preact'\nimport format from 'date-fns/format'\nimport {getName} from '../../../util'\nimport {SignatureBox} from '../../../Partial'\n\n/**\n * @returns {string} format the date correctly\n */\nconst getDate = () => format(Date.now(), ' MMM DD, YYYY')\n\n/**\n * @returns {preact.VNode}\n */\nconst SignOff = () => (\n\t<div className=\"row\">\n\t\t<h4>Sign-off</h4>\n\t\t<div className=\"col s12\">\n\t\t\t<p>Please sign as the health professional taking this health history:</p>\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t\t<input id=\"practitioner-name\" type=\"text\" className=\"validate\" disabled value={getName()} data-form-key=\"sign-name\" />\n\t\t\t\t\t\t<label className=\"active\" htmlFor=\"practitioner-name\">Name</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t\t<input id=\"practitioner-designation\" type=\"text\" className=\"validate patient-history-input\" data-form-key=\"sign-designation\" />\n\t\t\t\t\t\t<label htmlFor=\"practitioner-designation\">Designation</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t\t<input id=\"practitioner-date\" type=\"text\" className=\"validate datepicker patient-history-input\" value={getDate()} data-form-key=\"sign-date\" />\n\t\t\t\t\t\t<label className=\"active\" htmlFor=\"practitioner-date\">Date</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t<SignatureBox />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n)\n\nexport default SignOff\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "getDate",
    "memberof": "src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/sign-off.jsx~getDate",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "importStyle": null,
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} format the date correctly"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "format the date correctly"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "SignOff",
    "memberof": "src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/sign-off.jsx~SignOff",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/sign-off.jsx",
    "importStyle": "SignOff",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "content": "import {h} from 'preact'\nimport M from 'materialize-css'\n\nimport Questionnaire from './Questionnaire'\n\nclass Tobacco extends Questionnaire {\n\t/**\n\t * Whenever the form updates, re-init materialize components\n\t */\n\tcomponentDidUpdate() {\n\t\t// todo: change this to ref\n\t\tconst pickers = document.querySelectorAll('.datepicker')\n\t\tM.Datepicker.init(pickers)\n\t\tconst select = document.querySelectorAll('select')\n\t\tM.FormSelect.init(select)\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<h4>Tobacco Use</h4>\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"tobacco-used-prior\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t\t\t\t\t<h6>Have you used Tobacco in the last 5 years?</h6>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire(true).bind(this)}>Yes</span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t\t\t\t\t<span onClick={this.toggleQuestionnaire().bind(this)}>No</span>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.state.showQuestionnaire ? <TobaccoQuestionnaire /> : ''}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst TobaccoQuestionnaire = () => (\n\t<div>\n\t\t<div className=\"col s12\">\n\t\t\t<h6>If you have given up, when did you last smoke?</h6>\n\t\t\t<input type=\"text\" className=\"datepicker patient-history-input\" data-form-key=\"tobacco-last-use\" />\n\t\t</div>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"tobacco-current-use\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h6>Are you currently using Tobacco?</h6>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t\t<div className=\"input-field col s12 tooltipped\" data-position=\"top\" data-tooltip=\"Include Cigarettes, Pipe and Cigars\">\n\t\t\t<h6>If you're currently using tobacco, which are you using?</h6>\n\t\t\t<textarea id=\"tobacco-used\" className=\"materialize-textarea  patient-history-input\" data-form-key=\"tobacco-type-used\" />\n\t\t</div>\n\t\t<form className=\"col s12 patient-history-input\" data-form-key=\"tobacco-nicotine-replace-therapy\" data-materialize-type=\"radio-group\" action=\"\">\n\t\t\t<h6>Are you currently using nicotine replacement therapy?</h6>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"yes\" />\n\t\t\t\t\t<span>Yes</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label>\n\t\t\t\t\t<input className=\"with-gap\" name=\"group1\" type=\"radio\" value=\"no\" checked />\n\t\t\t\t\t<span>No</span>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t</form>\n\t\t<div className=\"input-field col s12\">\n\t\t\t<select className=\"patient-details-select patient-history-input\" data-form-key=\"tobacco-nicotine-replacement-types\" data-materialize-type=\"select\">\n\t\t\t\t<option value=\"\" disabled selected>Select one</option>\n\t\t\t\t<option value=\"\">dont know</option>\n\t\t\t\t<option value=\"\">which types</option>\n\t\t\t\t<option value=\"\">exist out there</option>\n\t\t\t\t<option value=\"\">yet</option>\n\t\t\t</select>\n\t\t\t<label>If yes, which type?</label>\n\t\t</div>\n\t</div>\n)\n\nexport default Tobacco\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "TobaccoQuestionnaire",
    "memberof": "src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/tobacco.jsx~TobaccoQuestionnaire",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Tobacco",
    "memberof": "src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/tobacco.jsx~Tobacco",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/tobacco.jsx",
    "importStyle": "Tobacco",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/client/spa/pages/admit-patient/history/Questionnaire.js~Questionnaire"
    ]
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "src/client/spa/pages/admit-patient/history/tobacco.jsx~Tobacco",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/tobacco.jsx~Tobacco#componentDidUpdate",
    "access": "public",
    "description": "Whenever the form updates, re-init materialize components",
    "lineNumber": 10,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/history/tobacco.jsx~Tobacco",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/history/tobacco.jsx~Tobacco#render",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/history/util.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * A decrease button, with a little down arrow\n * @param {preact.ComponentProps} props\n * @param {function} props.onClick onClick method\n */\nexport const DecButton = props => (\n\t<div className=\"col\">\n\t\t<a className=\"waves-effect waves-light btn red darken-1\" onClick={props.onClick}><i className=\"material-icons left\">arrow_downward</i>Remove</a>\n\t</div>\n)\n\n/**\n * An in button, with a little up arrow\n * @param {preact.ComponentProps} props\n * @param {function} props.onClick onClick method\n */\nexport const IncButton = props => (\n\t<div className=\"col\">\n\t\t<a className=\"waves-effect waves-light btn blue darken-1\" onClick={props.onClick}><i className=\"material-icons left\">arrow_upward</i>Add</a>\n\t</div>\n)\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/history/util.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "DecButton",
    "memberof": "src/client/spa/pages/admit-patient/history/util.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/util.jsx~DecButton",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/util.jsx",
    "importStyle": "{DecButton}",
    "description": "A decrease button, with a little down arrow",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onClick",
        "description": "onClick method"
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "IncButton",
    "memberof": "src/client/spa/pages/admit-patient/history/util.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/history/util.jsx~IncButton",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/history/util.jsx",
    "importStyle": "{IncButton}",
    "description": "An in button, with a little up arrow",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onClick",
        "description": "onClick method"
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/client/spa/pages/admit-patient/index.jsx",
    "content": "import {h, Component} from 'preact'\nimport qs from 'qs'\nimport {route} from 'preact-router'\nimport M from 'materialize-css'\n\nimport PatientDemographicInfo from './Patient'\nimport PatientHistoryInfo from './History'\nimport ContactInfo from './Contact'\n\nimport {Loader} from '../../Partial'\nimport {fhirBase, doModal, getJwtPayload} from '../../util'\n\nimport '../../styles/create-patient.scss'\n\nfunction createHistory(patient_id) {\n\tconst elems = document.querySelectorAll('.patient-history-input')\n\tconst form = [...elems].reduce((acc, elem) => {\n\t\t// dataset should be of form '$KEY-attr, eg health-childhood-illnesses\n\t\tconst [key, ...rest] = elem.dataset.formKey.split('-')\n\t\tconst attr = rest.join('-')\n\t\t// ensure accumulator has form {health: {}, drugs: {}}\n\t\tif (!(key in acc)) acc[key] = {}\n\t\t// get handle on current place in data structure\n\t\tconst cur = acc[key]\n\t\t// fetch data from element\n\t\tswitch (elem.dataset.materializeType) {\n\t\t// use materialize method to get selected values\n\t\tcase 'select': {\n\t\t\tconst inst = M.FormSelect.getInstance(elem)\n\t\t\tcur[attr] = inst.getSelectedValues()\n\t\t\treturn acc\n\t\t}\n\t\t// materialize requires a lot of markup for a radio button (form>p>label>input)\n\t\t// find the checked radio button and get the val (true/false - set in elem.value prop)\n\t\tcase 'radio-group': {\n\t\t\tconst checked = elem.querySelector(':checked')\n\t\t\tcur[attr] = checked.value.replace('yes', 'true').replace('no', 'false')\n\t\t\treturn acc\n\t\t}\n\t\t// saved for when there's the option to add/remove\n\t\tcase 'input-group': {\n\t\t\tconst inputs = elem.querySelectorAll('input')\n\t\t\t// get all non-null values from inputs in the group\n\t\t\tcur[attr] = [...inputs].map(el => el.value.trim()).filter(Boolean)\n\t\t\treturn acc\n\t\t}\n\t\tcase 'multiple-input-group': {\n\t\t\tconst inputs = elem.querySelectorAll('.input-group')\n\t\t\tcur[attr] = [...inputs].map(input => ({\n\t\t\t\tname: input.querySelector('.name').value,\n\t\t\t\tdose: input.querySelector('.dose').value,\n\t\t\t\tfreq: input.querySelector('.frequency').value,\n\t\t\t}))\n\t\t\treturn acc\n\t\t}\n\t\tdefault: {\n\t\t\tcur[attr] = elem.value ? elem.value.trim() : null\n\t\t\treturn acc\n\t\t}\n\t\t}\n\t}, {})\n\tconst sigCanv = document.getElementById('sign-off-canvas')\n\tconst rawImg = sigCanv.toDataURL('image/png')\n\tform.sign.image = rawImg\n\tform.patient_id = patient_id\n\tform.sign.practitioner_id = getJwtPayload(localStorage.token).userid\n\treturn fhirBase.post('/History', form, {\n\t\theaders: {'content-type': 'application/json'},\n\t})\n}\n\nclass AdmitPatient extends Component {\n\t/**\n\t * Create Patient component\n\t * @param {object} props component props\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\twards: [],\n\t\t\tloaded: false,\n\t\t}\n\n\t\tthis.getImg = this.getImg.bind(this)\n\t\tthis.setImg = this.setImg.bind(this)\n\t\tthis.setVideo = this.setVideo.bind(this)\n\t\tthis.setCanvas = this.setCanvas.bind(this)\n\t}\n\n\t/**\n\t * Gets all locations from the API and populates state\n\t */\n\tasync componentDidMount() {\n\t\tconst resp = await fhirBase.get('/Location?type=Ward')\n\t\tif (resp.data) {\n\t\t\tthis.setState({\n\t\t\t\tloaded: true,\n\t\t\t\twards: resp.data.map(ward => ({val: ward.id, text: ward.name})),\n\t\t\t}, async () => {\n\t\t\t\t// the form is showing and webcam is, so populate with webcam\n\t\t\t\tconst select = document.querySelectorAll('#location_id, #patient-gender, .patient-details-select')\n\t\t\t\tM.FormSelect.init(select)\n\t\t\t\ttry {\n\t\t\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({video: true})\n\t\t\t\t\tthis.video.srcObject = stream\n\t\t\t\t\tthis.video.onloadedmetadata = this.video.play\n\t\t\t\t\t// when the video plays, the height and width of the container changes\n\t\t\t\t\t// set the canvas here\n\t\t\t\t\tthis.video.addEventListener('playing', () => {\n\t\t\t\t\t\tconst dimensions = this.video.getBoundingClientRect()\n\t\t\t\t\t\tthis.canvas.height = dimensions.height\n\t\t\t\t\t\tthis.canvas.width = dimensions.width\n\t\t\t\t\t})\n\t\t\t\t} catch (err) {\n\t\t\t\t\tM.toast({html: 'There was an error initialising the Webcam'})\n\t\t\t\t\tconsole.error(`Webcam error: ${err}`)\n\t\t\t\t}\n\t\t\t\tconst date = document.querySelectorAll('.datepicker')\n\t\t\t\tM.Datepicker.init(date, {autoClose: true})\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Takes webcam piped to video and sticks on canvas\n\t * Saves this to B64, sets state and pauses the stream\n\t */\n\tgetImg() {\n\t\tconsole.log('[CREATE] Saving image')\n\t\tconst dimensions = this.video.getBoundingClientRect()\n\t\tthis.canvas.getContext('2d').drawImage(this.video, 0, 0, dimensions.width, dimensions.height)\n\t\tconst img = this.canvas.toDataURL('image/png')\n\t\tthis.img = img\n\t\tdoModal('Success', 'Image saved')\n\t\tthis.video.pause()\n\t}\n\n\t/**\n\t * serialise the uploaded image and save it\n\t * @param {EventTarget} ev Event from input onChange event\n\t */\n\tsetImg(ev) {\n\t\ttry {\n\t\t\tconst {files: [file]} = ev.target\n\t\t\tconst reader = new FileReader()\n\t\t\treader.addEventListener('load', () => this.img = reader.result, false)\n\t\t\treader.readAsDataURL(file)\n\t\t} catch (err) {\n\t\t\tdoModal('Error', `There was an error setting the image: ${err}`)\n\t\t}\n\t}\n\n\n\tsetVideo(ref) {\n\t\tthis.video = ref\n\t}\n\n\tsetCanvas(ref) {\n\t\tthis.canvas = ref\n\t}\n\n\t/**\n\t * yanks all data from form and posts to API\n\t * creates a patient and then an encounter\n\t */\n\tasync admit() {\n\t\tconst form = new FormData()\n\t\tif (this.img) {\n\t\t\tconsole.log('[CREATE] Appending image')\n\t\t\tconst img = await fetch(this.img).then(r => r.blob())\n\t\t\tform.append('patient-photo', img)\n\t\t}\n\t\tconst labels = [\n\t\t\t'patient-prefix',\n\t\t\t'patient-given',\n\t\t\t'patient-family',\n\t\t\t'patient-gender',\n\t\t\t'location_id',\n\t\t\t'contact-prefix',\n\t\t\t'contact-given',\n\t\t\t'contact-family',\n\t\t\t'contact-fullname',\n\t\t\t'contact-phone',\n\t\t]\n\t\tconst invalid = []\n\t\tconst obj = labels.reduce((acc, label) => {\n\t\t\tconst elem = document.getElementById(label)\n\t\t\tconst {value} = elem\n\t\t\tif (value) {\n\t\t\t\tacc[label] = value\n\t\t\t\telem.classList.add('valid')\n\t\t\t\telem.classList.remove('invalid')\n\t\t\t} else {\n\t\t\t\tinvalid.push(label)\n\t\t\t\telem.classList.add('invalid')\n\t\t\t\telem.classList.remove('valid')\n\t\t\t}\n\t\t\treturn acc\n\t\t}, {})\n\t\tif (invalid.length) {\n\t\t\tconst err = invalid\n\t\t\t\t.map(la => la.replace(/-/g, ' '))\n\t\t\t\t.map(la => la.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '))\n\t\t\t\t.map(la => `<li>${la}</li>`)\n\t\t\t\t.join('\\n')\n\t\t\tdoModal('Error with form!', `Please complete the following fields: <ul>${err}</ul>`)\n\t\t\treturn\n\t\t}\n\t\tobj['patient-fullname'] = obj['patient-given'] + obj['patient-family']\n\n\t\tObject.keys(obj).forEach(label => form.append(label, obj[label]))\n\t\ttry {\n\t\t\tconst resp = await fhirBase.post('/Patient', form)\n\t\t\tconst {issue: [outcome]} = resp.data\n\t\t\tif (outcome.code === 200) {\n\t\t\t\tconst encForm = new FormData()\n\t\t\t\tencForm.append('class', 'admission')\n\t\t\t\tencForm.append('status', 'finished')\n\t\t\t\tencForm.append('patient_id', outcome.diagnostics.patient_id)\n\t\t\t\tencForm.append('location_id', obj.location_id)\n\t\t\t\tconst encResp = await fhirBase.post('/Encounter', encForm)\n\t\t\t\tconst histResp = await createHistory(outcome.diagnostics.patient_id)\n\t\t\t\tconsole.log(histResp)\n\t\t\t\tdoModal('Success', encResp.data.issue[0].details.text)\n\t\t\t} else {\n\t\t\t\tdoModal('Error', outcome.data.issue[0].details.text)\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.warn('[create patient]', err)\n\t\t\tdoModal('Error', `There is an error with patient creation: ${err}`)\n\t\t}\n\t}\n\n\n\t/**\n\t * renders component\n\t * if no wards, render a loading icon\n\t * @returns {VNode}\n\t */\n\trender() {\n\t\tif (!this.state.loaded) return <Loader />\n\t\treturn (\n\t\t\t<div className=\"row\" id=\"patient-form\">\n\t\t\t\t<h2>Admit a New Patient</h2>\n\t\t\t\t<form>\n\t\t\t\t\t<PatientDemographicInfo\n\t\t\t\t\t\twards={this.state.wards}\n\t\t\t\t\t\tgetImg={this.getImg}\n\t\t\t\t\t\tsetImg={this.setImg}\n\t\t\t\t\t\tsetVideo={this.setVideo}\n\t\t\t\t\t\tsetCanvas={this.setCanvas}\n\t\t\t\t\t\tplayVideo={() => this.video.play()}\n\t\t\t\t\t/>\n\t\t\t\t\t<PatientHistoryInfo />\n\t\t\t\t\t<ContactInfo />\n\t\t\t\t\t<a className=\"waves-effect waves-light btn col s12\" onClick={this.admit.bind(this)}>\n\t\t\t\t\t\t<i className=\"material-icons left\">perm_identity</i>Admit\n\t\t\t\t\t</a>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default AdmitPatient\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/admit-patient/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "createHistory",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~createHistory",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/admit-patient/index.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "patient_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "AdmitPatient",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx",
    "static": true,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/admit-patient/index.jsx",
    "importStyle": "AdmitPatient",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#constructor",
    "access": "public",
    "description": "Create Patient component",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component props"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#state",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "{\"wards\": *, \"loaded\": *}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#componentDidMount",
    "access": "public",
    "description": "Gets all locations from the API and populates state",
    "lineNumber": 93,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getImg",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#getImg",
    "access": "public",
    "description": "Takes webcam piped to video and sticks on canvas\nSaves this to B64, sets state and pauses the stream",
    "lineNumber": 128,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "img",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#img",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "setImg",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#setImg",
    "access": "public",
    "description": "serialise the uploaded image and save it",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "Event from input onChange event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "setVideo",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#setVideo",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "video",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#video",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "setCanvas",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#setCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "admit",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#admit",
    "access": "public",
    "description": "yanks all data from form and posts to API\ncreates a patient and then an encounter",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/admit-patient/index.jsx~AdmitPatient#render",
    "access": "public",
    "description": "renders component\nif no wards, render a loading icon",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/client/spa/pages/create-ward.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\n\nimport {fhirBase, doModal} from '../util'\n\nimport '../styles/create-location.scss'\n\nclass CreateWard extends Component {\n\t/**\n\t * Ensure elements have some content and change their class accordingly\n\t * @param {Array<VNode>} inputs Inputs to validate .value\n\t * @return {boolean} Whether the given inputs are valid\n\t */\n\tstatic validateForms(inputs) {\n\t\t// give empty fields a red box, remove valid classname too\n\t\tconst invalid = inputs.filter((control) => {\n\t\t\tif (!control.value) {\n\t\t\t\tcontrol.classList.add('invalid')\n\t\t\t\tcontrol.classList.remove('valid')\n\t\t\t}\n\t\t\treturn !control.value\n\t\t})\n\n\t\t// give all valid ones the green box, removing the red\n\t\tinputs.forEach((control) => {\n\t\t\tif (!invalid.includes(control)) {\n\t\t\t\tcontrol.classList.remove('invalid')\n\t\t\t\tcontrol.classList.add('valid')\n\t\t\t}\n\t\t})\n\n\t\t// length === 0 if all inputs have some data. cast this to boolean\n\t\treturn !invalid.length\n\t}\n\n\t/**\n\t * Page component used to create locations by interacting with /fhir/Location API\n\t * @param {object} props Props given to the preact component\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.instances = []\n\t}\n\n\t/**\n\t * Initialise all materialize elements on page load\n\t */\n\tcomponentDidMount() {\n\t\tthis.instances.push(\n\t\t\tM.CharacterCounter.init(this.name),\n\t\t\tM.CharacterCounter.init(this.desc),\n\t\t)\n\t}\n\n\t/**\n\t * Validate the elements on the page and then POST their data to /fhir/Location\n\t * @param {Event} ev Click event\n\t * @returns {Promise<void>}\n\t */\n\tasync makeWard(ev) {\n\t\tev.preventDefault() // don't refresh the page - this is a SPA!\n\t\tconst inputs = [this.name, this.desc] // inputs to check\n\t\tconst valid = CreateWard.validateForms(inputs)\n\t\tif (!valid) return // not valid. let the classNames do the talking\n\n\t\t// populate a form and send it to the server\n\t\tconst locForm = new FormData()\n\t\tlocForm.append('type', 'ward')\n\t\tinputs.forEach(control => locForm.set(control.id, control.value))\n\n\t\t// attempt to post\n\t\ttry {\n\t\t\tconst resp = await fhirBase.post('/Location', locForm)\n\t\t\tconst {id} = resp.data.issue[0].diagnostics\n\t\t\tdoModal('Success', `Successfully created \"${this.name.value}\" with ID ${id}`)\n\t\t\tinputs.forEach(input => input.value = '')\n\t\t} catch (err) {\n\t\t\tdoModal('Error!', `There was an error whilst creating the ward: ${err}`)\n\t\t}\n\t}\n\n\t/**\n\t * render the form!\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"create-location-input col s12\">\n\t\t\t\t\t<header><h1>Create a Location</h1></header>\n\t\t\t\t\t<form ref={f => this.form = f} className=\"row\">\n\t\t\t\t\t\t<div className=\"input-field col m6 s12\">\n\t\t\t\t\t\t\t<input id=\"name\" type=\"text\" ref={i => this.name = i} data-length=\"24\" />\n\t\t\t\t\t\t\t<label htmlFor=\"name\" className=\"validate\">Name</label>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"input-field col s12\">\n\t\t\t\t\t\t\t<textarea id=\"description\" className=\"materialize-textarea\" ref={t => this.desc = t} data-length=\"120\" />\n\t\t\t\t\t\t\t<label htmlFor=\"description\" className=\"validate\">Description</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t\t\t<a className=\"waves-effect waves-light btn\" onClick={this.makeWard.bind(this)}>Submit</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default CreateWard\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/create-ward.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "CreateWard",
    "memberof": "src/client/spa/pages/create-ward.jsx",
    "static": true,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/create-ward.jsx",
    "importStyle": "CreateWard",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "validateForms",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard.validateForms",
    "access": "public",
    "description": "Ensure elements have some content and change their class accordingly",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<VNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "Inputs to validate .value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the given inputs are valid"
    }
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard#constructor",
    "access": "public",
    "description": "Page component used to create locations by interacting with /fhir/Location API",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Props given to the preact component"
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "instances",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "static": false,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard#instances",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard#componentDidMount",
    "access": "public",
    "description": "Initialise all materialize elements on page load",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "makeWard",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard#makeWard",
    "access": "public",
    "description": "Validate the elements on the page and then POST their data to /fhir/Location",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "Click event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/create-ward.jsx~CreateWard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/create-ward.jsx~CreateWard#render",
    "access": "public",
    "description": "render the form!",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/client/spa/pages/home.jsx",
    "content": "import {h} from 'preact'\nimport {Link} from 'preact-router'\n\nimport {getJwtPayload} from '../util'\n\nimport '../styles/welcome.scss'\n\n/**\n * get the given name (or name) from JWT\n * @returns {Boolean}\n */\nconst getGiven = () => getJwtPayload(localStorage.token).given_name || getJwtPayload(localStorage.token).name\n\n/**\n * Welcome page\n * @return {preact.VNode} Welcome page\n */\nconst Welcome = () => {\n\tconst {permissions} = getJwtPayload(localStorage.getItem('token'))\n\tconst perms = (permissions || []).includes('edit:permissions') ? (\n\t\t<div className=\"col s6 l4\">\n\t\t\t<div className=\"hoverable card little home-card\">\n\t\t\t\t<Link href=\"/permissions\">\n\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t<span className=\"card-title\">Manage Permissions</span>\n\t\t\t\t\t\t<p>Enable practitioners to access different patients.</p>\n\t\t\t\t\t</div>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t) : ''\n\n\treturn (\n\t\t<div className=\"row\">\n\t\t\t<div className=\"col s12\">\n\t\t\t\t<header>\n\t\t\t\t\t<h1>Hi {getGiven()}! Welcome to ASPEN</h1>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t\t<div className=\"col s12\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t\t<div className=\"card blue-grey darken-1\">\n\t\t\t\t\t\t\t<div className=\"card-content white-text\">\n\t\t\t\t\t\t\t\t<span className=\"card-title\">Warning!</span>\n\t\t\t\t\t\t\t\t<p>This project is in heavy development and subject to change, break and even disappear</p>\n\t\t\t\t\t\t\t\t<p>Source code for this program can be found <a native className=\"orange-text text-lighten-2\" href=\"https://github.com/hjfitz/fyp\">on GitHub.</a></p>\n\t\t\t\t\t\t\t\t<p>JSDoc can be found <a native className=\"orange-text text-lighten-2\" href=\"/docs/js\">on /docs/js</a></p>\n\t\t\t\t\t\t\t\t<p>API Documentation is hosted using Swagger<a native className=\"orange-text text-lighten-2\" href=\"/docs/api\"> and is available at /docs/api</a></p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"col s12\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col s6 l4\">\n\t\t\t\t\t\t<div className=\"hoverable card little home-card\">\n\t\t\t\t\t\t\t<Link href=\"/wards\">\n\t\t\t\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t\t\t\t<span className=\"card-title\">View your wards</span>\n\t\t\t\t\t\t\t\t\t<p>View wards in the practice and access patient details.</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col s6 l4\">\n\t\t\t\t\t\t<div className=\"hoverable card little home-card\">\n\t\t\t\t\t\t\t<Link href=\"/search/patient\">\n\t\t\t\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t\t\t\t<span className=\"card-title\">Search for a Patient's Vital signs</span>\n\t\t\t\t\t\t\t\t\t<p>Search by details for a given patient.</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col s6 l4\">\n\t\t\t\t\t\t<div className=\"hoverable card little home-card\">\n\t\t\t\t\t\t\t<Link href=\"/add/patient\">\n\t\t\t\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t\t\t\t<span className=\"card-title\">Admit a Patient</span>\n\t\t\t\t\t\t\t\t\t<p>Create a new patient, including their photograph and history.</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col s6 l4\">\n\t\t\t\t\t\t<div className=\"hoverable card little home-card\">\n\t\t\t\t\t\t\t<Link href=\"/add/ward\">\n\t\t\t\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t\t\t\t<span className=\"card-title\">Create a ward</span>\n\t\t\t\t\t\t\t\t\t<p>Create a new ward to group patients in.</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{perms}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Welcome\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/home.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "getGiven",
    "memberof": "src/client/spa/pages/home.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/home.jsx~getGiven",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/home.jsx",
    "importStyle": null,
    "description": "get the given name (or name) from JWT",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "Welcome",
    "memberof": "src/client/spa/pages/home.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/home.jsx~Welcome",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/home.jsx",
    "importStyle": "Welcome",
    "description": "Welcome page",
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": "Welcome page"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/client/spa/pages/permissions.jsx",
    "content": "import {h, Component} from 'preact'\nimport cloneDeep from 'lodash/cloneDeep'\nimport M from 'materialize-css'\nimport Axios from 'axios'\n\nimport {Loader} from '../Partial'\nimport {fhirBase} from '../util'\n\nimport '../styles/permissions.scss'\n\n// permissions base, similar to FHIR base, but with a different content-type\nexport const permissionsBase = Axios.create({\n\tbaseURL: '/',\n\theaders: {\n\t\taccept: 'application/json',\n\t\t'content-type': 'application/json',\n\t},\n})\n\n// apply a new token for every request as logging in natively will use old token\npermissionsBase.interceptors.request.use((config) => {\n\tif (localStorage.getItem('token')) {\n\t\tconfig.headers.token = localStorage.getItem('token')\n\t}\n\treturn config\n})\n\n\nclass Permissions extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tpractitioners: [], // practitioner list from API (Bundle resourceType)\n\t\t\tpatients: [], // patient list by encounter from API\n\t\t\tselectedPractitioner: null,\n\t\t\tpractitionerPermissions: [],\n\t\t\tloaded: false,\n\t\t}\n\t\tthis.permissions = [\n\t\t\t{ident: 'view:allpatients', desc: 'View all patients without any need for assignment'},\n\t\t\t{ident: 'edit:permissions', desc: 'Edit permissions of any practitioner'},\n\t\t\t{ident: 'delete:patients', desc: 'Delete any patient'},\n\t\t\t{ident: 'add:patients', desc: 'Admit a patient'},\n\t\t\t{ident: 'add:wards', desc: 'Create a new ward'},\n\t\t\t{ident: 'add:vitals', desc: 'Add vital signs readings'},\n\t\t\t{ident: 'add:user', desc: 'Add a new user (for non-google login'},\n\t\t\t{ident: 'edit:link', desc: 'Change the link between practitioners and patients'},\n\t\t]\n\t\tthis.renderPermissions = this.renderPermissions.bind(this)\n\t\tthis.togglePermission = this.togglePermission.bind(this)\n\t\t// bind setPractitioner so the returned arrow func has `this` bound to instance of Permissions\n\t\t// ensures that if a child component is used, the correct state is updated\n\t\tthis.setPractitioner = this.setPractitioner.bind(this)\n\t}\n\n\t/**\n\t * get practitioner and encounter information from server. update state for lists\n\t */\n\tasync componentDidMount() {\n\t\tconst [{data: practitioners}, {data: patients}] = await Promise.all([\n\t\t\tfhirBase.get('/Practitioner'),\n\t\t\tfhirBase.get('/Encounter/?class=admission&_include=Encounter:patient;location'),\n\t\t])\n\t\tthis.setState({\n\t\t\tpractitioners,\n\t\t\tpatients,\n\t\t\tselectedPractitioner: null,\n\t\t\t// deep clone because the method will be acting on the objects underneath\n\t\t\toldPatients: cloneDeep(patients),\n\t\t\tloaded: true,\n\t\t})\n\t}\n\n\t/**\n\t * create a function that:\n\t\t* pull all data (patient relationships and permissions) from server\n\t\t* stores this data in state\n\t * @param {number} id practitioner ID (database PK)\n\t */\n\tsetPractitioner(id) {\n\t\treturn async () => {\n\t\t\t// fetch union table from permissions API\n\t\t\t// sadly FHIR has poor support for permissions\n\t\t\tconst [{data}, {data: {permissions}}] = await Promise.all([\n\t\t\t\tpermissionsBase.get(`/permissions/relationships/${id}`),\n\t\t\t\tpermissionsBase.get(`/permissions/view/${id}`),\n\t\t\t])\n\t\t\tconst patientIDs = data.map(datum => datum.patient_id)\n\t\t\tconst patients = cloneDeep(this.state.oldPatients)\n\t\t\t// elems in matches are objects and thus handlded by ref\n\t\t\t// they can be given a 'grouped' attr\n\t\t\tconst matches = patients.filter(patient => patientIDs.includes(patient.subject.id))\n\t\t\tmatches.map(match => match.grouped = true)\n\t\t\tthis.setState({selectedPractitioner: id, patients, practitionerPermissions: permissions})\n\t\t}\n\t}\n\n\t/**\n\t * take the selected practitioner (set in state)\n\t * and a function that creates/removes a row with practitioner id and patient ID\n\t * in practitionerpatients table\n\t * @param {number} patientID patient ID to group\n\t * @param {boolean} grouped whether the practitioner and patient are grouped\n\t */\n\tmakeGrouping(patientID, grouped = false) {\n\t\t/**\n\t\t * Attempt to POST to /permissions/destroy or /permission/create\n\t\t * depending on whether patient is already grouped\n\t\t * grouped data stored in state, from /permissions/relationships/:id\n\t\t */\n\t\treturn async () => {\n\t\t\tif (!this.state.selectedPractitioner) return\n\t\t\tconst baseUrl = grouped ? 'destroy' : 'create'\n\t\t\ttry {\n\t\t\t\tawait permissionsBase.post(`/permissions/${baseUrl}`, {\n\t\t\t\t\tpatientID,\n\t\t\t\t\tpractitionerID: this.state.selectedPractitioner,\n\t\t\t\t})\n\t\t\t\tconst oldID = this.state.selectedPractitioner\n\t\t\t\tawait this.componentDidMount()\n\t\t\t\tawait this.setPractitioner(oldID)()\n\t\t\t\tM.toast({html: 'Successfully updated patient and practitioner'})\n\t\t\t} catch (err) {\n\t\t\t\tM.toast({html: 'You do not have access to do this!'})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * attempt to add or remove a practitioner permission\n\t * post this to /permissions/toggle as well as practitioner id, permission and their permission set\n\t * @param {string} perm permission to add/remove\n\t */\n\ttogglePermission(perm) {\n\t\treturn async () => {\n\t\t\ttry {\n\t\t\t\tconsole.log({\n\t\t\t\t\tpractitionerID: this.state.selectedPractitioner,\n\t\t\t\t\tpermission: perm,\n\t\t\t\t\tset: this.state.practitionerPermissions,\n\t\t\t\t})\n\t\t\t\tconst resp = await permissionsBase.post('/permissions/toggle', {\n\t\t\t\t\tpractitionerID: this.state.selectedPractitioner,\n\t\t\t\t\tpermission: perm,\n\t\t\t\t\tset: this.state.practitionerPermissions,\n\t\t\t\t})\n\t\t\t\tconsole.log(resp)\n\t\t\t\tthis.setState({practitionerPermissions: resp.data.permissions}, () => {\n\t\t\t\t\tM.toast({html: `Successfully changed ${perm}`})\n\t\t\t\t})\n\t\t\t} catch (err) {\n\t\t\t\tM.toast({html: 'You do not have permission to do this!'})\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * render a list of practitioners\n\t * @returns {preact.VNode[]}\n\t */\n\trenderPractitioners() {\n\t\treturn this.state.practitioners.entry.map(practitioner => (\n\t\t\t<li\n\t\t\t\tonClick={this.setPractitioner(practitioner.id)}\n\t\t\t\tkey={practitioner.telecom[0].value}\n\t\t\t\tclassName={`collection-item hover practitioner ${this.state.selectedPractitioner === practitioner.id ? 'selected' : ''}`}\n\t\t\t>\n\t\t\t\t<span className=\"title\"><b>Name:</b> {practitioner.name[0].given[0]}</span>\n\t\t\t\t<p><b>Username:</b> {practitioner.telecom[0].value}</p>\n\t\t\t</li>\n\t\t))\n\t}\n\n\t/**\n\t * render patient list\n\t * @returns {preact.VNode[]}\n\t */\n\trenderPatients() {\n\t\treturn this.state.patients.map(patient => (\n\t\t\t<li\n\t\t\t\tkey={patient.subject.id}\n\t\t\t\tclassName={`collection-item hover patient ${patient.grouped ? 'selected' : ''}`}\n\t\t\t\tonClick={this.makeGrouping(patient.subject.id, patient.grouped)}\n\t\t\t>\n\t\t\t\t<span className=\"title\"><b>Name:</b> {patient.subject.name[0].text}</span>\n\t\t\t\t<p><b>Ward:</b> {patient.location[0].name}</p>\n\t\t\t</li>\n\t\t))\n\t}\n\n\t/**\n\t * render a permission list based off of component state\n\t * @returns {preact.VNode[]}\n\t */\n\trenderPermissions() {\n\t\tconst perms = this.state.practitionerPermissions\n\t\treturn this.permissions.map(perm => (\n\t\t\t<li\n\t\t\t\tkey={perm.ident}\n\t\t\t\tclassName={`collection-item hover ${perms.includes(perm.ident) ? 'selected' : ''}`}\n\t\t\t\tonClick={this.togglePermission(perm.ident)}\n\t\t\t>\n\t\t\t\t<span className=\"title\"><b>Permission: </b>{perm.ident}</span>\n\t\t\t\t<p><b>Description: </b>{perm.desc}</p>\n\t\t\t</li>\n\t\t))\n\t}\n\n\t/**\n\t * render patient permissions page.\n\t * render loader is no patient information loaded yet\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\tif (!this.state.loaded) return <Loader />\n\t\treturn (\n\t\t\t<div className=\"row permissions-table\">\n\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t<h2>Users</h2>\n\t\t\t\t\t<ul className=\"collection\">{this.renderPractitioners()}</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<h2>Patients</h2>\n\t\t\t\t\t\t<ul className=\"collection\">{this.renderPatients()}</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<h2>Edit permissions</h2>\n\t\t\t\t\t\t<ul className=\"collection\">{this.renderPermissions()}</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Permissions\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/permissions.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "permissionsBase",
    "memberof": "src/client/spa/pages/permissions.jsx",
    "static": true,
    "longname": "src/client/spa/pages/permissions.jsx~permissionsBase",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/permissions.jsx",
    "importStyle": "{permissionsBase}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "Permissions",
    "memberof": "src/client/spa/pages/permissions.jsx",
    "static": true,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/permissions.jsx",
    "importStyle": "Permissions",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 185,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#state",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"practitioners\": *, \"patients\": *, \"selectedPractitioner\": *, \"practitionerPermissions\": *, \"loaded\": *}"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "permissions",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#permissions",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#componentDidMount",
    "access": "public",
    "description": "get practitioner and encounter information from server. update state for lists",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "setPractitioner",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#setPractitioner",
    "access": "public",
    "description": "create a function that:\npull all data (patient relationships and permissions) from server\nstores this data in state",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "practitioner ID (database PK)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "makeGrouping",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#makeGrouping",
    "access": "public",
    "description": "take the selected practitioner (set in state)\nand a function that creates/removes a row with practitioner id and patient ID\nin practitionerpatients table",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "patientID",
        "description": "patient ID to group"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "grouped",
        "description": "whether the practitioner and patient are grouped"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "togglePermission",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#togglePermission",
    "access": "public",
    "description": "attempt to add or remove a practitioner permission\npost this to /permissions/toggle as well as practitioner id, permission and their permission set",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "perm",
        "description": "permission to add/remove"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "renderPractitioners",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#renderPractitioners",
    "access": "public",
    "description": "render a list of practitioners",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "renderPatients",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#renderPatients",
    "access": "public",
    "description": "render patient list",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "renderPermissions",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#renderPermissions",
    "access": "public",
    "description": "render a permission list based off of component state",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/permissions.jsx~Permissions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/permissions.jsx~Permissions#render",
    "access": "public",
    "description": "render patient permissions page.\nrender loader is no patient information loaded yet",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/client/spa/pages/search-patients.jsx",
    "content": "import {h, Component} from 'preact'\nimport {Link} from 'preact-router'\n\nimport {Input} from '../Partial'\nimport {fhirBase} from '../util'\n\nclass SearchPatient extends Component {\n\t/**\n\t * render a search field\n\t * @param {preact.ComponentProps} props component props\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tpatients: [],\n\t\t}\n\t\tthis.search = this.search.bind(this)\n\t}\n\n\t/**\n\t * clear searchbox when page closed/changed\n\t */\n\tcomponentWillUnmount() {\n\t\tif (this.searchBox) this.searchBox.value = ''\n\t}\n\n\t/**\n\t * invoked on every keydown in the search field\n\t * fetch data and update state\n\t */\n\tasync search() {\n\t\tconst content = document.getElementById('search').value\n\t\tconst {data} = await fhirBase.get(`/Patient?_query=${content}`)\n\t\tthis.setState({patients: data})\n\t}\n\n\t/**\n\t * normalise patient information and put in to collection, like view-patient and view-ward\n\t * @returns {preact.VNode}\n\t */\n\trenderPatients() {\n\t\tconst mappedPatients = this.state.patients\n\t\t\t.map((patient) => {\n\t\t\t\tconst {name: [name], photo, id} = patient\n\t\t\t\tconst displayName = `${name.prefix[0]}. ${name.text}`\n\t\t\t\tconst displayImage = photo.length ? photo[0].url : '/patient/anon.png'\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\tname: displayName,\n\t\t\t\t\timage: displayImage,\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(patient => (\n\t\t\t\t<Link href={`/patient/${patient.id}`} className=\"collection-item avatar\">\n\t\t\t\t\t<img src={patient.image} alt=\"\" className=\"circle\" />\n\t\t\t\t\t<span className=\"title\">{patient.name}</span>\n\t\t\t\t</Link>\n\t\t\t))\n\t\treturn mappedPatients.length ? <div className=\"collection\">{mappedPatients}</div> : ''\n\t}\n\n\t/**\n\t * render the search page: one input fields and patient listing (if applicable)\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<header className=\"col s12\">\n\t\t\t\t\t<h1>Search</h1>\n\t\t\t\t</header>\n\t\t\t\t<Input cbRef={searchBox => this.searchBox = searchBox} className=\"s12\" id=\"search\" label=\"Search\" onKeyUp={this.search} />\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t{this.renderPatients()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default SearchPatient\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/search-patients.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "SearchPatient",
    "memberof": "src/client/spa/pages/search-patients.jsx",
    "static": true,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/search-patients.jsx",
    "importStyle": "SearchPatient",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#constructor",
    "access": "public",
    "description": "render a search field",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component props"
      }
    ]
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#state",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"patients\": *}"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#componentWillUnmount",
    "access": "public",
    "description": "clear searchbox when page closed/changed",
    "lineNumber": 23,
    "params": [],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "search",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#search",
    "access": "public",
    "description": "invoked on every keydown in the search field\nfetch data and update state",
    "lineNumber": 31,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "renderPatients",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#renderPatients",
    "access": "public",
    "description": "normalise patient information and put in to collection, like view-patient and view-ward",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/search-patients.jsx~SearchPatient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/search-patients.jsx~SearchPatient#render",
    "access": "public",
    "description": "render the search page: one input fields and patient listing (if applicable)",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/client/spa/pages/view-patient.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\nimport {Loader, Vitals, HistoryReport, VitalCharts} from '../Partial'\nimport {fhirBase, doModal, toTitle} from '../util'\nimport WarningScore from '../WarningScore'\n\nimport '../styles/view-patient.scss'\n/**\n * Normalise api response for ease of manipulation in this component\n * @param {object} fhirResponse API response\n * @returns {object} normalised fhir response\n */\nconst normalisePatientInfo = (fhirResponse) => {\n\tconst {\n\t\tcontact: [contact],\n\t\tphoto: [photo],\n\t\tname: [name],\n\t\tid,\n\t\tgender,\n\t\treference,\n\t} = fhirResponse\n\treturn ({\n\t\tpatient: {\n\t\t\tdisplayName: `${name.prefix} ${name.text}`,\n\t\t\tphoto: photo ? photo.url : '',\n\t\t\tid,\n\t\t\tgender,\n\t\t\tlocation: reference,\n\t\t},\n\t\tcontact: {\n\t\t\tdisplayName: `${contact.name.prefix} ${contact.name.text}`,\n\t\t\tnumber: contact.telecom[0].value,\n\t\t},\n\n\t})\n}\n\n/**\n * makes the fhir response easier to work with\n * @param {object[]} patReport Patient diagnostic report fro fhir api\n * @returns {object[]} formatted object: [{oxygen_saturation: 11, body_temp: 37 ...}]\n */\nconst normalisePatientReports = patReport => patReport\n\t.map(report => ({\n\t\t...report.result.reduce((acc, cur) => {\n\t\t\tacc[cur.code.text] = cur.valueQuantity.value\n\t\t\treturn acc\n\t\t}, {}),\n\t\tdate: new Date(report.meta.lastUpdated)}\n\t))\n\n\n/**\n * Hit /Diagnostics for list of 10 most recent patient reports\n * @param {number} id patient ID\n * @param {number} pageNo which page number to visit\n * @returns {AxiosPromise<any>} request to API\n */\nconst getPatientReport = (id, pageNo = 0) => fhirBase.get(\n\t`Diagnostics?patient=${id}`\n\t+ '&result=true'\n\t+ '&_count=10'\n\t+ `&pageNo=${pageNo}`,\n)\n\nclass Patient extends Component {\n\t/**\n\t * Patient information component\n\t * @param {object} props component props\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tloaded: false,\n\t\t\tpatientInfo: null,\n\t\t\tpageNo: 0,\n\t\t\treport: {},\n\t\t\treportLoaded: false,\n\t\t}\n\t\tthis.submitVitals = this.submitVitals.bind(this)\n\t}\n\n\t/**\n\t * fetch patient data from /Encounter on form load\n\t */\n\tasync componentDidMount() {\n\t\tconst {patient_id: id} = this.props\n\t\tconst [{data}, {data: patientReport}] = await Promise.all([\n\t\t\tfhirBase.get(`Encounter?class=admission&patient_id=${id}&_include=Encounter:patient`),\n\t\t\tgetPatientReport(id, this.state.pageNo),\n\t\t])\n\n\t\tconst patientInfo = normalisePatientInfo({...data[0].subject, ...data[0].location[0]})\n\t\tconst patientReports = normalisePatientReports(patientReport) // comes pre-sorted from API\n\t\tconst ews = new WarningScore(patientReports[0])\n\t\tthis.setState({\n\t\t\tpatientInfo,\n\t\t\tloaded: true,\n\t\t\tpatientReports,\n\t\t\tnews: ews.score(),\n\t\t})\n\t}\n\n\n\t/**\n\t * Submit data to API and repopulate vital chart\n\t * @param {FormData} diagnosticReport fields in <vitals />\n\t */\n\tasync submitVitals(diagnosticReport) {\n\t\tdiagnosticReport.append('patient_id', this.props.patient_id)\n\t\ttry {\n\t\t\tconst {data} = await fhirBase.post('/Diagnostics', diagnosticReport)\n\t\t\tM.toast({html: data.details.text})\n\t\t\tconst {data: patientReport} = await getPatientReport(this.props.patient_id, this.state.pageNo)\n\t\t\tconst patientReports = normalisePatientReports(patientReport)\n\t\t\tconst ews = new WarningScore(patientReports[0])\n\t\t\tthis.setState({\n\t\t\t\tloaded: true,\n\t\t\t\tpatientInfo: this.state.patientInfo,\n\t\t\t\tpatientReports,\n\t\t\t\tnews: ews.score(),\n\t\t\t})\n\t\t} catch (err) {\n\t\t\tconsole.error(err.response)\n\t\t\tdoModal('Error', `There was an error submitting this report:</p><p>${err}</p>`)\n\t\t}\n\t}\n\n\t/**\n\t * ? Keep an eye on `history.back`, see if it malfunctions\n\t */\n\tasync delete() {\n\t\tconst {data} = await fhirBase.delete(`/Patient/${this.props.patient_id}`)\n\t\tconst sev = data.issue[0].severity\n\t\tdoModal(toTitle(sev), data.issue[0].details.text)\n\t\tif (sev === 'success') window.history.back()\n\t}\n\n\t/**\n\t * get history data and then update state\n\t * once state is updated, can be passed to history component as props via re-render\n\t * after this, pop-up the modal\n\t * @param {Event} ev click\n\t */\n\tasync popupHistory(ev) {\n\t\tev.preventDefault()\n\t\tconst {patient_id} = this.props\n\t\tconst {data: report} = await fhirBase.get(`/History/${patient_id}`)\n\t\tthis.setState({\n\t\t\tloaded: this.state.loaded,\n\t\t\tpatientInfo: this.state.patientInfo,\n\t\t\tpatientReports: this.state.patientReports,\n\t\t\tnews: this.state.news,\n\t\t\treport,\n\t\t\treportLoaded: true,\n\t\t}, () => {\n\t\t\tconst repModal = document.querySelector('.modal.history-report-modal')\n\t\t\tconst instance = M.Modal.getInstance(repModal) || M.Modal.init(repModal)\n\t\t\tinstance.open()\n\t\t})\n\t}\n\n\t/**\n\t * invoked on click of A-E\n\t * placeholder until invoked\n\t * @param {Event} ev Click event\n\t */\n\tasync popupAE(ev) {\n\t\tev.preventDefault()\n\t\tconsole.log(this)\n\t}\n\n\t/**\n\t * pop up a modal and update tabs\n\t * @param {Event} ev click event\n\t */\n\tpopupWarningScoreHistory(ev) {\n\t\tev.preventDefault()\n\t\tconst instance = M.Modal.getInstance(this.newsChart) || M.Modal.init(this.newsChart, {\n\t\t\tonOpenEnd() {\n\t\t\t\tconst tabs = document.querySelector('.tabs.chart-tabs')\n\t\t\t\tM.Tabs.init(tabs)\n\t\t\t\tconsole.log('opening tabs')\n\t\t\t},\n\t\t})\n\t\tinstance.open()\n\t}\n\n\t/**\n\t * Render our patient info\n\t * @returns {preact.VNode} patient information or loading icon\n\t */\n\trender() {\n\t\tif (!this.state.loaded) return <Loader />\n\t\tconst {patient, contact} = this.state.patientInfo\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<div className=\"card horizontal patient-view\">\n\t\t\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t\t\t<img alt={patient.displayName} src={patient.photo || '/img/patient-placeholder.webp'} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"card-stacked\">\n\t\t\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t\t\t<i className=\"material-icons right clickable\" onClick={this.delete.bind(this)}>close</i>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"card-title\">{patient.displayName}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t\t\t\t\t\t<h6>Patient Information</h6>\n\t\t\t\t\t\t\t\t\t\t<p><b>NEWS: </b>{this.state.news}</p>\n\t\t\t\t\t\t\t\t\t\t<p><b>Gender: </b>{patient.gender}</p>\n\t\t\t\t\t\t\t\t\t\t<p><b>Ward: </b>{patient.location}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col s6\">\n\n\t\t\t\t\t\t\t\t\t\t<h6>Contact Information</h6>\n\t\t\t\t\t\t\t\t\t\t<p><b>Name: </b>{contact.displayName}</p>\n\t\t\t\t\t\t\t\t\t\t<p><b>Number: </b>{contact.number}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"card-action\">\n\t\t\t\t\t\t\t\t<a className=\"teal-text text-darken-1\" onClick={this.popupHistory.bind(this)}>History</a>\n\t\t\t\t\t\t\t\t<a className=\"teal-text text-darken-1\" onClick={this.popupAE.bind(this)}>A-E Report</a>\n\t\t\t\t\t\t\t\t<a className=\"teal-text text-darken-1\" onClick={this.popupWarningScoreHistory.bind(this)}>Vitals Chart</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t<Vitals submit={this.submitVitals} history={this.state.patientReports} />\n\t\t\t\t</div>\n\t\t\t\t<HistoryReport\n\t\t\t\t\t{...this.state.report}\n\t\t\t\t\tpatientName={patient.displayName}\n\t\t\t\t\treportLoaded={this.state.reportLoaded}\n\t\t\t\t/>\n\t\t\t\t<VitalCharts refCb={ref => this.newsChart = ref} history={this.state.patientReports.reverse()} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Patient\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/view-patient.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "normalisePatientInfo",
    "memberof": "src/client/spa/pages/view-patient.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/view-patient.jsx~normalisePatientInfo",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/view-patient.jsx",
    "importStyle": null,
    "description": "Normalise api response for ease of manipulation in this component",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} normalised fhir response"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "fhirResponse",
        "description": "API response"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "normalised fhir response"
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "normalisePatientReports",
    "memberof": "src/client/spa/pages/view-patient.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/view-patient.jsx~normalisePatientReports",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/view-patient.jsx",
    "importStyle": null,
    "description": "makes the fhir response easier to work with",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} formatted object: [{oxygen_saturation: 11, body_temp: 37 ...}]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "patReport",
        "description": "Patient diagnostic report fro fhir api"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "formatted object: [{oxygen_saturation: 11, body_temp: 37 ...}]"
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "getPatientReport",
    "memberof": "src/client/spa/pages/view-patient.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/pages/view-patient.jsx~getPatientReport",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/pages/view-patient.jsx",
    "importStyle": null,
    "description": "Hit /Diagnostics for list of 10 most recent patient reports",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AxiosPromise<any>} request to API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "patient ID"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageNo",
        "description": "which page number to visit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AxiosPromise<any>"
      ],
      "spread": false,
      "description": "request to API"
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "class",
    "name": "Patient",
    "memberof": "src/client/spa/pages/view-patient.jsx",
    "static": true,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/view-patient.jsx",
    "importStyle": "Patient",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#constructor",
    "access": "public",
    "description": "Patient information component",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component props"
      }
    ]
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#state",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "{\"loaded\": *, \"patientInfo\": *, \"pageNo\": *, \"report\": *, \"reportLoaded\": *}"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#componentDidMount",
    "access": "public",
    "description": "fetch patient data from /Encounter on form load",
    "lineNumber": 86,
    "params": [],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "submitVitals",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#submitVitals",
    "access": "public",
    "description": "Submit data to API and repopulate vital chart",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "FormData"
        ],
        "spread": false,
        "optional": false,
        "name": "diagnosticReport",
        "description": "fields in <vitals />"
      }
    ],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "delete",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#delete",
    "access": "public",
    "description": "? Keep an eye on `history.back`, see if it malfunctions",
    "lineNumber": 132,
    "params": [],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "popupHistory",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#popupHistory",
    "access": "public",
    "description": "get history data and then update state\nonce state is updated, can be passed to history component as props via re-render\nafter this, pop-up the modal",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "popupAE",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#popupAE",
    "access": "public",
    "description": "invoked on click of A-E\nplaceholder until invoked",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "Click event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "popupWarningScoreHistory",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#popupWarningScoreHistory",
    "access": "public",
    "description": "pop up a modal and update tabs",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "click event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/view-patient.jsx~Patient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-patient.jsx~Patient#render",
    "access": "public",
    "description": "Render our patient info",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode} patient information or loading icon"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": "patient information or loading icon"
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "src/client/spa/pages/view-ward.jsx",
    "content": "import {h, Component} from 'preact'\nimport {Link} from 'preact-router'\n\nimport {Loader} from '../Partial'\nimport {fhirBase} from '../util'\n\n\nclass Ward extends Component {\n\t/**\n\t * Render a ward with patient listing\n\t * @param {preact.ComponentProps} props component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\twardData: undefined,\n\t\t\tloaded: false,\n\t\t}\n\t}\n\n\t/**\n\t * fetch ward ID from props (in url)\n\t * get data from /fhir/Encounter (as has location information)\n\t * set state to ward data\n\t */\n\tasync componentDidMount() {\n\t\tconst {ward_id} = this.props.matches\n\t\tconst base = `/Encounter/?class=admission&location_id=${ward_id}&_include=Encounter:patient`\n\t\tconst {data: wardData} = await fhirBase.get(base)\n\t\tthis.setState({loaded: true, wardData})\n\t}\n\n\t/**\n\t * take all patients for a ward (gotten in componentdidMount())\n\t * render them in to a materialize collection after formatting data\n\t * @returns {preact.VNode}\n\t */\n\trenderPatients() {\n\t\tconst mappedPatients = this.state.wardData\n\t\t// first round: format patient data to {name, image, id}\n\t\t\t.map((patient) => {\n\t\t\t\t/**\n\t\t\t\t * pull data from patient\n\t\t\t\t * originally has the form:\n\t\t\t\t * {\n\t\t\t\t *   subject:\n\t\t\t\t *     {\n\t\t\t\t *       name: [{name: text: {harry}}],\n\t\t\t\t *       photo: somePhotoUrl,\n\t\t\t\t *       id: 1\n\t\t\t\t *     }\n\t\t\t\t * }\n\t\t\t\t */\n\t\t\t\tconst {subject: {name: [name], photo, id}} = patient\n\t\t\t\t// create a display name\n\t\t\t\tconst displayName = `${name.prefix[0]}. ${name.text}`\n\t\t\t\tconst displayImage = photo.length ? photo[0].url : '/patient/unknown.png'\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\tname: displayName,\n\t\t\t\t\timage: displayImage,\n\t\t\t\t}\n\t\t\t})\n\t\t\t// put in to preact vnodes (components)\n\t\t\t.map(patient => (\n\t\t\t\t<Link href={`/patient/${patient.id}`} className=\"collection-item avatar\">\n\t\t\t\t\t<img src={patient.image} alt=\"\" className=\"circle\" />\n\t\t\t\t\t<span className=\"title\">{patient.name}</span>\n\t\t\t\t</Link>\n\t\t\t))\n\t\treturn <div className=\"collection\">{mappedPatients}</div>\n\t}\n\n\t/**\n\t * render the patients within a ward\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\tif (!this.state.loaded) return <Loader />\n\t\treturn this.renderPatients()\n\t}\n}\n\nexport default Ward\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/view-ward.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "class",
    "name": "Ward",
    "memberof": "src/client/spa/pages/view-ward.jsx",
    "static": true,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/view-ward.jsx",
    "importStyle": "Ward",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 225,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/view-ward.jsx~Ward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward#constructor",
    "access": "public",
    "description": "Render a ward with patient listing",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component properties"
      }
    ]
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/view-ward.jsx~Ward",
    "static": false,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"wardData\": *, \"loaded\": *}"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/view-ward.jsx~Ward",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward#componentDidMount",
    "access": "public",
    "description": "fetch ward ID from props (in url)\nget data from /fhir/Encounter (as has location information)\nset state to ward data",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "renderPatients",
    "memberof": "src/client/spa/pages/view-ward.jsx~Ward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward#renderPatients",
    "access": "public",
    "description": "take all patients for a ward (gotten in componentdidMount())\nrender them in to a materialize collection after formatting data",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/view-ward.jsx~Ward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/view-ward.jsx~Ward#render",
    "access": "public",
    "description": "render the patients within a ward",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/client/spa/pages/ward-list.jsx",
    "content": "import {h, Component} from 'preact'\nimport {Link} from 'preact-router'\nimport {Loader} from '../Partial'\nimport {fhirBase} from '../util'\n\nclass WardList extends Component {\n\t/**\n\t * Ward listing component\n\t * @param {preact.props} props component properties\n\t */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {wardList: [], loaded: false}\n\t}\n\n\t/**\n\t * on mount, get all wards and update state so createWardList renders something\n\t */\n\tasync componentDidMount() {\n\t\tconst {data: wardList} = await fhirBase.get('/Location?type=Ward')\n\t\tthis.setState({wardList, loaded: true})\n\t}\n\n\t/**\n\t * take this.state.wardList (updated from FHIR API in componentDidMount())\n\t * render a ward list based off of this\n\t * DOM tree should be: a > img+span+p\n\t * @returns {preact.VNode}\n\t */\n\tcreateWardList() {\n\t\tconst mappedWards = this.state.wardList.map(ward => (\n\t\t\t<Link href={`/wards/${ward.id}`} className=\"collection-item avatar\">\n\t\t\t\t<img src=\"img/ward.png\" alt=\"Ward\" className=\"circle\" />\n\t\t\t\t<span className=\"title\">{ward.name}</span>\n\t\t\t\t<p>{ward.description}</p>\n\t\t\t</Link>\n\t\t))\n\t\treturn <div className=\"collection\">{mappedWards}</div>\n\t}\n\n\t/**\n\t * render the ward listing\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\tif (!this.state.loaded) return <Loader />\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<header>\n\t\t\t\t\t<h1>Wards</h1>\n\t\t\t\t</header>\n\t\t\t\t{this.createWardList()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default WardList\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/pages/ward-list.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "WardList",
    "memberof": "src/client/spa/pages/ward-list.jsx",
    "static": true,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/pages/ward-list.jsx",
    "importStyle": "WardList",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/pages/ward-list.jsx~WardList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList#constructor",
    "access": "public",
    "description": "Ward listing component",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component properties"
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/pages/ward-list.jsx~WardList",
    "static": false,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"wardList\": *, \"loaded\": *}"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/pages/ward-list.jsx~WardList",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList#componentDidMount",
    "access": "public",
    "description": "on mount, get all wards and update state so createWardList renders something",
    "lineNumber": 19,
    "params": [],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "createWardList",
    "memberof": "src/client/spa/pages/ward-list.jsx~WardList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList#createWardList",
    "access": "public",
    "description": "take this.state.wardList (updated from FHIR API in componentDidMount())\nrender a ward list based off of this\nDOM tree should be: a > img+span+p",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/pages/ward-list.jsx~WardList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/pages/ward-list.jsx~WardList#render",
    "access": "public",
    "description": "render the ward listing",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/client/spa/partial/admit-patient/signature-box.jsx",
    "content": "import {h, Component} from 'preact'\n\n/**\n * given a container, return a function that checks returns a function to get a property value\n * @param {HTMLElemement} container Containter to get a style and parse int to\n */\nconst getStyle = container => prop => parseInt(getComputedStyle(container, null)\n\t.getPropertyValue(prop)\n\t.replace('px', ''), 10)\n\n/**\n * Given a touch event, get the X and Y, and simulate a mousemove event\n * Simulate button 1: this is the click button\n * @param {Event} e event to simulate as a mouseclick\n */\nfunction emulateTouch(e) {\n\te.preventDefault()\n\tconst touch = e.touches[0]\n\tconst mouseEvent = new MouseEvent('mousemove', {\n\t\tclientX: touch.clientX,\n\t\tclientY: touch.clientY,\n\t\tbuttons: 1,\n\t})\n\tdocument.dispatchEvent(mouseEvent)\n}\n\n/**\n * simulate mouseup on touchstop\n * @returns {Boolean}\n */\nfunction dispatchMouseUp() {\n\treturn document.dispatchEvent(new MouseEvent('mouseup', {}))\n}\n\n\nclass Signature extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.pos = {x: 0, y: 0}\n\t\tthis.draw = this.draw.bind(this)\n\t\tthis.setPosition = this.setPosition.bind(this)\n\t\tthis.setTouchPosition = this.setTouchPosition.bind(this)\n\t}\n\n\t/**\n\t * on mount, add event listeners for mousemove\n\t * add event listeners for touch events that simulate mousemove events\n\t */\n\tcomponentDidMount() {\n\t\t// set up event listeners\n\t\tdocument.addEventListener('mousemove', this.draw)\n\t\tdocument.addEventListener('mousedown', this.setPosition)\n\t\tdocument.addEventListener('mouseEnter', this.setPosition)\n\n\t\t/**\n\t\t * spoof mouse events using touch events to\n\t\t * so that a phone user can make a signature\n\t\t */\n\t\tthis.canvas.addEventListener('touchstart', this.setTouchPosition)\n\t\tthis.canvas.addEventListener('touchend', dispatchMouseUp)\n\t\tthis.canvas.addEventListener('touchmove', emulateTouch)\n\t}\n\n\t/**\n\t * on unmount, remove all event listeners\n\t */\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener('mousemove', this.draw)\n\t\tdocument.removeEventListener('mousedown', this.setPosition)\n\t\tdocument.removeEventListener('mouseEnter', this.setPosition)\n\n\t\t/**\n\t\t * spoof mouse events using touch events to\n\t\t * so that a phone user can make a signature\n\t\t */\n\t\tthis.canvas.removeEventListener('touchstart', this.setTouchPosition)\n\t\tthis.canvas.removeEventListener('touchend', dispatchMouseUp)\n\t\tthis.canvas.removeEventListener('touchmove', emulateTouch)\n\t}\n\n\tsetTouchPosition(ev) {\n\t\treturn this.setPosition(ev.touches[0])\n\t}\n\n\t/**\n\t * Given an event, take the mouse coords and update the mouse position in this component\n\t * @param {Event} ev\n\t */\n\tsetPosition(ev) {\n\t\t// no need to set state as component doesn't need to render again\n\t\tthis.pos = {\n\t\t\tx: ev.clientX - this.canvas.getBoundingClientRect().left,\n\t\t\ty: ev.clientY - this.canvas.getBoundingClientRect().top,\n\t\t}\n\t}\n\n\t/**\n\t * resize the canvas to fill available space on every draw()\n\t */\n\tsetCanvasDimensions() {\n\t\tif (!this.setWidth) {\n\t\t\tconst getProp = getStyle(this.content)\n\t\t\tconst padLeft = getProp('padding-left')\n\t\t\tconst padRight = getProp('padding-right')\n\t\t\tconst horzPad = padLeft + padRight\n\n\t\t\tconst {width} = this.content.getBoundingClientRect()\n\t\t\tconst {height} = this.canvas.getBoundingClientRect()\n\t\t\tthis.canvas.height = height\n\t\t\tthis.canvas.width = (width - horzPad)\n\t\t\tthis.setWidth = true\n\t\t}\n\t}\n\n\t/**\n\t * on a mousemove event, move a virtual pointer on a canvas\n\t * update this position with the event\n\t * move the virtual pointer to the new place\n\t * stroke a line between the beginning and end\n\t * @param {Event} ev mousemove event\n\t */\n\tdraw(ev) {\n\t\tconst {ctx} = this\n\t\t// mouse left button must be pressed\n\n\t\tif (ev.buttons !== 1) return\n\t\tthis.setCanvasDimensions()\n\n\t\tctx.beginPath() // begin\n\n\t\tctx.lineWidth = 5\n\t\tctx.lineCap = 'round'\n\t\tctx.strokeStyle = '#000'\n\n\t\tctx.moveTo(this.pos.x, this.pos.y) // from\n\t\tthis.setPosition(ev)\n\t\tctx.lineTo(this.pos.x, this.pos.y) // to\n\n\t\tctx.stroke() // draw it!\n\t}\n\n\t/**\n\t * clear the signature on the canvas\n\t * @param {Event} ev Click event\n\t */\n\treset(ev) {\n\t\tev.preventDefault()\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\t/**\n\t * @returns {preact.VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"card z-depth-0\">\n\t\t\t\t<div className=\"card-content\" ref={c => this.content = c}>\n\t\t\t\t\t<span className=\"card-title\">Sign below</span>\n\t\t\t\t\t<canvas\n\t\t\t\t\t\tref={(c) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tthis.canvas = c\n\t\t\t\t\t\t\t\tthis.ctx = c.getContext('2d')\n\t\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"sign-off-canvas\"\n\t\t\t\t\t\tstyle={{width: '100%', border: '1px solid grey'}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-action\">\n\t\t\t\t\t<a href=\"\" className=\"teal-text text-lighten-1\" onClick={this.reset.bind(this)}>Reset</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Signature\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/admit-patient/signature-box.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "getStyle",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~getStyle",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/admit-patient/signature-box.jsx",
    "importStyle": null,
    "description": "given a container, return a function that checks returns a function to get a property value",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElemement"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "Containter to get a style and parse int to"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "emulateTouch",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~emulateTouch",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/admit-patient/signature-box.jsx",
    "importStyle": null,
    "description": "Given a touch event, get the X and Y, and simulate a mousemove event\nSimulate button 1: this is the click button",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "event to simulate as a mouseclick"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "dispatchMouseUp",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~dispatchMouseUp",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/admit-patient/signature-box.jsx",
    "importStyle": null,
    "description": "simulate mouseup on touchstop",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "Signature",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx",
    "static": true,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/admit-patient/signature-box.jsx",
    "importStyle": "Signature",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "pos",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#pos",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#componentDidMount",
    "access": "public",
    "description": "on mount, add event listeners for mousemove\nadd event listeners for touch events that simulate mousemove events",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#componentWillUnmount",
    "access": "public",
    "description": "on unmount, remove all event listeners",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "setTouchPosition",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#setTouchPosition",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "ev",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#setPosition",
    "access": "public",
    "description": "Given an event, take the mouse coords and update the mouse position in this component",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "setCanvasDimensions",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#setCanvasDimensions",
    "access": "public",
    "description": "resize the canvas to fill available space on every draw()",
    "lineNumber": 100,
    "params": [],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "setWidth",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#setWidth",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "draw",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#draw",
    "access": "public",
    "description": "on a mousemove event, move a virtual pointer on a canvas\nupdate this position with the event\nmove the virtual pointer to the new place\nstroke a line between the beginning and end",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "mousemove event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "reset",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#reset",
    "access": "public",
    "description": "clear the signature on the canvas",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "Click event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#render",
    "access": "public",
    "description": "",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "ctx",
    "memberof": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature",
    "static": false,
    "longname": "src/client/spa/partial/admit-patient/signature-box.jsx~Signature#ctx",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "src/client/spa/partial/layout/breadcrumb.jsx",
    "content": "import {h} from 'preact'\nimport {Link} from 'preact-router'\n\nimport '../../styles/breadcrumb.scss'\n\n/**\n * Given an of places and an index, create a URL to that place\n * @param {number} index where we are set in the location array\n * @param {string[]} places array of places from url (/create/patient -> ['create', 'patient'])\n */\nfunction getCurrentUrl(index, places) {\n\tlet url = '/'\n\tfor (let i = 0; i < (index + 1); i += 1) {\n\t\turl += `${places[i]}/`\n\t}\n\treturn url\n}\n\n/**\n * Generate some breadcrumbs based on a location\n * Best used when updating with router\n * @param {object} props VNode props\n * @param {string} props.location Location to render for crumbs\n * @returns {VNode}\n */\nconst Breadcrumbs = (props) => {\n\tconst places = props.location.split('/').filter(Boolean).filter(path => !!path.indexOf('?'))\n\tconst crumbs = [\n\t\t<Link href=\"/\" className=\"breadcrumb\">Home</Link>,\n\t\t...places.map((loc, idx) => (\n\t\t\t<Link href={getCurrentUrl(idx, places)} className=\"breadcrumb\">{loc}</Link>\n\t\t)),\n\t]\n\n\tif (!places.length) {\n\t\treturn ''\n\t}\n\n\treturn (\n\t\t<div className=\"navbar-fixed\">\n\t\t\t<nav className=\"white z-depth-0\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col s12\">{crumbs}</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</div>\n\t)\n}\n\nexport default Breadcrumbs\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/layout/breadcrumb.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "getCurrentUrl",
    "memberof": "src/client/spa/partial/layout/breadcrumb.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/layout/breadcrumb.jsx~getCurrentUrl",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/layout/breadcrumb.jsx",
    "importStyle": null,
    "description": "Given an of places and an index, create a URL to that place",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "where we are set in the location array"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "places",
        "description": "array of places from url (/create/patient -> ['create', 'patient'])"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "Breadcrumbs",
    "memberof": "src/client/spa/partial/layout/breadcrumb.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/layout/breadcrumb.jsx~Breadcrumbs",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/layout/breadcrumb.jsx",
    "importStyle": "Breadcrumbs",
    "description": "Generate some breadcrumbs based on a location\nBest used when updating with router",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "VNode props"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.location",
        "description": "Location to render for crumbs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/client/spa/partial/layout/fab.jsx",
    "content": "import {h, Component} from 'preact'\nimport {Link} from 'preact-router'\nimport M from 'materialize-css'\n\n\nclass Fab extends Component {\n\t/**\n\t * initialise floating action buttons\n\t */\n\tcomponentDidMount() {\n\t\tconst tipped = document.querySelectorAll('.tooltipped')\n\t\tconst fab = document.querySelectorAll('.fixed-action-btn')\n\t\tM.FloatingActionButton.init(fab)\n\t\tM.Tooltip.init(tipped)\n\t}\n\n\t/**\n\t * render a FAB\n\t * @returns {VNode}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"fixed-action-btn\">\n\t\t\t\t<a className=\"btn-floating btn-large\">\n\t\t\t\t\t<i className=\"large material-icons\">menu</i>\n\t\t\t\t</a>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link href=\"/wards\" className=\"btn-floating blue tooltipped\" data-position=\"left\" data-tooltip=\"View wards\">\n\t\t\t\t\t\t\t<i className=\"material-icons\">local_hospital</i>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link href=\"/add/patient\" className=\"btn-floating green tooltipped\" data-position=\"left\" data-tooltip=\"Admit a patient\">\n\t\t\t\t\t\t\t<i className=\"material-icons\">assignment_ind</i>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link href=\"/search/patient\" className=\"btn-floating yellow darken-3 tooltipped\" data-position=\"left\" data-tooltip=\"Search for a patient\">\n\t\t\t\t\t\t\t<i className=\"material-icons\">insert_chart</i>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link href=\"/\" className=\"btn-floating red tooltipped\" data-position=\"left\" data-tooltip=\"Go home\">\n\t\t\t\t\t\t\t<i className=\"material-icons\">home</i>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default Fab\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/layout/fab.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "Fab",
    "memberof": "src/client/spa/partial/layout/fab.jsx",
    "static": true,
    "longname": "src/client/spa/partial/layout/fab.jsx~Fab",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/layout/fab.jsx",
    "importStyle": "Fab",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/partial/layout/fab.jsx~Fab",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/fab.jsx~Fab#componentDidMount",
    "access": "public",
    "description": "initialise floating action buttons",
    "lineNumber": 10,
    "params": [],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/layout/fab.jsx~Fab",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/fab.jsx~Fab#render",
    "access": "public",
    "description": "render a FAB",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/client/spa/partial/layout/login.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\nimport axios from 'axios'\n\nclass Login extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {loginUrl: '/'}\n\t}\n\n\tasync componentDidMount() {\n\t\tconst loginUrl = await fetch('/login/url').then(r => r.text())\n\t\tthis.setState({loginUrl}, () => {\n\t\t\t// this.modalInst = M.Modal.init(this.modal)\n\t\t\tthis.tabInst = M.Tabs.init(this.tabs)\n\t\t\tthis.tabInst.select('test1') // because class=active doesn't work 🤷‍♂️\n\t\t})\n\t}\n\n\tasync handleLogin() {\n\t\t// get the user/pass\n\t\tconst payload = {\n\t\t\tusername: this.loginUN.value,\n\t\t\tpassword: this.loginPW.value,\n\t\t}\n\n\t\ttry {\n\t\t\t// send it to the API\n\t\t\tconst resp = await axios.post('/login', payload)\n\t\t\tM.toast({html: resp.data.message})\n\t\t\t// response should be JWT - save this to storage\n\t\t\tlocalStorage.setItem('token', resp.data.token)\n\t\t\t// close the login window\n\t\t\tconst modal = document.querySelector('.modal.login-modal')\n\t\t\tconst inst = M.Modal.getInstance(modal) || M.Modal.init(modal)\n\t\t\tinst.close()\n\t\t\twindow.location.href = window.location.href\n\t\t} catch (err) {\n\t\t\tM.toast({html: err.response.data})\n\t\t}\n\t}\n\n\tasync handleRegister() {\n\t\t// get the goods\n\t\tconst payload = {\n\t\t\tname: this.regFN.value,\n\t\t\tusername: this.regUN.value,\n\t\t\tpassword: this.regPW.value,\n\t\t}\n\n\t\ttry {\n\t\t\t// send it to the API\n\t\t\tconst resp = await axios.post('/login/create', payload)\n\t\t\tM.toast({html: resp.data})\n\t\t\t// focus on login page\n\t\t\tthis.tabInst.select('test1')\n\t\t} catch (err) {\n\t\t\tM.toast({html: err.response.data})\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"col s12\">\n\t\t\t\t<div id=\"modal1\" className=\"modal login-modal\" ref={m => this.modal = m}>\n\t\t\t\t\t<div className=\"modal-content\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t\t\t\t<ul className=\"tabs tabs-fixed-width\" ref={t => this.tabs = t}>\n\t\t\t\t\t\t\t\t\t<li className=\"tab col s3\"><a className=\"active\" href=\"#test1\">Log In</a></li>\n\t\t\t\t\t\t\t\t\t<li className=\"tab col s3\"><a href=\"#test2\">Register</a></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id=\"test1\" className=\"col s12\">\n\t\t\t\t\t\t\t\t<h6 className=\"center\">Login with MyPort access patient information</h6>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col s12 center\">\n\t\t\t\t\t\t\t\t\t\t<a href={this.state.loginUrl} className=\"waves-effect waves-light btn\">Login via Google</a>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"divider\" />\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<form className=\"col s12\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col m6 push-m3 s12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={un => this.loginUN = un} id=\"login-username\" type=\"text\" className=\"validate\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"login-username\">Username</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col m6 push-m3 s12\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={pw => this.loginPW = pw} id=\"login-password\" type=\"password\" className=\"validate\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"login-password\">Password</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<a className=\"waves-effect waves-light btn\" onClick={this.handleLogin.bind(this)}>Login</a>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id=\"test2\" className=\"col s12\">\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<form className=\"col s12\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={fn => this.regFN = fn} id=\"register-name\" type=\"text\" className=\"validate\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"register-name\">Full Name</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={un => this.regUN = un} id=\"register-username\" type=\"text\" className=\"validate\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"register-username\">Username</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={pw => this.regPW = pw} id=\"register-password\" type=\"password\" className=\"validate\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"register-password\">Password</label>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t\t\t\t\t\t\t<a className=\"waves-effect waves-light btn\" onClick={this.handleRegister.bind(this)}>Register</a>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"modal-footer\">\n\t\t\t\t\t\t<a className=\"modal-close waves-effect waves-green btn-flat\">Close</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Login\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/layout/login.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "Login",
    "memberof": "src/client/spa/partial/layout/login.jsx",
    "static": true,
    "longname": "src/client/spa/partial/layout/login.jsx~Login",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/layout/login.jsx",
    "importStyle": "Login",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#state",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"loginUrl\": string}"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "tabInst",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#tabInst",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "handleLogin",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#handleLogin",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "handleRegister",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#handleRegister",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/layout/login.jsx~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/login.jsx~Login#render",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/client/spa/partial/layout/redirect.jsx",
    "content": "import {Component} from 'preact'\nimport {route} from 'preact-router'\n\n/**\n * Redirect the user elsewhere\n */\nclass Redirect extends Component {\n\t/**\n\t * on mount, route elsewhere\n\t */\n\tcomponentWillMount() {\n\t\troute(this.props.to, true)\n\t}\n\n\t/**\n\t * @returns {null}\n\t */\n\trender() {\n\t\treturn null\n\t}\n}\n\nexport default Redirect\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/layout/redirect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "class",
    "name": "Redirect",
    "memberof": "src/client/spa/partial/layout/redirect.jsx",
    "static": true,
    "longname": "src/client/spa/partial/layout/redirect.jsx~Redirect",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/layout/redirect.jsx",
    "importStyle": "Redirect",
    "description": "Redirect the user elsewhere",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/client/spa/partial/layout/redirect.jsx~Redirect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/redirect.jsx~Redirect#componentWillMount",
    "access": "public",
    "description": "on mount, route elsewhere",
    "lineNumber": 11,
    "params": [],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/layout/redirect.jsx~Redirect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/layout/redirect.jsx~Redirect#render",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{null}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "src/client/spa/partial/shared/input-text.jsx",
    "content": "import {h} from 'preact'\nimport {noop} from '../../util'\n\n/**\n * Materialize input element\n * @param {object} props element properties\n * @param {string} props.id id of element\n * @param {string} props.label label for input\n * @param {function} props.onKeyUp onKeyUp event listener\n * @param {string} props.className css class for the wrapper\n * @returns {VNode} input element\n */\nconst Input = props => (\n\t<div className={`input-field col ${props.className || 's6'}`}>\n\t\t<input\n\t\t\tonKeyUp={props.onKeyUp || noop}\n\t\t\tid={props.id}\n\t\t\ttype={props.type || 'text'}\n\t\t\tref={(i) => {\n\t\t\t\tif (props.cbRef) props.cbRef(i)\n\t\t\t}}\n\t\t\tclassName=\"validate\"\n\t\t/>\n\t\t<label htmlFor={props.id}>{props.label}</label>\n\t</div>\n)\n\nexport default Input\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/shared/input-text.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "Input",
    "memberof": "src/client/spa/partial/shared/input-text.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/shared/input-text.jsx~Input",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/shared/input-text.jsx",
    "importStyle": "Input",
    "description": "Materialize input element",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode} input element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "element properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.id",
        "description": "id of element"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.label",
        "description": "label for input"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onKeyUp",
        "description": "onKeyUp event listener"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.className",
        "description": "css class for the wrapper"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": "input element"
    }
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/client/spa/partial/shared/loader.jsx",
    "content": "import {h} from 'preact'\nimport '../../styles/loader.scss'\n\n/**\n * Materialize loading element, centered\n * @returns {VNode} Loading element\n */\nconst Loader = () => (\n\t<div className=\"loader\">\n\t\t<div className=\"preloader-wrapper big active\">\n\t\t\t<div className=\"spinner-layer spinner-blue\">\n\t\t\t\t<div className=\"circle-clipper left\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gap-patch\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"circle-clipper right\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"spinner-layer spinner-red\">\n\t\t\t\t<div className=\"circle-clipper left\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gap-patch\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"circle-clipper right\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"spinner-layer spinner-yellow\">\n\t\t\t\t<div className=\"circle-clipper left\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gap-patch\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"circle-clipper right\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"spinner-layer spinner-green\">\n\t\t\t\t<div className=\"circle-clipper left\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"gap-patch\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"circle-clipper right\">\n\t\t\t\t\t<div className=\"circle\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n)\n\nexport default Loader\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/shared/loader.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "Loader",
    "memberof": "src/client/spa/partial/shared/loader.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/shared/loader.jsx~Loader",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/shared/loader.jsx",
    "importStyle": "Loader",
    "description": "Materialize loading element, centered",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode} Loading element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": "Loading element"
    },
    "params": []
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "src/client/spa/partial/shared/modal.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * @returns {preact.VNode}\n */\nconst Modal = () => (\n\t<div className=\"col s12\">\n\t\t<div id=\"modal1\" className=\"modal information\">\n\t\t\t<div className=\"modal-content\" />\n\t\t\t<div className=\"modal-footer\">\n\t\t\t\t<a className=\"modal-close waves-effect waves-green btn-flat\">Okay</a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n)\n\nexport default Modal\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/shared/modal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "Modal",
    "memberof": "src/client/spa/partial/shared/modal.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/shared/modal.jsx~Modal",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/shared/modal.jsx",
    "importStyle": "Modal",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/client/spa/partial/shared/select.jsx",
    "content": "import {h} from 'preact'\n\n/**\n * Materialize select element\n * @param {object} props Element properties\n * @param {Array<object>} props.options Array of objects in form {val, text}\n * @param {string} props.default default option\n * @param {string} props.label input label\n * @returns {VNode} Preact element\n */\nconst Select = props => (\n\t<div className={`input-field col s12 m6 ${props.className}`}>\n\t\t<select id={props.id || ''}>\n\t\t\t<option value=\"\" disabled selected>{props.default}</option>\n\t\t\t{props.options.map(opt => <option value={opt.val}>{opt.text}</option>)}\n\t\t</select>\n\t\t<label>{props.label}</label>\n\t</div>\n)\n\nexport default Select\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/shared/select.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "Select",
    "memberof": "src/client/spa/partial/shared/select.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/shared/select.jsx~Select",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/shared/select.jsx",
    "importStyle": "Select",
    "description": "Materialize select element",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode} Preact element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Element properties"
      },
      {
        "nullable": null,
        "types": [
          "Array<object>"
        ],
        "spread": false,
        "optional": false,
        "name": "props.options",
        "description": "Array of objects in form {val, text}"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.default",
        "description": "default option"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.label",
        "description": "input label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": "Preact element"
    }
  },
  {
    "__docId__": 287,
    "kind": "file",
    "name": "src/client/spa/partial/view-patient/history-report.jsx",
    "content": "import {h} from 'preact'\nimport format from 'date-fns/format'\n\nimport '../../styles/history-report.scss'\n\n/**\n * format date as MM DD, YYYY\n * 12 08, 1995\n * @param {string} date date to format\n */\nconst formatDate = date => format(new Date(date), ' MMM DD, YYYY')\n\n/**\n * format a drug table\n * @param {preact.ComponentProps} props component props\n * @param {any[]} props.drugs drug list\n */\nconst DrugTable = props => (\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Dose</th>\n\t\t\t\t<th>Frequency</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{props.drugs.map(drug => (\n\t\t\t\t<tr>\n\t\t\t\t\t<td>{drug.medication_name}</td>\n\t\t\t\t\t<td>{drug.medication_dose}</td>\n\t\t\t\t\t<td>{drug.medication_frequency}</td>\n\t\t\t\t</tr>\n\t\t\t))}\n\t\t</tbody>\n\t</table>\n)\n\n/**\n *\n * @param {preact.ComponentProps} props\n * @returns {preact.VNode}\n */\nconst HistoryReport = (props) => {\n\tif (!props.reportLoaded) {\n\t\treturn (\n\t\t\t<div id=\"modal1\" className=\"modal history-report-modal\">\n\t\t\t\t<div className=\"modal-content\" />\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconsole.log(props)\n\tconst prescriptionDrugs = props.drugs.prescriptions[0].filter(drug => drug.medication_name)\n\tconst otcDrugs = props.drugs.otc[0].filter(drug => drug.medication_name)\n\tconst recreationalDrugs = (props.drugs.recreational[0] || []).filter(drug => drug.medication_name)\n\t// console.log({otcDrugs, recreationalDrugs, prescriptionDrugs})\n\tconsole.log(otcDrugs)\n\treturn (\n\t\t<div id=\"modal1\" className=\"modal history-report-modal\">\n\t\t\t<div className=\"modal-content\">\n\t\t\t\t<h3>History: {props.patientName}</h3>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<section>\n\t\t\t\t\t<h4>Personal Health History</h4>\n\t\t\t\t\t<p><b>Childhood illnesses:</b></p>\n\t\t\t\t\t<ul className=\"browser-default\">\n\t\t\t\t\t\t{(props.childhood_illnesses || []).map(illness => (<li>{illness}</li>))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<p><b>Immunisations:</b></p>\n\t\t\t\t\t<ul className=\"browser-default\">\n\t\t\t\t\t\t{(props.immunisations || []).map(immun => (<li>{immun}</li>))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<p><b>Medical Problems:</b></p>\n\t\t\t\t\t<ul className=\"browser-default\">\n\t\t\t\t\t\t{(props.medical_issues || []).map(immun => (<li>{immun}</li>))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<p><b>Surgical Operations:</b></p>\n\t\t\t\t\t<ul className=\"browser-default\">\n\t\t\t\t\t\t{(props.surgical_operations || []).map(immun => (<li>{immun}</li>))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<p><b>Other Hospitalisations:</b></p>\n\t\t\t\t\t<ul className=\"browser-default\">\n\t\t\t\t\t\t{(props.other_hospitalisations || []).map(immun => (\n\t\t\t\t\t\t\t<li>{immun}</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</section>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<section>\n\t\t\t\t\t<h4>Medication</h4>\n\t\t\t\t\t<p><b>Prescribed Medication: </b></p>\n\t\t\t\t\t{prescriptionDrugs.length ? <DrugTable drugs={prescriptionDrugs} /> : ''}\n\t\t\t\t\t<p><b>OTC Medication: </b></p>\n\t\t\t\t\t{otcDrugs.length ? <DrugTable drugs={otcDrugs} /> : ''}\n\t\t\t\t\t<p><b>Allergies: </b>{props.medication_allergies}</p>\n\t\t\t\t\t<div className=\"divider\" />\n\t\t\t\t\t<h4>Health Habits and Personal Safety</h4>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h5>Exercise</h5>\n\t\t\t\t\t<p><b>Frequency: </b>{props.exercise_frequency}</p>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h5>Diet</h5>\n\t\t\t\t\t<p><b>Dieting: </b>{props.dieting ? 'yes' : 'no'}</p>\n\t\t\t\t\t<p><b>Meals eaten daily: </b>{props.meals_daily}</p>\n\t\t\t\t\t<p><b>Difficulty Eating: </b>{props.difficulties_eating ? 'yes' : 'no'}</p>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h5>Alcohol</h5>\n\t\t\t\t\t<p><b>Drinks alcohol: </b>{props.drink_alcohol ? 'yes' : 'no'}</p>\n\t\t\t\t\t{props.drink_alcohol\n\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p><b>Kind of alcohol: </b>{props.health_habits_alcohol_type === '' ? 'Not Specified' : props.health_habits_alcohol_type}</p>\n\t\t\t\t\t\t\t\t<p><b>Drinks per week: </b>{props.health_habits_alcohol_num}</p>\n\t\t\t\t\t\t\t\t<p><b>Concerned about alcohol intake: </b>{props.health_habits_drink_alcohol_concern}</p>\n\t\t\t\t\t\t\t\t<p><b>Considered stopping: </b>{props.health_habits_drink_alcohol_consider_stopping}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t: ''}\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h5>Tobacco</h5>\n\t\t\t\t\t<p><b>Used tobacco in past 5 years: </b>{props.tobacco_last_smoked ? 'yes' : 'no'}</p>\n\t\t\t\t\t{props.tobacco_last_smoked\n\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p><b>Currently using Tobacco:</b>{props.currently_uses_tobacco}</p>\n\t\t\t\t\t\t\t\t<pre>Types of Tobacco used: {props.tobacco_type}</pre>\n\t\t\t\t\t\t\t\t<p><b>Nicotine replacement therapy in use: </b>{props.currently_uses_tobacco_repalcement}</p>\n\t\t\t\t\t\t\t\t<p><b>Nicotine replacement therapy types: </b>{props.tobacco_replacement_type === '' ? 'Not specified' : props.tobacco_replacement_type}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t: ''}\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<h5>Drugs</h5>\n\t\t\t\t\t<p><b>Currently using recreational drugs/substances: </b>{props.uses_recreational_drugs ? 'yes' : 'no'}</p>\n\t\t\t\t\t{props.uses_recreational_drugs ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{recreationalDrugs.length ? <DrugTable drugs={recreationalDrugs} /> : ''}\n\t\t\t\t\t\t\t<p><b>Ever injecthealth_habits_patient_ever_injected_drugsed recreational drugs with a needle: </b>{props.used_recreational_with_needle ? 'yes' : 'no'}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : ''}\n\t\t\t\t</section>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<section>\n\t\t\t\t\t<h4>Other Questions</h4>\n\t\t\t\t\t<h5>Mental Health and Wellbeing</h5>\n\t\t\t\t\t<pre>{props.mental_health_history}</pre>\n\t\t\t\t\t<h5>Social History</h5>\n\t\t\t\t\t<pre>{props.social_history}</pre>\n\t\t\t\t\t<h5>Family History</h5>\n\t\t\t\t\t<pre>{props.family_history}</pre>\n\t\t\t\t\t<h5>Other Relevant History</h5>\n\t\t\t\t\t<pre>{props.relevant_history}</pre>\n\t\t\t\t</section>\n\t\t\t\t<div className=\"divider\" />\n\t\t\t\t<section>\n\t\t\t\t\t<h4>Sign-off</h4>\n\t\t\t\t\t<p><b>Compiled at: </b>{formatDate(props.date)}</p>\n\t\t\t\t\t<p><b>Compiled by: </b>{props.practitioner.name}</p>\n\t\t\t\t\t<p><b>Designation: </b>{props.practitioner_designation}</p>\n\t\t\t\t\t<p><b>Signature:</b></p>\n\t\t\t\t\t<img src={props.signature_blob} alt=\"Signature\" />\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default HistoryReport\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/view-patient/history-report.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "function",
    "name": "formatDate",
    "memberof": "src/client/spa/partial/view-patient/history-report.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/view-patient/history-report.jsx~formatDate",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/view-patient/history-report.jsx",
    "importStyle": null,
    "description": "format date as MM DD, YYYY\n12 08, 1995",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date to format"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "DrugTable",
    "memberof": "src/client/spa/partial/view-patient/history-report.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/view-patient/history-report.jsx~DrugTable",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/view-patient/history-report.jsx",
    "importStyle": null,
    "description": "format a drug table",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component props"
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.drugs",
        "description": "drug list"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "HistoryReport",
    "memberof": "src/client/spa/partial/view-patient/history-report.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/view-patient/history-report.jsx~HistoryReport",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/view-patient/history-report.jsx",
    "importStyle": "HistoryReport",
    "description": "",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "src/client/spa/partial/view-patient/vital-signs.jsx",
    "content": "import {h, Component} from 'preact'\nimport M from 'materialize-css'\nimport format from 'date-fns/format'\n\nimport WarningScore from '../../WarningScore'\nimport {doModal} from '../../util'\n\nimport '../../styles/vital-signs.scss'\n\n// swap an EWS for a class to colour table cells (in createTable())\nconst ewsToClass = [\n\t'',\n\t' yellow',\n\t' orange',\n\t' red',\n]\n\nfunction createTable(history) {\n\tconst historyWithEWS = history.map((observation) => {\n\t\tconst ews = new WarningScore(observation)\n\t\t// format observation history (from FHIR API) in to something that can be used within the DOM\n\t\t// score for a hover <abbr>\n\t\t// className to visualise the EWS\n\t\t// value to display\n\t\treturn {\n\t\t\tdate: format(observation.date, 'hh:mma, Do MMM YYYY'),\n\t\t\trespiratoryRate: {\n\t\t\t\tscore: ews.scoreResp(),\n\t\t\t\tclassname: ewsToClass[ews.scoreResp()],\n\t\t\t\tvalue: observation.respiratory_rate,\n\t\t\t},\n\t\t\toxySat: {\n\t\t\t\tscore: ews.scoreOxy(),\n\t\t\t\tclassname: ewsToClass[ews.scoreOxy()],\n\t\t\t\tvalue: observation.oxygen_saturation,\n\t\t\t},\n\t\t\theartRate: {\n\t\t\t\tscore: ews.scoreHeart(),\n\t\t\t\tclassname: ewsToClass[ews.scoreHeart()],\n\t\t\t\tvalue: observation.heart_rate,\n\t\t\t},\n\t\t\tbodyTemp: {\n\t\t\t\tscore: ews.scoreTemp(),\n\t\t\t\tclassname: ewsToClass[ews.scoreTemp()],\n\t\t\t\tvalue: observation.body_temperature,\n\t\t\t},\n\t\t\tbloodPressure: {\n\t\t\t\tscore: ews.scoreBP(),\n\t\t\t\tclassname: ewsToClass[ews.scoreBP()],\n\t\t\t\tvalue: observation.systolic_bp,\n\t\t\t},\n\t\t\tlevelOfConsciousness: {\n\t\t\t\tscore: ews.scoreCons(),\n\t\t\t\tclassname: ewsToClass[ews.scoreCons()],\n\t\t\t\tvalue: observation.level_of_consciousness,\n\t\t\t},\n\t\t\tsupplOxygen: {\n\t\t\t\tscore: ews.scoreSuppOxy(),\n\t\t\t\tclassname: ewsToClass[ews.scoreSuppOxy()],\n\t\t\t\tvalue: observation.supplemental_oxygen,\n\t\t\t},\n\t\t}\n\t})\n\tconst tableDOM = historyWithEWS.map(row => (\n\t\t<tr>\n\t\t\t<td>{row.date}</td>\n\t\t\t<td className={row.respiratoryRate.classname}>\n\t\t\t\t<abbr title={row.respiratoryRate.score}>{row.respiratoryRate.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.oxySat.classname}>\n\t\t\t\t<abbr title={row.oxySat.score}>{row.oxySat.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.heartRate.classname}>\n\t\t\t\t<abbr title={row.heartRate.score}>{row.heartRate.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.bodyTemp.classname}>\n\t\t\t\t<abbr title={row.bodyTemp.score}>{row.bodyTemp.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.bloodPressure.classname}>\n\t\t\t\t<abbr title={row.bloodPressure.score}>{row.bloodPressure.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.levelOfConsciousness.classname}>\n\t\t\t\t<abbr title={row.levelOfConsciousness.score}>{row.levelOfConsciousness.value}</abbr>\n\t\t\t</td>\n\t\t\t<td className={row.supplOxygen.classname}>\n\t\t\t\t<abbr title={row.supplOxygen.score}>{row.supplOxygen.value}</abbr>\n\t\t\t</td>\n\t\t</tr>\n\t))\n\treturn tableDOM\n}\n\nclass Vitals extends Component {\n\t/**\n\t * Initialise materialize components on page load\n\t */\n\tcomponentDidMount() {\n\t\tconsole.log('[VITAL SIGNS] mounting')\n\t\tconst tabs = document.querySelectorAll('.tabs.tabs-fixed-width.vital-record-view-tabs')\n\t\tconst select = document.querySelectorAll('select')\n\t\tif (!this.formInstance) this.formInstance = M.FormSelect.init(select)\n\t\tif (!this.tabInstance) this.tabInstance = M.Tabs.init(tabs)\n\t}\n\n\t/**\n\t * the main router sets state, which propogates an update here\n\t * this causes a re-render which kills select instances\n\t * re-build the select\n\t */\n\tcomponentDidUpdate() {\n\t\tconsole.log('[VITAL SIGNS] updating')\n\t\tconst select = document.querySelectorAll('select')\n\t\tif (!this.formInstance) this.formInstance = M.FormSelect.init(select)\n\t\telse M.FormSelect.init(select)\n\t}\n\n\t/**\n\t * on unmount, kill all materialize instances so as to not break the app\n\t */\n\tcomponentWillUnmount() {\n\t\tconsole.log('[VITAL SIGNS] unmounting')\n\t\ttry {\n\t\t\tif (this.formInstance) this.formInstance.map(el => el.destroy())\n\t\t\tif (this.tabInstance) this.tabInstance.map(el => el.destroy())\n\t\t} catch (err) {\n\t\t\tconsole.log('[VITAL SIGNS] Error with unmount cleanup: ', err)\n\t\t}\n\t}\n\n\t/**\n\t * given the user has pressed 'admit'\n\t * 1. validate all items on the page\n\t * 2a. if not valid, inform the user with coloured boxes and a modal\n\t * 2b. if valid: call props.submitform with the associated vital signs, formatted correctly\n\t */\n\tasync submitForm() {\n\t\tconst requiredInputs = [\n\t\t\t'respiratory_rate',\n\t\t\t'oxygen_saturation',\n\t\t\t'heart_rate',\n\t\t\t'body_temperature',\n\t\t\t'systolic_bp',\n\t\t\t'level_of_consciousness',\n\t\t]\n\n\t\tconst invalid = requiredInputs\n\t\t\t.map(el => document.getElementById(el))\n\t\t\t.filter((inp) => {\n\t\t\t\tif (!inp.value) return true\n\t\t\t\tif (Number.isNaN(inp.value) && inp.id !== 'level_of_consciousness') return true\n\t\t\t\treturn false\n\t\t\t})\n\t\t\t.map(inp => inp.dataset.invalidName)\n\t\tif (invalid.length) {\n\t\t\tdoModal(\n\t\t\t\t'Error with form!',\n\t\t\t\t`You've missed out, or entered some of the fields incorrectly:</p>\n\t\t\t\t<ul class=\"browser-default\"><li>${invalid.join('</li><li>')}</ul>`,\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// everything must be correct, send it back to the main component\n\t\tconst form = new FormData()\n\t\tconst inputs = requiredInputs.map(el => document.getElementById(el))\n\n\t\tinputs.forEach(field => form.append(field.id, field.value))\n\n\t\tconst oxygen = document.getElementById('supplemental_oxygen')\n\t\tconst usesOxygen = oxygen.checked ? 'yes' : 'no'\n\t\tform.append('supplemental_oxygen', usesOxygen)\n\n\t\tawait this.props.submit(form)\n\t\tinputs.splice(inputs.length - 1) // remove level of consciousness from cleanup\n\t\tinputs.forEach(input => input.value = '')\n\t\tM.updateTextFields()\n\t}\n\n\t/**\n\t * Render input form for vitals and output of prior vitals\n\t * @param {object} props component props\n\t * @param {DiagnosticReport[]} props.history patient obs history\n\t * @returns {VNode} patient info\n\t */\n\trender(props) {\n\t\treturn (\n\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"card-tabs\">\n\t\t\t\t\t<ul className=\"tabs tabs-fixed-width vital-record-view-tabs\">\n\t\t\t\t\t\t<li className=\"tab\"><a className=\"active\" href=\"#record\">Record Vital Signs</a></li>\n\t\t\t\t\t\t<li className=\"tab\"><a href=\"#history\">Previous Vital Signs</a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t<div id=\"record\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<form action=\"\" className=\"col s12\">\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<input id=\"respiratory_rate\" type=\"number\" className=\"validate\" data-invalid-name=\"Respiratory Rate\" />\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"respiratory_rate\">Respiratory Rate</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<input id=\"oxygen_saturation\" type=\"number\" className=\"validate\" data-invalid-name=\"Oxygen Saturation\" />\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"oxygen_saturation\">Oxygen Saturation</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<input id=\"heart_rate\" type=\"number\" className=\"validate\" data-invalid-name=\"Heart Rate\" />\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"heart_rate\">Heart Rate</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<input id=\"body_temperature\" type=\"number\" className=\"validate\" data-invalid-name=\"Body Temperature\" />\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"body_temperature\">Body Temperature</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<input id=\"systolic_bp\" type=\"number\" className=\"validate\" data-invalid-name=\"Blood Pressure\" />\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"systolic_bp\">Systolic Blood Pressure</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"input-field col s6\">\n\t\t\t\t\t\t\t\t\t\t<select id=\"level_of_consciousness\" data-invalid-name=\"Level of Consciousness\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\" disabled selected>Select level</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"A\">Aware</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"D\">Drowzy</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"U\">Unconscious</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<label>Level of Consciousness</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input name=\"supplemental_oxygen\" id=\"supplemental_oxygen\" type=\"checkbox\" value=\"on\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<span>Supplemental Oxygen</span>\n\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t\t\t\t\t\t<a className=\"waves-effect waves-light btn\" onClick={this.submitForm.bind(this)}>Submit</a>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"history\">\n\t\t\t\t\t\t<table className=\"responsive-table striped highlght\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t\t\t\t\t<th>Respiratory rate</th>\n\t\t\t\t\t\t\t\t\t<th>Oxygen Saturation</th>\n\t\t\t\t\t\t\t\t\t<th>Heart Rate</th>\n\t\t\t\t\t\t\t\t\t<th>Body Temperature</th>\n\t\t\t\t\t\t\t\t\t<th>Blood Pressure</th>\n\t\t\t\t\t\t\t\t\t<th>Level of Consciousness</th>\n\t\t\t\t\t\t\t\t\t<th>Supplemental Oxygen</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{createTable(props.history)}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Vitals\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/view-patient/vital-signs.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "ewsToClass",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx",
    "static": true,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~ewsToClass",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/view-patient/vital-signs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 293,
    "kind": "function",
    "name": "createTable",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~createTable",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/view-patient/vital-signs.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "history",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "class",
    "name": "Vitals",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx",
    "static": true,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/view-patient/vital-signs.jsx",
    "importStyle": "Vitals",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#componentDidMount",
    "access": "public",
    "description": "Initialise materialize components on page load",
    "lineNumber": 97,
    "params": [],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "formInstance",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#formInstance",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "tabInstance",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#tabInstance",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#componentDidUpdate",
    "access": "public",
    "description": "the main router sets state, which propogates an update here\nthis causes a re-render which kills select instances\nre-build the select",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#componentWillUnmount",
    "access": "public",
    "description": "on unmount, kill all materialize instances so as to not break the app",
    "lineNumber": 120,
    "params": [],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "submitForm",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#submitForm",
    "access": "public",
    "description": "given the user has pressed 'admit'\n1. validate all items on the page\n2a. if not valid, inform the user with coloured boxes and a modal\n2b. if valid: call props.submitform with the associated vital signs, formatted correctly",
    "lineNumber": 136,
    "params": [],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vital-signs.jsx~Vitals#render",
    "access": "public",
    "description": "Render input form for vitals and output of prior vitals",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VNode} patient info"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "component props"
      },
      {
        "nullable": null,
        "types": [
          "DiagnosticReport[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.history",
        "description": "patient obs history"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VNode"
      ],
      "spread": false,
      "description": "patient info"
    }
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "src/client/spa/partial/view-patient/vitals-charts.jsx",
    "content": "import {h, Component} from 'preact'\nimport format from 'date-fns/format'\nimport Chart from 'chart.js'\n\nimport WarningScore from '../../WarningScore'\n\nimport '../../styles/charts.scss'\n\nconst colours = [\n\t'rgb(46, 125, 50)', // green\n\t'rgb(38, 166, 154)', // teal\n\t'rgb(211, 47, 47)', // red\n\t'rgb(40, 53, 147)', // blue\n\t'rgb(194, 24, 91)', // pink\n]\n\nclass NewsChart extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.handleVitalsChart = this.handleVitalsChart.bind(this)\n\t\tthis.handleNewsChart = this.handleNewsChart.bind(this)\n\t}\n\n\t/**\n\t * on component mount, create charts\n\t */\n\tcomponentDidMount() {\n\t\tthis.handleVitalsChart()\n\t\tthis.handleNewsChart()\n\t}\n\n\t/**\n\t * given vital signs (from props)\n\t * get all numeric values and place in to a dataset\n\t * place these on a graph\n\t */\n\thandleVitalsChart() {\n\t\tconst {history} = this.props\n\t\t// take all observation dates and format them to 03:30pm, 26th Apr 2019\n\t\tconst labels = history.map(obs => format(obs.date, 'hh:mma, Do MMM YYYY'))\n\t\t// take from [{resp: 11, temp: 12}, {resp: 11, temp: 13}]\n\t\t// change to {resp: [11, 11], temp: [12, 13]}\n\t\tconst sets = history.reduce((acc, cur) => {\n\t\t\tObject.keys(cur).forEach((key) => {\n\t\t\t\tif (!(key in acc)) acc[key] = [cur[key]]\n\t\t\t\telse acc[key].push(cur[key])\n\t\t\t})\n\t\t\treturn acc\n\t\t}, {})\n\n\t\t// can't graph these!\n\t\tdelete sets.date\n\t\tdelete sets.level_of_consciousness\n\t\tdelete sets.supplemental_oxygen\n\n\t\t// map histoy in to datasets\n\t\tconst datasets = Object.keys(sets).map((key, idx) => ({\n\t\t\tlabel: key,\n\t\t\tfill: false,\n\t\t\tbackgroundColor: colours[idx].replace(')', ', 0.7)'), // 'rgba(255, 99, 132, 0.3)',\n\t\t\tborderColor: colours[idx],\n\t\t\tdata: sets[key].map(val => parseInt(val, 10)),\n\t\t}))\n\t\tconst ctx = this.vitalsChart.getContext('2d')\n\t\tthis.vitalsChartInst = new Chart(ctx, {\n\t\t\ttype: 'line',\n\t\t\tdata: {labels, datasets},\n\t\t\toptions: {\n\n\t\t\t},\n\t\t})\n\t}\n\n\t/**\n\t * given vital signs (from props)\n\t * get create a WarningScore object for each\n\t * map this in to the calculated NEWS\n\t * place these on a graph\n\t */\n\thandleNewsChart() {\n\t\tconst {history} = this.props\n\t\tconst labels = history.map(obs => format(obs.date, 'hh:mma, Do MMM YYYY'))\n\t\tconst scores = history.map(obs => new WarningScore(obs).score())\n\t\tconst ctx = this.newsChart.getContext('2d')\n\t\tthis.newsChartInst = new Chart(ctx, {\n\t\t\ttype: 'line',\n\t\t\tdata: {\n\t\t\t\tlabels,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tlabel: 'Warning Score',\n\t\t\t\t\tbackgroundColor: 'rgb(255, 99, 132, 0.4)',\n\t\t\t\t\tborderColor: 'rgb(255, 99, 132)',\n\t\t\t\t\tdata: scores,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tscales: {\n\t\t\t\t\tyAxes: [{ticks: {min: 0, max: 3}}],\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}\n\n\t/**\n\t *\n\t * @param {preact.ComponentProps} props\n\t * @returns {preact.VNode}\n\t */\n\trender(props) {\n\t\treturn (\n\t\t\t<div ref={n => props.refCb(n)} id=\"modal1\" className=\"modal news-chart-modal\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<ul className=\"tabs chart-tabs\" ref={t => this.tabs = t}>\n\t\t\t\t\t\t\t<li className=\"tab col s6\"><a href=\"#vital-signs\">Vital Signs</a></li>\n\t\t\t\t\t\t\t<li className=\"tab col s6\"><a href=\"#news-tab\">NEWS</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"vital-signs\" className=\"col s12\">\n\t\t\t\t\t\t<canvas ref={c => this.vitalsChart = c} height=\"500\" width=\"900\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"news-tab\" className=\"col s12\">\n\t\t\t\t\t\t<canvas ref={c => this.newsChart = c} height=\"500\" width=\"900\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default NewsChart\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/partial/view-patient/vitals-charts.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "colours",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx",
    "static": true,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~colours",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/client/spa/partial/view-patient/vitals-charts.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "class",
    "name": "NewsChart",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx",
    "static": true,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/partial/view-patient/vitals-charts.jsx",
    "importStyle": "NewsChart",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "preact~Component"
    ]
  },
  {
    "__docId__": 306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#componentDidMount",
    "access": "public",
    "description": "on component mount, create charts",
    "lineNumber": 27,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "handleVitalsChart",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#handleVitalsChart",
    "access": "public",
    "description": "given vital signs (from props)\nget all numeric values and place in to a dataset\nplace these on a graph",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "vitalsChartInst",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#vitalsChartInst",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "handleNewsChart",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#handleNewsChart",
    "access": "public",
    "description": "given vital signs (from props)\nget create a WarningScore object for each\nmap this in to the calculated NEWS\nplace these on a graph",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "newsChartInst",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#newsChartInst",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/spa/partial/view-patient/vitals-charts.jsx~NewsChart#render",
    "access": "public",
    "description": "",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{preact.VNode}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "preact.ComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "preact.VNode"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "src/client/spa/util.js",
    "content": "import Base64 from 'crypto-js/enc-base64'\nimport Utf8 from 'crypto-js/enc-utf8'\nimport axios from 'axios'\nimport {Modal} from 'materialize-css'\n\n/**\n * get and parse payload from localstorage\n * useful for checking exp and user information\n * @returns {object} JWT\n */\nexport function getJwtPayload(token) {\n\tif (!token) return false\n\tconst [, payloadB64] = token.split('.')\n\tconst payload = Utf8.stringify(Base64.parse(payloadB64))\n\treturn JSON.parse(payload)\n}\n\nexport const getName = () => getJwtPayload(localStorage.token).name\n\n/**\n * no operation!\n */\nexport function noop() {}\n\n/**\n * display a login modal\n */\nexport function showLogin() {\n\tlocalStorage.removeItem('token')\n\tconst modal = document.querySelector('.modal.login-modal')\n\tconst inst = Modal.getInstance(modal) || Modal.init(modal)\n\tinst.open()\n}\n\n/**\n * fhir layer for requests\n */\nexport const fhirBase = axios.create({\n\tbaseURL: '/fhir',\n\ttimeout: 1500,\n\theaders: {\n\t\taccept: 'application/fhir+json',\n\t\t'content-type': 'application/fhir+json',\n\t},\n})\n\n// apply a new token for every request as logging in natively will use old token\nfhirBase.interceptors.request.use((config) => {\n\tif (localStorage.getItem('token')) {\n\t\tconfig.headers.token = localStorage.getItem('token')\n\t}\n\treturn config\n})\n\n// intercept response error and ensure the status code isn't 401. see server/auth.js middleware\nfhirBase.interceptors.response.use(resp => resp, (err) => {\n\tif (err.response.status === 401) return showLogin()\n\treturn Promise.reject(err)\n})\n\n\n/**\n * Find the modal on the page, and pop it up!\n * @param {string} header Modal header\n * @param {string} body modal body\n */\nexport function doModal(header, body) {\n\tconst modal = document.querySelector('.modal.information')\n\tconst instance = Modal.getInstance(modal) || Modal.init(modal)\n\tconst content = document.querySelector('.modal.information .modal-content')\n\tconsole.log(content)\n\tcontent.innerHTML = `\n\t\t\t<h4>${header}</h4>\n\t\t\t<p>${body}</p>`\n\tinstance.open()\n}\n\n/**\n * capitalise a string: harry -> Harry\n * @param {string} str input to capitalise\n * @returns {string} capitalised string\n */\nexport const toTitle = str => str.charAt(0).toUpperCase() + str.slice(1)\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/client/spa/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "getJwtPayload",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~getJwtPayload",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{getJwtPayload}",
    "description": "get and parse payload from localstorage\nuseful for checking exp and user information",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} JWT"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "JWT"
    },
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "getName",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~getName",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{getName}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "noop",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~noop",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{noop}",
    "description": "no operation!",
    "lineNumber": 23,
    "params": [],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "showLogin",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~showLogin",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{showLogin}",
    "description": "display a login modal",
    "lineNumber": 28,
    "params": [],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "fhirBase",
    "memberof": "src/client/spa/util.js",
    "static": true,
    "longname": "src/client/spa/util.js~fhirBase",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{fhirBase}",
    "description": "fhir layer for requests",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "doModal",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~doModal",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{doModal}",
    "description": "Find the modal on the page, and pop it up!",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "header",
        "description": "Modal header"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "modal body"
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "toTitle",
    "memberof": "src/client/spa/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/spa/util.js~toTitle",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/client/spa/util.js",
    "importStyle": "{toTitle}",
    "description": "capitalise a string: harry -> Harry",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} capitalised string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "input to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 323,
    "kind": "file",
    "name": "src/server/auth/index.js",
    "content": "const authRouter = require('express').Router()\nconst request = require('request-promise')\nconst queryString = require('querystring')\nconst Base64 = require('crypto-js/enc-base64')\nconst Utf8 = require('crypto-js/enc-utf8')\nconst jwt = require('jsonwebtoken')\nconst bcrypt = require('bcrypt')\n\nconst checkPass = require('./passwords')\nconst logger = require('../logger')\nconst OperationOutcome = require('../fhir/classes/OperationOutcome')\nconst {knex} = require('../db')\n\n// ! csprng is ideal - but not good for using nodemon in development. fix this later\nconst sessionSecret = process.env.AUTH_SECRET// = csprng(128, 26)\nconst saltRounds = 5 // has a big impact on perf\n\n/**\n * Given user details, store them in the database, if they don't already exist\n * This is so that admins can assign wards\n * @param {string} payload unparsed json\n */\nasync function handleUser(payload) {\n\tconst meta = {file: 'auth.js', func: 'handleUser()'}\n\tconst parsed = JSON.parse(payload)\n\tconst rows = await knex('practitioner')\n\t\t.select()\n\t\t.where({username: parsed.email})\n\tif (rows.length) {\n\t\tlogger.debug('user exists. returning', meta)\n\t\treturn rows[0]\n\t}\n\tlogger.debug('creating new user', meta)\n\tconst [resp] = await knex('practitioner').insert({\n\t\tname: parsed.name,\n\t\tadded: new Date(),\n\t\tusername: parsed.email,\n\t\taccount_type: 'google',\n\t\tpermissions: '[]',\n\t}).returning('*')\n\tlogger.info(`user created with id: ${resp.practitioner_id}`, meta)\n\treturn resp\n}\n\n/**\n * Google oauth flow. Environment variables required:\n *** GOOGLE_CLIENT_ID - Client ID from Google\n *** GOOGLE_CLIENT_SECRET - Client secret from Google\n *** GOOGLE_OAUTH_CALLBACK - The FULL URL for google to callback to. This set in app settings\n *** AUTH_SECRET - some password for the JWT\n * Implementation from https://developers.google.com/identity/protocols/OAuth2WebServer\n */\nauthRouter.get('/auth/callback', async (req, res) => {\n\tconst meta = {file: 'auth.js', func: 'GET /auth/callback'}\n\tlogger.info('recieved request from google', meta)\n\t// code? we must be authing\n\tlogger.debug('attempting to login', meta)\n\n\t// Create request body\n\tconst body = queryString.stringify({\n\t\tcode: req.query.code,\n\t\tgrant_type: 'authorization_code',\n\t\tclient_id: process.env.GOOGLE_CLIENT_ID,\n\t\tclient_secret: process.env.GOOGLE_CLIENT_SECRET,\n\t\tredirect_uri: encodeURI(process.env.GOOGLE_OAUTH_CALLBACK),\n\t})\n\tconst opts = {\n\t\tbody,\n\t\tmethod: 'POST',\n\t\turi: 'https://www.googleapis.com/oauth2/v4/token',\n\t\theaders: {\n\t\t\t'Content-Length': body.length,\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t}\n\t// send body to google and wait for AT/ID Token\n\tconst resp = await request(opts)\n\t// can access google ACCESS_TOKEN here\n\tconst {id_token} = JSON.parse(resp)\n\n\t// ID Token is a JWT, extract this and use it in our new JWT\n\t// create our own JWT because we know the pass and can verify it\n\tconst [, payloadB64] = id_token.split('.')\n\tconst payload = Utf8.stringify(Base64.parse(payloadB64))\n\tconst {email, name, hd, given_name, family_name} = JSON.parse(payload)\n\n\tconst userData = await handleUser(payload)\n\t// store user if not in database and add basic permissions + include in JWT\n\tconst fypPayload = {\n\t\temail,\n\t\tuserid: userData.practitioner_id,\n\t\tpermissions: userData.permissions,\n\t\tname,\n\t\thd,\n\t\tgiven_name,\n\t\tfamily_name,\n\t\texp: Math.floor(Date.now() / 1000) + (60 * 60),\n\t}\n\tconst token = jwt.sign(fypPayload, sessionSecret)\n\n\t// return the user to the homepage\n\t// sadly state in google's oauth response is not the previous url as it is with other servers\n\tres.redirect(`/?token=${token}`)\n\n\t// user has authed: handle their identity\n})\n\n// user gets redirected to /login: create a URL and redirect them to google's oauth server\nauthRouter.get('/login', (_, res) => {\n\t// if the user is not making a request with a token\n\t// or if we have not sent it to them, redirect to auth\n\tconst url = 'https://accounts.google.com/o/oauth2/v2/auth?'\n\t\t+ 'state=state_parameter_passthrough_value&'\n\t\t+ 'include_granted_scopes=true&'\n\t\t+ 'access_type=offline&'\n\t\t+ `redirect_uri=${encodeURIComponent(process.env.GOOGLE_OAUTH_CALLBACK)}&`\n\t\t+ 'response_type=code&'\n\t\t+ `client_id=${process.env.GOOGLE_CLIENT_ID}&`\n\t\t+ `scope=${encodeURIComponent('profile email openid')}`\n\tres.redirect(url)\n\t// return res.redirect(`/login.html?google_redir=${url}`)\n})\n\nauthRouter.get('/login/url', (req, res) => {\n\tconst url = 'https://accounts.google.com/o/oauth2/v2/auth?'\n\t\t+ 'state=state_parameter_passthrough_value&'\n\t\t+ 'include_granted_scopes=true&'\n\t\t+ 'access_type=offline&'\n\t\t+ `redirect_uri=${encodeURIComponent(process.env.GOOGLE_OAUTH_CALLBACK)}&`\n\t\t+ 'response_type=code&'\n\t\t+ `client_id=${process.env.GOOGLE_CLIENT_ID}&`\n\t\t+ `scope=${encodeURIComponent('profile email openid')}`\n\tres.send(url)\n})\n\n// recieve login data from user\nauthRouter.post('/login', async (req, res) => {\n\tconst {username, password} = req.body\n\ttry {\n\t\t// check user in db. exclude google types\n\t\tconst [row] = await knex('practitioner')\n\t\t\t.select()\n\t\t\t.where({username, account_type: 'normal'})\n\t\t// no user? inform\n\t\tif (!row) return res.status(400).send('Unable to login: username does not exist!')\n\n\t\t// compare the password with the hash stored in db. no match? reject\n\t\tconst passMatch = await bcrypt.compare(password, row.passhash)\n\t\tif (!passMatch) return res.status(400).send('Passwords do not match')\n\n\t\t// create a JWT with name, username, ID and permissions.\n\t\t// expires in an hour, lecture length\n\t\tconst token = jwt.sign({\n\t\t\tname: row.name,\n\t\t\tusername: row.username,\n\t\t\tuserid: row.practitioner_id,\n\t\t\tpermissions: row.permissions,\n\t\t\texp: Math.floor(Date.now() / 1000) + (60 * 60),\n\t\t}, sessionSecret)\n\n\t\t// message is shown in popup\n\t\treturn res.json({token, message: `Welcome back, ${row.name}`})\n\t} catch (err) {\n\t\t// handle errors with a 500 so the server does not die\n\t\treturn res.status(500).send(`Error logging in: ${err}`)\n\t}\n})\n\nauthRouter.post('/login/create', async (req, res) => {\n\t// to create a user, name, username and password is required\n\tconst required = ['name', 'username', 'password']\n\t// pull from request body\n\tconst {name, username, password} = req.body\n\n\t// check we have all required entries\n\tconst missing = required.filter(key => !req.body[key])\n\tif (missing.length) return res.status(400).send(`Couldn't register! Missing: ${missing.join(', ')}`)\n\n\t// check they don't already exist\n\tconst rows = await knex('practitioner').select().where({username})\n\tif (rows.length) return res.status(400).send(\"Couldn't register! Username already exists\")\n\n\t// check that password > 10 chars and includes alphanum]\n\tconst {valid, message} = checkPass(password)\n\tif (!valid) return res.status(400).send(`Issue with password: ${message}`)\n\n\ttry {\n\t\t// calculate a password hash and put in db\n\t\tconst passhash = await bcrypt.hash(password, saltRounds)\n\t\tawait knex('practitioner').insert({\n\t\t\tname,\n\t\t\tusername,\n\t\t\tpasshash,\n\t\t\tpermissions: '[]', // knex with JSON rows still means that json must be stringified\n\t\t\taccount_type: 'normal',\n\t\t\tadded: new Date(),\n\t\t})\n\t\treturn res.status(200).send(`Successfully registered. Welcome, ${name}`)\n\t} catch (err) {\n\t\treturn res.status(500).send(`<p>Couldn't register! Error:</p><p>${err}</p>`)\n\t}\n})\n\n// token checking middleware for fhir API\nauthRouter.use('/fhir', (req, res, next) => {\n\tconst meta = {file: 'auth.js', func: 'auth middleware'}\n\t// extract token from headers\n\tconst {token} = req.headers\n\tlogger.debug(`has token: ${!!token}`, meta)\n\tlogger.silly(`token: ${token}`, meta)\n\t// no token? login\n\tif (!token) return res.redirect('/login')\n\ttry {\n\t\t// verify token with session secret\n\t\tconst valid = jwt.verify(token, sessionSecret)\n\t\tlogger.silly(`validated user token. allowing them through, ${JSON.stringify(valid)}`, meta)\n\t\treturn next()\n\t} catch (err) {\n\t\t// error verifying token? redirect to login\n\t\tlogger.debug('user not valid. informing client axios', meta)\n\t\tlogger.error(`error caught: ${err}`, meta)\n\t\tconst outcome = new OperationOutcome('error', 401, req.originalUrl, 'JWT invalid or inaccessible', err)\n\t\treturn outcome.makeResponse(res)\n\t}\n})\n\n\nmodule.exports = authRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/auth/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "sessionSecret",
    "memberof": "src/server/auth/index.js",
    "static": true,
    "longname": "src/server/auth/index.js~sessionSecret",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/auth/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "saltRounds",
    "memberof": "src/server/auth/index.js",
    "static": true,
    "longname": "src/server/auth/index.js~saltRounds",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/auth/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "handleUser",
    "memberof": "src/server/auth/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/server/auth/index.js~handleUser",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/auth/index.js",
    "importStyle": null,
    "description": "Given user details, store them in the database, if they don't already exist\nThis is so that admins can assign wards",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "unparsed json"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "file",
    "name": "src/server/auth/token.js",
    "content": "const Base64 = require('crypto-js/enc-base64')\nconst Utf8 = require('crypto-js/enc-utf8')\n\n/**\n * Pull and parse a JWT payload\n * @param {string} token JWT\n */\nfunction decodeJWTPayload(token) {\n\tif (!token) return {permissions: []}\n\tconst [, payload] = token.split('.')\n\tconst utfPayload = Base64.parse(payload).toString(Utf8)\n\treturn JSON.parse(utfPayload)\n}\n\nmodule.exports = {\n\tdecodeJWTPayload,\n}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/auth/token.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "decodeJWTPayload",
    "memberof": "src/server/auth/token.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/auth/token.js~decodeJWTPayload",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/auth/token.js",
    "importStyle": null,
    "description": "Pull and parse a JWT payload",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "JWT"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/server/db.js",
    "content": "const pg = require('pg')\nconst knex = require('knex')({\n\tclient: 'pg',\n\tconnection: process.env.DATABASE_URL,\n})\nconst logger = require('./logger')\n\nlet isConnected = false\n\nconst client = new pg.Client(process.env.DATABASE_URL)\n\nlogger.info(`attempting to connect to postgres on ${process.env.DATABASE_URL}`, {file: 'server/db.js', func: 'main'})\n\n\nasync function connect() {\n\tif (isConnected) return\n\tawait client.connect()\n\tlogger.debug('successfully connected to database', {file: 'server/db.js', func: 'connect()'})\n\tisConnected = true\n}\n\nmodule.exports = {client, connect, knex}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/db.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "variable",
    "name": "isConnected",
    "memberof": "src/server/db.js",
    "static": true,
    "longname": "src/server/db.js~isConnected",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/db.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "client",
    "memberof": "src/server/db.js",
    "static": true,
    "longname": "src/server/db.js~client",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/db.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "connect",
    "memberof": "src/server/db.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/server/db.js~connect",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/db.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "src/server/fhir/classes/Contact.js",
    "content": "const {knex} = require('../../db')\nconst logger = require('../../logger')\n\nclass Contact {\n\t/**\n\t * Contact wrapper for fhir data\n\t * @param {object} params Params to create a contact\n\t * @param {number} params.contact_id Contact ID in database\n\t * @param {string} params.prefix prefix for our contact\n\t * @param {string} params.fullname contact's full name\n\t * @param {string} params.phone contact's phone number\n\t * @param {string} params.family contact's family name (if applicable)\n\t */\n\tconstructor(params) {\n\t\tconst {contact_id, prefix, fullname, given, phone, family} = params\n\t\tthis.contact_id = contact_id\n\t\tthis.prefix = prefix\n\t\tthis.fullname = fullname\n\t\tthis.given = given\n\t\tthis.phone = phone\n\t\tthis.family = family\n\t\tthis.required = ['prefix', 'fullname', 'given', 'phone']\n\t\tthis.values = [...this.required, 'family']\n\t}\n\n\t/**\n\t * Populates the contact params based on the database response\n\t * @return {Promise<void>} void\n\t */\n\tasync populate() {\n\t\tconst {contact_id, meta} = this\n\t\tif (!contact_id) return logger.warn('no id, cannot retrieve', {...meta, func: 'populate()'})\n\t\tconst [resp] = await knex('contact').select().where({contact_id})\n\t\treturn Object.keys(resp).forEach(key => this[key] = resp[key])\n\t}\n\n\t/**\n\t * adds the contact to the database as long as this[required] is on the object\n\t * @return {Promise<object>} database response\n\t */\n\tasync insert() {\n\t\tconst isValid = !this.required.filter(key => !(this[key])).length\n\t\tif (!isValid) return false\n\t\t// create object\n\t\tthis.last_updated = new Date()\n\t\tconst obj = this.values\n\t\t\t.reduce((acc, cur) => {\n\t\t\t\tacc[cur] = this[cur]\n\t\t\t\treturn acc\n\t\t\t}, {})\n\t\t// make query\n\t\ttry {\n\t\t\tconst [resp] = await knex('contact').insert(obj).returning(['contact_id', ...this.values])\n\t\t\tlogger.debug('created contact', {file: 'Contact.js', func: 'insert()'})\n\t\t\treturn resp\n\t\t} catch (err) {\n\t\t\tlogger.error(err, {file: 'Contact.js', func: 'insert()'})\n\t\t\treturn false\n\t\t}\n\t}\n}\n\nmodule.exports = Contact\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Contact.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "Contact",
    "memberof": "src/server/fhir/classes/Contact.js",
    "static": true,
    "longname": "src/server/fhir/classes/Contact.js~Contact",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Contact.js",
    "importStyle": "Contact",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 335,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#constructor",
    "access": "public",
    "description": "Contact wrapper for fhir data",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Params to create a contact"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.contact_id",
        "description": "Contact ID in database"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.prefix",
        "description": "prefix for our contact"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fullname",
        "description": "contact's full name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.phone",
        "description": "contact's phone number"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.family",
        "description": "contact's family name (if applicable)"
      }
    ]
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "contact_id",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#contact_id",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "prefix",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#prefix",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "fullname",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#fullname",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "given",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#given",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "phone",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#phone",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "family",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#family",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "required",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#required",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "values",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#values",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#populate",
    "access": "public",
    "description": "Populates the contact params based on the database response",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": "void"
    },
    "params": []
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "insert",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#insert",
    "access": "public",
    "description": "adds the contact to the database as long as this[required] is on the object",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Promise<object>"
      ],
      "spread": false,
      "description": "database response"
    },
    "params": []
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "last_updated",
    "memberof": "src/server/fhir/classes/Contact.js~Contact",
    "static": false,
    "longname": "src/server/fhir/classes/Contact.js~Contact#last_updated",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/server/fhir/classes/DiagnosticReport.js",
    "content": "const log = require('../../logger')\nconst Observation = require('./Observation')\nconst {client} = require('../../db')\nconst FHIRBase = require('./FHIRBase')\n\nclass DiagnosticReport extends FHIRBase {\n\t/**\n\t * Created by getting data from the database: This resource consists of a number of Observations\n\t * @param {object} row database row to format Diagnostic report\n\t * @param {number} row.report_id database ID\n\t * @param {Date} row.last_updated When the resource was last updated\n\t * @param {number} row.patient_id The patient for which this report pertains\n\t */\n\tconstructor(row) {\n\t\tsuper(row)\n\t\t// merge keys with our own\n\t\tObject.keys(row).forEach(key => this[key] = row[key])\n\t}\n\n\t/**\n\t * Format the data to fhir spec\n\t * @returns {object} fhir formatted DiagnosticReport data\n\t */\n\tfhir() {\n\t\tlog.debug('Creating fhir data', {file: 'fhir/DiagnosticReport.js', func: 'DiagnosticReport#fhir()'})\n\t\tconst links = [\n\t\t\t'respiratory_rate',\n\t\t\t'oxygen_saturation',\n\t\t\t'supplemental_oxygen',\n\t\t\t'body_temperature',\n\t\t\t'systolic_bp',\n\t\t\t'heart_rate',\n\t\t\t'level_of_consciousness',\n\t\t].map(attr => `Observation/${this[attr]}`)\n\t\treturn {\n\t\t\tresourceType: 'DiagnosticReport',\n\t\t\tid: this.report_id,\n\t\t\tmeta: {\n\t\t\t\tlastUpdated: this.last_updated,\n\t\t\t},\n\t\t\tsubject: `Patient/${this.patient_id}`,\n\t\t\tstatus: 'final',\n\t\t\tresult: links,\n\n\t\t}\n\t}\n\n\t/**\n\t * Format the data to fhir spec, but link the Observations\n\t * @returns {object} fhir formatted DiagnosticReport data with observations linked\n\t */\n\tasync fhirLinked() {\n\t\tlog.debug('Attempting to grab linked data from database', {file: 'fhir/DiagnosticReport.js', func: 'DiagnosticReport#fhirLinked()'})\n\t\tconst observations = await Promise.all(['respiratory_rate',\n\t\t\t'oxygen_saturation',\n\t\t\t'supplemental_oxygen',\n\t\t\t'body_temperature',\n\t\t\t'systolic_bp',\n\t\t\t'heart_rate',\n\t\t\t'level_of_consciousness',\n\t\t].map(attr => client.query({\n\t\t\ttext: 'SELECT * FROM observation WHERE observation_id = $1',\n\t\t\tvalues: [this[attr]]})))\n\n\t\tlog.debug('Attempting to link back to report', {file: 'fhir/DiagnosticReport.js', func: 'DiagnosticReport#fhirLinked()'})\n\t\tconst values = await Promise.all(observations\n\t\t\t.map(val => val.rows[0])\n\t\t\t.map(data => new Observation(data.name, data.value, data.observation_id, data.last_updated))\n\t\t\t.map(obs => obs.fhir()))\n\t\treturn {\n\t\t\tresourceType: 'DiagnosticReport',\n\t\t\tid: this.report_id,\n\t\t\tmeta: {\n\t\t\t\tlastUpdated: this.last_updated,\n\t\t\t},\n\t\t\tsubject: `Patient/${this.patient_id}`,\n\t\t\tstatus: 'final',\n\t\t\tresult: values,\n\n\t\t}\n\t}\n}\n\nmodule.exports = DiagnosticReport\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/DiagnosticReport.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "DiagnosticReport",
    "memberof": "src/server/fhir/classes/DiagnosticReport.js",
    "static": true,
    "longname": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/DiagnosticReport.js",
    "importStyle": "DiagnosticReport",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 349,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport#constructor",
    "access": "public",
    "description": "Created by getting data from the database: This resource consists of a number of Observations",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "database row to format Diagnostic report"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row.report_id",
        "description": "database ID"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "row.last_updated",
        "description": "When the resource was last updated"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row.patient_id",
        "description": "The patient for which this report pertains"
      }
    ]
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport#fhir",
    "access": "public",
    "description": "Format the data to fhir spec",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} fhir formatted DiagnosticReport data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fhir formatted DiagnosticReport data"
    },
    "params": []
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "fhirLinked",
    "memberof": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/DiagnosticReport.js~DiagnosticReport#fhirLinked",
    "access": "public",
    "description": "Format the data to fhir spec, but link the Observations",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} fhir formatted DiagnosticReport data with observations linked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fhir formatted DiagnosticReport data with observations linked"
    },
    "params": []
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/server/fhir/classes/Encounter.js",
    "content": "const Location = require('./Location')\nconst Patient = require('./Patient')\nconst {knex} = require('../../db')\nconst logger = require('../../logger')\nconst FHIRBase = require('./FHIRBase')\n\nclass Encounter {\n\t/**\n\t * Wrapper for all fhir encounters\n\t * @param {Object} params params used to create Enounter\n\t * @param {number} params.encounter_id ID this encounter corresponds to in DB\n\t * @param {Date} params.last_updated when this was updated last\n\t * @param {string} params.class the type of encounter (generally admission)\n\t * @param {string} params.status the status of the encounter\n\t * \t\t\t\t\t\t\t\t(also usually finished as the patient has been admitted)\n\t * @param {number} params.patient_id patient that this encounter corresponds to\n\t * @param {number} params.location_id location that this encounter took place in\n\t */\n\tconstructor(params = {}) {\n\t\tthis.encounter_id = params.encounter_id\n\t\tthis.last_updated = params.last_updated\n\t\tthis.class = params.class\n\t\tthis.status = params.status\n\t\tthis.patient_id = params.patient_id\n\t\tthis.location_id = params.location_id\n\t\tthis.meta = {file: 'fhir/classes/Encounter.js'}\n\t\tthis.required = [\n\t\t\t'class',\n\t\t\t'status',\n\t\t\t'patient_id',\n\t\t\t'location_id',\n\t\t\t'last_updated',\n\t\t]\n\t}\n\n\t/**\n\t * Populate the object by ID\n\t * @return {Promise<boolean>} Able to populate or not\n\t */\n\tasync populate() {\n\t\tconst {encounter_id} = this\n\t\t// use a try-catch so that if there is nothing by ID\n\t\t// err is thrown and we can catch/return false\n\t\ttry {\n\t\t\tconst [resp] = await knex('encounter').select().where('encounter_id', encounter_id)\n\t\t\tObject.keys(resp).forEach(key => this[key] = resp[key])\n\t\t\treturn true\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to populate enconter', {...this.meta, func: 'populate()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'populate()'})\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * Adds object params to database\n\t * @returns {Promise<boolean>} Added to database or not\n\t */\n\tasync insert() {\n\t\tthis.last_updated = new Date()\n\t\tconst missingKeys = this.required.filter(key => !this[key])\n\t\tif (missingKeys.length) return false\n\t\tconst insertObj = this.required.reduce((acc, key) => {\n\t\t\tacc[key] = this[key]\n\t\t\treturn acc\n\t\t}, {})\n\t\ttry {\n\t\t\tlogger.silly(JSON.stringify(insertObj), {...this.meta, func: 'insert()'})\n\t\t\tawait knex('encounter').insert(insertObj)\n\t\t\treturn true\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to insert enconter', {...this.meta, func: 'insert()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'insert()'})\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * Update database based on object params\n\t * @returns {Promise<boolean>} updated or not\n\t */\n\tasync update() {\n\t\tconst exists = this.required.filter(key => this[key])\n\t\tconst cannotUpdate = exists.length === this.required.length\n\t\tif (cannotUpdate) return false\n\t\tconst obj = this.required.reduce((acc, cur) => {\n\t\t\tif (this[cur]) acc[cur] = this[cur]\n\t\t\treturn acc\n\t\t}, {})\n\t\tobj.last_updated = new Date()\n\t\tthis.last_updated = obj.last_updated\n\t\ttry {\n\t\t\tawait knex('encounter').update(obj)\n\t\t\treturn true\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to update enconter', {...this.meta, func: 'update()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'update()'})\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * delete based on this.encounter_id\n\t * @return {Promise<boolean>} deleted or not\n\t */\n\tasync delete() {\n\t\ttry {\n\t\t\tawait knex('encounter').delete().where('encounter_id', this.encounter_id)\n\t\t\treturn true\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to delete enconter', {...this.meta, func: 'delete()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'delete()'})\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * format to fhir spec\n\t * @return {object} fhir formatted object\n\t */\n\tasync fhir(include) {\n\t\tlet patient = {reference: `Patient/${this.patient_id}`}\n\t\tlet location = {reference: `Location/${this.location_id}`}\n\t\tif (include.patient) {\n\t\t\tconst unwrappedPat = new Patient({id: this.patient_id})\n\t\t\tawait unwrappedPat.populate()\n\t\t\tpatient = await unwrappedPat.fhir()\n\t\t}\n\t\tif (include.location) {\n\t\t\tconst unwrappedLoc = new Location({id: this.location_id})\n\t\t\tawait unwrappedLoc.populate()\n\t\t\tlocation = unwrappedLoc.fhir()\n\t\t}\n\n\t\treturn {\n\t\t\tresourceType: 'Encounter',\n\t\t\tmeta: {\n\t\t\t\tlastUpdated: new Date(this.last_updated),\n\t\t\t},\n\t\t\tstatus: this.status,\n\t\t\tclass: {\n\t\t\t\tdata: this.class,\n\t\t\t},\n\t\t\tsubject: patient,\n\t\t\tlocation: [location],\n\t\t}\n\t}\n}\n\nmodule.exports = Encounter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Encounter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "Encounter",
    "memberof": "src/server/fhir/classes/Encounter.js",
    "static": true,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Encounter.js",
    "importStyle": "Encounter",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 354,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#constructor",
    "access": "public",
    "description": "Wrapper for all fhir encounters",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "params used to create Enounter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.encounter_id",
        "description": "ID this encounter corresponds to in DB"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "params.last_updated",
        "description": "when this was updated last"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.class",
        "description": "the type of encounter (generally admission)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.status",
        "description": "the status of the encounter\n\t\t\t\t\t\t\t\t(also usually finished as the patient has been admitted)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.patient_id",
        "description": "patient that this encounter corresponds to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.location_id",
        "description": "location that this encounter took place in"
      }
    ]
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "encounter_id",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#encounter_id",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "last_updated",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#last_updated",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "class",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#class",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "status",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#status",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "patient_id",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#patient_id",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "location_id",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#location_id",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "meta",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#meta",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"file\": string}"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "required",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#required",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#populate",
    "access": "public",
    "description": "Populate the object by ID",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Able to populate or not"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "insert",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#insert",
    "access": "public",
    "description": "Adds object params to database",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} Added to database or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Added to database or not"
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "update",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#update",
    "access": "public",
    "description": "Update database based on object params",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} updated or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "updated or not"
    },
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "delete",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#delete",
    "access": "public",
    "description": "delete based on this.encounter_id",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "deleted or not"
    },
    "params": []
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/Encounter.js~Encounter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Encounter.js~Encounter#fhir",
    "access": "public",
    "description": "format to fhir spec",
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fhir formatted object"
    },
    "params": [
      {
        "name": "include",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/server/fhir/classes/FHIRBase.js",
    "content": "/* eslint-disable class-methods-use-this */\nclass FHIRBase {\n\tpopulate() {}\n\n\tinsert() {}\n\n\tupdate() {}\n\n\tdelete() {}\n\n\tfhir() {}\n}\n\nmodule.exports = FHIRBase\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/FHIRBase.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "FHIRBase",
    "memberof": "src/server/fhir/classes/FHIRBase.js",
    "static": true,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/FHIRBase.js",
    "importStyle": "FHIRBase",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase#populate",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "insert",
    "memberof": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase#insert",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "update",
    "memberof": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase#update",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "delete",
    "memberof": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase#delete",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/FHIRBase.js~FHIRBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/FHIRBase.js~FHIRBase#fhir",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "src/server/fhir/classes/Location.js",
    "content": "const logger = require('../../logger')\nconst {knex} = require('../../db')\nconst FHIRBase = require('./FHIRBase')\n\nclass Location extends FHIRBase {\n\t/**\n\t * Location wrapper for fhir data and database queries\n\t * @param {Object} params - Params to create the location and thus fhir/postrges query\n\t * @param {Number} params.id - Database ID. Only used when Location is created from database\n\t * @param {string} params.name - Name of the location (Ward 1, etc). Required for query\n\t * @param {string} params.description - Description of the location. Required for query\n\t * @param {Date}   params.lastUpdated - When the object was last updated. Not used for query\n\t * @param {string} params.type - The type of location (wing/ward/room)\n\t */\n\tconstructor(params) {\n\t\tsuper(params)\n\t\tthis.id = params.id\n\t\tthis.status = params.status || 'active'\n\t\tthis.name = params.name\n\t\tthis.description = params.description\n\t\tthis.lastUpdated = params.lastUpdated || new Date()\n\t\tthis.type = Location.lookup(params.type || 'ward')\n\t}\n\n\t// based on the data this object is constructed with, create an insert query\n\t// perhaps make an object return so we can do Location.query.insert and Location.query.update\n\tget query() {\n\t\tconst values = [this.status, this.name, this.description, this.type.display]\n\t\tif (values.includes(undefined)) return false\n\t\tlogger.debug('query valid, returning', {file: 'fhir/classes/Location', func: 'get query()'})\n\t\treturn {\n\t\t\tname: 'create-location',\n\t\t\ttext: 'INSERT INTO location (status, name, description, last_updated, type) VALUES ($1, $2, $3, $4, $5) RETURNING location_id;',\n\t\t\tvalues: [this.status, this.name, this.description, new Date(), this.type.display],\n\t\t}\n\t}\n\n\t/**\n\t * Ensure object is created with proper params\n\t * @returns {boolean} - Whether the object is valid or not\n\t */\n\tget valid() {\n\t\treturn ['id', 'status', 'name', 'description', 'type'].filter(prop => Boolean(this[prop])).length\n\t}\n\n\t/**\n\t * fetch data from database and populate location object\n\t * @returns {void}\n\t */\n\tasync populate() {\n\t\tconst [resp] = await knex('location').select().where({location_id: this.id})\n\t\tthis.lastUpdated = resp.last_updated\n\t\tthis.status = resp.status\n\t\tthis.name = resp.name\n\t\tthis.description = resp.description\n\t}\n\n\t/**\n\t * Format database data in to expected fhir formatting\n\t * @returns {object} object data formatted to fhir standards\n\t */\n\tfhir() {\n\t\tif (!this.valid) return {}\n\t\treturn {\n\t\t\tresourceType: 'Location',\n\t\t\tid: this.id,\n\t\t\tmeta: {\n\t\t\t\tversionID: 1,\n\t\t\t\tlastUpdated: new Date(this.lastUpdated),\n\t\t\t},\n\t\t\tstatus: this.status,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\tcoding: [this.type],\n\t\t}\n\t}\n\n\t/**\n\t * Formats the location appropriately to fhir standards\n\t * @param {string} type The type of location\n\t * @return {object} - correct formatting for location type\n\t */\n\tstatic lookup(type) {\n\t\tswitch (type.toLowerCase()) {\n\t\tcase 'wing': {\n\t\t\treturn {\n\t\t\t\tsystem: 'https://www.hl7.org/fhir/codesystem-location-physical-type.html',\n\t\t\t\tcode: 'wi',\n\t\t\t\tdisplay: 'Wing',\n\t\t\t}\n\t\t}\n\t\tcase 'ward': {\n\t\t\treturn {\n\t\t\t\tsystem: 'https://www.hl7.org/fhir/codesystem-location-physical-type.html',\n\t\t\t\tcode: 'wa',\n\t\t\t\tdisplay: 'Ward',\n\t\t\t}\n\t\t}\n\t\tcase 'room': {\n\t\t\treturn {\n\t\t\t\tsystem: 'https://www.hl7.org/fhir/codesystem-location-physical-type.html',\n\t\t\t\tcode: 'ro',\n\t\t\t\tdisplay: 'Room',\n\t\t\t}\n\t\t}\n\t\tdefault: {\n\t\t\treturn false\n\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Location\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Location.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "class",
    "name": "Location",
    "memberof": "src/server/fhir/classes/Location.js",
    "static": true,
    "longname": "src/server/fhir/classes/Location.js~Location",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Location.js",
    "importStyle": "Location",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 379,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#constructor",
    "access": "public",
    "description": "Location wrapper for fhir data and database queries",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Params to create the location and thus fhir/postrges query"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "Database ID. Only used when Location is created from database"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.name",
        "description": "Name of the location (Ward 1, etc). Required for query"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.description",
        "description": "Description of the location. Required for query"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "params.lastUpdated",
        "description": "When the object was last updated. Not used for query"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "The type of location (wing/ward/room)"
      }
    ]
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "id",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#id",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "status",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#status",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "name",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#name",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "description",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#description",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "lastUpdated",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#lastUpdated",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "type",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#type",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "get",
    "name": "query",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#query",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"text\": string, \"values\": *}"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "get",
    "name": "valid",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#valid",
    "access": "public",
    "description": "Ensure object is created with proper params",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Whether the object is valid or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the object is valid or not"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#populate",
    "access": "public",
    "description": "fetch data from database and populate location object",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Location.js~Location#fhir",
    "access": "public",
    "description": "Format database data in to expected fhir formatting",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} object data formatted to fhir standards"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "object data formatted to fhir standards"
    },
    "params": []
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "lookup",
    "memberof": "src/server/fhir/classes/Location.js~Location",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/fhir/classes/Location.js~Location.lookup",
    "access": "public",
    "description": "Formats the location appropriately to fhir standards",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of location"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "correct formatting for location type"
    }
  },
  {
    "__docId__": 395,
    "kind": "file",
    "name": "src/server/fhir/classes/Observation.js",
    "content": "const log = require('../../logger')\nconst {client} = require('../../db')\nconst FHIRBase = require('./FHIRBase')\n\nclass Observation extends FHIRBase {\n\t/**\n\t * FHIR wrapper for Observation data\n\t * @param {string} name Name of observation (blood pressure/respiratory rate etc)\n\t * @param {string} value Value (what was recorded)\n\t * @param {number} id DB ID of the Observation\n\t * @param {boolean} updated Then the resource was last updated\n\t */\n\tconstructor(name, value, id, updated = new Date()) {\n\t\tsuper({name, value, id, updated})\n\t\tthis.name = name\n\t\tthis.value = value\n\t\tthis.id = `${id}`\n\t\tthis.updated = updated\n\t\tthis.unitCode = {\n\t\t\trespiratory_rate: {\n\t\t\t\tunit: 'breaths/minute',\n\t\t\t\tcode: '/min',\n\t\t\t},\n\t\t\toxygen_saturation: {\n\t\t\t\tunit: '%',\n\t\t\t\tcode: '%',\n\t\t\t},\n\t\t\tbody_temperature: {\n\t\t\t\tunit: 'C',\n\t\t\t\tcode: 'cel',\n\t\t\t},\n\t\t\tsystolic_bp: {\n\t\t\t\tunit: 'mmHg',\n\t\t\t\tcode: 'mm[Hg]',\n\t\t\t},\n\t\t\theart_rate: {\n\t\t\t\tunit: 'beats/min',\n\t\t\t\tcode: '/min',\n\t\t\t},\n\t\t\tlevel_of_consciousness: {\n\t\t\t\tunit: '{score}', // https://s.details.loinc.org/LOINC/35088-4.html?sections=Comprehensive\n\t\t\t\tcode: '',\n\t\t\t},\n\t\t\tsupplemental_oxygen: {\n\t\t\t\tunit: '{yes/no}',\n\t\t\t\tcode: '',\n\t\t\t},\n\t\t}[name || 'heart_rate']\n\t}\n\n\t/**\n\t * Generates a query for inserting data in to database (uses node-pg structured queries for now)\n\t * TODO: Update this to knex\n\t * @returns {object} node-pg query\n\t */\n\tget query() {\n\t\tlog.info(`Creating query for ${this.name}:${this.value}`, {file: 'fhir/classes/Observation.js', func: 'Observation#query()'})\n\t\treturn {\n\t\t\ttext: 'INSERT INTO observation (last_updated, name, value) VALUES ($1, $2, $3) RETURNING observation_id, name',\n\t\t\tvalues: [this.updated, this.name, this.value],\n\t\t}\n\t}\n\n\t/**\n\t * Format the observation data to fhir data\n\t * @returns {object} fhir formatted observation data\n\t */\n\tasync fhir() {\n\t\tconst {name, id, value, unitCode, updated} = this\n\t\tlog.info(`Creating fhir data for ${id}:${name}:${value}`, {file: 'fhir/classes/Observation.js', func: 'Observation#fhir()'})\n\t\tconst valueQuantity = Object.assign({value, system: 'http://unitsofmeasure.org'}, unitCode)\n\t\tlog.debug(`querying database for ${name} = ${id}`, {file: 'fhir/classes/Observation.js', func: 'Observation#fhir()'})\n\t\t// DIRTY FIX ME PLEAAAASE\n\t\tconst {rows: [row]} = await client.query(`SELECT * FROM diagnostic_report WHERE ${name} = ${id}`)\n\t\treturn {\n\t\t\tresourceType: 'Observation',\n\t\t\tid,\n\t\t\tcode: {\n\t\t\t\ttext: this.name,\n\t\t\t},\n\t\t\tmeta: {lastUpdated: updated},\n\t\t\tstatus: 'final',\n\t\t\tsubject: {reference: `Diagnostic/${row.report_id}`},\n\t\t\tvalueQuantity,\n\t\t}\n\t}\n}\n\nmodule.exports = Observation\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Observation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 396,
    "kind": "class",
    "name": "Observation",
    "memberof": "src/server/fhir/classes/Observation.js",
    "static": true,
    "longname": "src/server/fhir/classes/Observation.js~Observation",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Observation.js",
    "importStyle": "Observation",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 397,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#constructor",
    "access": "public",
    "description": "FHIR wrapper for Observation data",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of observation (blood pressure/respiratory rate etc)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value (what was recorded)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "DB ID of the Observation"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "updated",
        "description": "Then the resource was last updated"
      }
    ]
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "name",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#name",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "value",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#value",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "id",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#id",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "updated",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#updated",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "unitCode",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#unitCode",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "get",
    "name": "query",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#query",
    "access": "public",
    "description": "Generates a query for inserting data in to database (uses node-pg structured queries for now)\nTODO: Update this to knex",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} node-pg query"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "node-pg query"
    },
    "type": {
      "types": [
        "{\"text\": string, \"values\": *}"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/Observation.js~Observation",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Observation.js~Observation#fhir",
    "access": "public",
    "description": "Format the observation data to fhir data",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} fhir formatted observation data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fhir formatted observation data"
    },
    "params": []
  },
  {
    "__docId__": 405,
    "kind": "file",
    "name": "src/server/fhir/classes/OperationOutcome.js",
    "content": "const FHIRBase = require('./FHIRBase')\n\nclass OperationOutcome extends FHIRBase {\n\t/**\n\t * Object form of https://www.hl7.org/fhir/operationoutcome.html\n\t * @param {string} sev Severity of the issue (fatal/error/warning/information)\n\t * @param {number} code HTTP status code to set\n\t * @param {string} path fhir path\n\t * @param {string} infoText Information text to display in an error\n\t * @param {string} diagnostics Diagnostics information\n\t */\n\tconstructor(sev, code, path, infoText, diagnostics = {}) {\n\t\tsuper({sev, code, infoText, diagnostics, path})\n\t\tthis.sev = sev\n\t\tthis.code = code\n\t\tthis.infoText = infoText\n\t\tthis.diagnostics = diagnostics\n\t\tthis.fhirPath = path\n\t}\n\n\t/**\n\t * Create a fhir OperationOutcome object literal\n\t * @returns {object} fhir object literal\n\t */\n\tget outcome() {\n\t\treturn {\n\t\t\tresourceType: 'OperationOutcome',\n\t\t\tissue: [{\n\t\t\t\tseverity: this.sev,\n\t\t\t\tcode: this.code,\n\t\t\t\tdetails: {\n\t\t\t\t\ttext: this.infoText,\n\t\t\t\t},\n\t\t\t\tdiagnostics: this.diagnostics,\n\t\t\t\texpression: this.fhirPath,\n\t\t\t}],\n\t\t}\n\t}\n\n\t/**\n\t * Make a HTTP response\n\t * @returns {void}\n\t */\n\tmakeResponse(res) {\n\t\treturn res.status(this.code).json(this.outcome)\n\t}\n}\n\nmodule.exports = OperationOutcome\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/OperationOutcome.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "class",
    "name": "OperationOutcome",
    "memberof": "src/server/fhir/classes/OperationOutcome.js",
    "static": true,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/OperationOutcome.js",
    "importStyle": "OperationOutcome",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 407,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#constructor",
    "access": "public",
    "description": "Object form of https://www.hl7.org/fhir/operationoutcome.html",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sev",
        "description": "Severity of the issue (fatal/error/warning/information)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "HTTP status code to set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "fhir path"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "infoText",
        "description": "Information text to display in an error"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "diagnostics",
        "description": "Diagnostics information"
      }
    ]
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "sev",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#sev",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "code",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#code",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "infoText",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#infoText",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "diagnostics",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#diagnostics",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "fhirPath",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#fhirPath",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "get",
    "name": "outcome",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#outcome",
    "access": "public",
    "description": "Create a fhir OperationOutcome object literal",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} fhir object literal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fhir object literal"
    },
    "type": {
      "types": [
        "{\"resourceType\": string, \"issue\": *}"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "makeResponse",
    "memberof": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/OperationOutcome.js~OperationOutcome#makeResponse",
    "access": "public",
    "description": "Make a HTTP response",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "res",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "file",
    "name": "src/server/fhir/classes/Patient.js",
    "content": "const mimeTypes = require('mime-types')\nconst sha1 = require('crypto-js/sha1')\nconst fs = require('fs')\nconst path = require('path')\nconst shortid = require('shortid')\nconst mime = require('mime-types')\n\n\nconst logger = require('../../logger')\nconst {knex} = require('../../db')\nconst Contact = require('./Contact')\nconst FHIRBase = require('./FHIRBase')\n\nclass Patient extends FHIRBase {\n\t/**\n\t * Fhir wrapper for patient information\n\t * @param {object} params patient params\n\t * @param {boolean} params.active whether the patient is still active in the hospital\n\t * @param {string} params.id DB id for the patient\n\t * @param {string} params.fullname fullname of patient\n\t * @param {string} params.given patient family name\n\t * @param {string} params.prefix patient prefix (Mr, Miss)\n\t * @param {string} params.gender patient gender: male, female or other\n\t * @param {Date} params.last_updated when the patient was last updated\n\t * @param {string} params.photo_url where the patient url is stored\n\t * @param {string} params.family patient family name (surname)\n\t */\n\tconstructor(params) {\n\t\tsuper(params)\n\t\tconst {active, id, fullname, given, prefix, gender, last_updated, photo, family} = params\n\t\tthis.active = active\n\t\tthis.loaded = false\n\t\tthis.id = id\n\t\tthis.fullname = fullname\n\t\tthis.given = given\n\t\tthis.prefix = prefix\n\t\tthis.gender = gender\n\t\tthis.last_updated = last_updated\n\t\tthis.photo = photo\n\t\tthis.family = family\n\t\tthis.meta = {file: 'fhir/classes/Patient.js'}\n\t\tthis.required = ['active', 'fullname', 'given', 'prefix', 'gender', 'contact_id']\n\t\tthis.values = [...this.required, 'family', 'last_updated']\n\t}\n\n\t/**\n\t * Based on this.id, populate the patient with database info\n\t * @return {boolean} populated or not\n\t */\n\tasync populate() {\n\t\tconst {meta, id} = this\n\t\tif (!id) {\n\t\t\tlogger.warn('Attempted to populate with invalid ID', meta)\n\t\t\treturn false\n\t\t}\n\t\ttry {\n\t\t\tconst [patient] = await knex('patient').select().where({patient_id: id})\n\t\t\tthis.loaded = true\n\t\t\tObject.keys(patient).forEach(key => this[key] = patient[key])\n\t\t\tthis.contact = new Contact({contact_id: patient.contact_id})\n\t\t\tawait this.contact.populate()\n\t\t\treturn true\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to populate patient', {...this.meta, func: 'populate()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'populate()'})\n\t\t\treturn false\n\t\t}\n\t}\n\n\t/**\n\t * Attempt to insert a patient with params provided\n\t * @returns {boolean} inserted or not\n\t */\n\tasync insert() {\n\t\tconst isValid = this.required.filter(key => !(this[key]))\n\t\tif (isValid.length) {\n\t\t\tlogger.warn('unable to create patient', {...this.meta, func: 'insert()'})\n\t\t\tlogger.silly(JSON.stringify(isValid), {...this.meta, func: 'insert()'})\n\t\t\treturn false\n\t\t}\n\t\t// create object\n\t\tthis.last_updated = new Date()\n\t\tthis.active = true\n\t\tconst obj = this.values.reduce((acc, cur) => {\n\t\t\tacc[cur] = this[cur]\n\t\t\treturn acc\n\t\t}, {})\n\t\tif (this.photo && this.photo.mv) {\n\t\t\tlogger.info('handling image', {...this.meta, func: 'insert()'})\n\t\t\tconst ext = mime.extension(this.photo.mimetype)\n\t\t\tconst photo_url = path.join('/patient', `${this.given}-${shortid.generate()}.${ext}`)\n\t\t\tconst newPath = path.join(process.cwd(), photo_url)\n\t\t\tlogger.debug(`moved image to ${newPath}`, {...this.meta, func: 'insert()'})\n\t\t\tthis.photo.mv(newPath)\n\t\t\tobj.photo_url = photo_url\n\t\t}\n\t\t// make query\n\t\tconst [resp] = await knex('patient').insert(obj).returning(['patient_id', ...this.values])\n\t\treturn resp\n\t}\n\n\t/**\n\t * Attempts to perform UPDATE on the database with this.id and params provided\n\t * @returns {boolean} Updated or not\n\t */\n\tasync update() {\n\t\tconst toUpdate = this.values\n\t\t\t.filter(val => this[val])\n\t\t\t.reduce((acc, cur) => {\n\t\t\t\tacc[cur] = this[cur]\n\t\t\t\treturn acc\n\t\t\t}, {})\n\t\tif (Object.keys(toUpdate).length) {\n\t\t\tlogger.warn(`Trying to update ${this.id}, but no params`, this.meta)\n\t\t\treturn false\n\t\t}\n\t\ttry {\n\t\t\tawait knex('patient').update(toUpdate)\n\t\t\tlogger.debug(`Successfully updated ${Object.keys(toUpdate).join(', ')}`, this.meta)\n\t\t\tawait this.populate()\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to update patient', {...this.meta, func: 'update()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'update()'})\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\t/**\n\t * Attempts to delete a patient based on this.id\n\t * fetch patient photo URL so that this can be removed from the disk\n\t * delete the patient from the database, then the image\n\t * order is important, because if database delete fails, no more image for patient\n\t * @returns {boolean} Deleted or nah\n\t */\n\tasync delete() {\n\t\ttry {\n\t\t\t// get patient photo url from db\n\t\t\tconst [row] = await knex('patient').select().where('patient_id', this.id)\n\t\t\tconst url = path.join(process.cwd(), (row.photo_url || ''))\n\t\t\t// remove DB entry and then the associated image\n\t\t\tawait knex('patient').delete('patient', this.id)\n\t\t\tlogger.debug(`attempting to delete patient photo with url: ${url}`, this.meta)\n\t\t\tif (row.photo_url && fs.existsSync(url)) fs.unlinkSync(url)\n\t\t\treturn {deleted: true, msg: 'Successfully deleted patient'}\n\t\t} catch (err) {\n\t\t\tlogger.error('Unable to delete patient', {...this.meta, func: 'delete()'})\n\t\t\tlogger.error(err, {...this.meta, func: 'delete()'})\n\t\t\treturn {deleted: false, msg: err}\n\t\t}\n\t}\n\n\t/**\n\t * Formats patient to standard fhir patient\n\t * @returns {object} patient info formatted in fhir\n\t */\n\tasync fhir() {\n\t\tawait this.populate()\n\t\tconst {contact} = this\n\t\tif (!contact) return false\n\t\tconst local = path.join(process.cwd(), this.photo_url || '')\n\t\tconst photo = this.photo_url && fs.existsSync(local)\n\t\t\t? [{\n\t\t\t\tcontentType: mimeTypes.lookup(local),\n\t\t\t\turl: this.photo_url,\n\t\t\t\thash: sha1(fs.readFileSync(local)).toString(),\n\t\t\t}]\n\t\t\t: []\n\t\treturn {\n\t\t\tidentifier: [{\n\t\t\t\tuse: 'usual',\n\t\t\t\tsystem: 'urn:ietf:rfc:3986',\n\t\t\t\tvalue: 'database id',\n\t\t\t\tassigner: 'SoN',\n\t\t\t}],\n\t\t\tresourceType: 'Patient',\n\t\t\tid: this.id,\n\t\t\tactive: this.active,\n\t\t\tname: [{\n\t\t\t\tuse: 'usual',\n\t\t\t\ttext: this.fullname,\n\t\t\t\tfamily: this.family,\n\t\t\t\tgiven: this.given,\n\t\t\t\tprefix: this.prefix.split(' '),\n\t\t\t}],\n\t\t\tgender: this.gender,\n\t\t\tphoto,\n\t\t\tcontact: [{\n\t\t\t\tname: {\n\t\t\t\t\tuse: 'usual',\n\t\t\t\t\ttext: contact.fullname,\n\t\t\t\t\tfamily: contact.family,\n\t\t\t\t\tgiven: contact.given,\n\t\t\t\t\tprefix: contact.prefix.split(' '),\n\t\t\t\t},\n\t\t\t\ttelecom: [{\n\t\t\t\t\tsystem: 'phone',\n\t\t\t\t\tvalue: contact.phone,\n\t\t\t\t\tuse: 'home',\n\t\t\t\t}],\n\t\t\t}],\n\t\t}\n\t}\n}\n\nmodule.exports = Patient\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Patient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "class",
    "name": "Patient",
    "memberof": "src/server/fhir/classes/Patient.js",
    "static": true,
    "longname": "src/server/fhir/classes/Patient.js~Patient",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Patient.js",
    "importStyle": "Patient",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 417,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#constructor",
    "access": "public",
    "description": "Fhir wrapper for patient information",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "patient params"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "params.active",
        "description": "whether the patient is still active in the hospital"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "DB id for the patient"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fullname",
        "description": "fullname of patient"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.given",
        "description": "patient family name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.prefix",
        "description": "patient prefix (Mr, Miss)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.gender",
        "description": "patient gender: male, female or other"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "params.last_updated",
        "description": "when the patient was last updated"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.photo_url",
        "description": "where the patient url is stored"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.family",
        "description": "patient family name (surname)"
      }
    ]
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "active",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#active",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "loaded",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#loaded",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "id",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#id",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "fullname",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#fullname",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "given",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#given",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "prefix",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#prefix",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "gender",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#gender",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "last_updated",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#last_updated",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "photo",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#photo",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "family",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#family",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "meta",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#meta",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"file\": string}"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "required",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#required",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "values",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#values",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#populate",
    "access": "public",
    "description": "Based on this.id, populate the patient with database info",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "populated or not"
    },
    "params": []
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "contact",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#contact",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "insert",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#insert",
    "access": "public",
    "description": "Attempt to insert a patient with params provided",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} inserted or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "inserted or not"
    },
    "params": []
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "update",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#update",
    "access": "public",
    "description": "Attempts to perform UPDATE on the database with this.id and params provided",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Updated or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Updated or not"
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "delete",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#delete",
    "access": "public",
    "description": "Attempts to delete a patient based on this.id\nfetch patient photo URL so that this can be removed from the disk\ndelete the patient from the database, then the image\norder is important, because if database delete fails, no more image for patient",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Deleted or nah"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Deleted or nah"
    },
    "params": []
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/Patient.js~Patient",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Patient.js~Patient#fhir",
    "access": "public",
    "description": "Formats patient to standard fhir patient",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} patient info formatted in fhir"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "patient info formatted in fhir"
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "file",
    "name": "src/server/fhir/classes/Practitioner.js",
    "content": "const FHIRBase = require('./FHIRBase')\nconst OperationOutcome = require('./OperationOutcome')\nconst {knex} = require('../../db')\n\nclass Practitioner extends FHIRBase {\n\tconstructor(params) {\n\t\tsuper({table: 'practitioner'})\n\t\tthis.table = 'practitioner'\n\t\tthis.id = params.practitioner_id\n\t\tthis.name = params.name\n\t\tthis.username = params.username\n\t\tthis.added = new Date(params.added)\n\t}\n\n\tasync populate() {\n\t\t// get all data from db based on the id\n\t\tconst [row] = await knex(this.table).select().where({practitioner_id: this.id})\n\t\t// assign all rows to this object for use in fhir() or update()\n\t\tObject.keys(row).forEach((key) => {\n\t\t\tthis[key] = row[key]\n\t\t})\n\t\t// true if successful in fetching\n\t\treturn this\n\t}\n\n\tfhir() {\n\t\tif (!('added' in this && 'name' in this && 'id' in this)) {\n\t\t\tconst {outcome} = new OperationOutcome('error', 404, `/fhir/Practitioner/${this.id}`, 'Item not found')\n\t\t\treturn outcome\n\t\t}\n\t\treturn {\n\t\t\tresourceType: 'Practitioner',\n\t\t\tactive: true,\n\t\t\tid: this.id,\n\t\t\tlastUpdated: this.added,\n\t\t\tname: [\n\t\t\t\t{given: [this.name]},\n\t\t\t],\n\t\t\ttelecom: [{\n\t\t\t\tsystem: 'email',\n\t\t\t\tvalue: this.username,\n\t\t\t}],\n\t\t}\n\t}\n}\n\nmodule.exports = Practitioner\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/classes/Practitioner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "class",
    "name": "Practitioner",
    "memberof": "src/server/fhir/classes/Practitioner.js",
    "static": true,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/classes/Practitioner.js",
    "importStyle": "Practitioner",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/server/fhir/classes/FHIRBase.js~FHIRBase"
    ]
  },
  {
    "__docId__": 442,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "table",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#table",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "id",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#id",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "name",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#name",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "username",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#username",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "member",
    "name": "added",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#added",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "populate",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#populate",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "fhir",
    "memberof": "src/server/fhir/classes/Practitioner.js~Practitioner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/fhir/classes/Practitioner.js~Practitioner#fhir",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"resourceType\": string, \"active\": boolean, \"id\": *, \"lastUpdated\": *, \"name\": *, \"telecom\": *}"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "file",
    "name": "src/server/fhir/diagnostic-report.js",
    "content": "// All patient observations go here\nconst diagnosticRouter = require('express').Router()\n\nconst {client, knex} = require('../db')\nconst {createOutcome} = require('./util')\nconst log = require('../logger')\nconst DiagnosticReport = require('./classes/DiagnosticReport')\nconst Observation = require('./classes/Observation')\n\n\n// return all DiagnosticReports\ndiagnosticRouter.get('/', async (req, res) => {\n\t// pull query params for db query\n\tconst {\n\t\tpatient: patient_id,\t// patient ID\n\t\tresult,\t\t\t\t\t// link results (bool)\n\t\t_count,\t\t\t\t\t// number of reports to send\n\t\tpage,\t\t\t\t\t// which page of results\n\t} = req.query\n\tconst offset = _count * page\n\n\t// pull reports from postgres\n\tconst rows = await knex('diagnostic_report')\n\t\t.select()\n\t\t.where({patient_id})\n\t\t.limit(_count)\n\t\t.offset(offset)\n\n\tconst reports = await Promise.all(\n\t\trows\n\t\t\t.map(row => new DiagnosticReport(row))\n\t\t\t.sort((a, b) => {\n\t\t\t\tconst aDate = new Date(a.last_updated)\n\t\t\t\tconst bDate = new Date(b.last_updated)\n\t\t\t\tif (aDate > bDate) return -1\n\t\t\t\tif (aDate < bDate) return 1\n\t\t\t\treturn 0\n\t\t\t})\n\t\t\t.map((report) => {\n\t\t\t\tif (result) return report.fhirLinked()\n\t\t\t\treturn Promise.resolve(report.fhir())\n\t\t\t}),\n\t)\n\tres.json(reports)\n})\n\n// get a specific report\ndiagnosticRouter.get('/:id', async (req, res) => {\n\tconst {id} = req.params\n\tconst {rows: [row]} = await client.query({\n\t\ttext: 'SELECT * FROM diagnostic_report WHERE report_id = $1',\n\t\tvalues: [id],\n\t})\n\tconst obs = new DiagnosticReport(row)\n\t// pull linked data if speficied\n\tconst resp = req.query.result ? await obs.fhirLinked() : obs.fhir()\n\tres.json(resp)\n})\n\n\ndiagnosticRouter.delete('/:id', async (req, res) => {\n\tconst {id} = req.params\n\tlog.debug(`attempting to delete ${id} from diagnostic_report`, {file: 'fhir/diagnostic-report.js', func: 'DELETE /:id'})\n\tawait client.query({\n\t\tname: 'delete-diagnostic-report',\n\t\ttext: 'DELETE FROM diagnostic_report WHERE report_id = $1',\n\t\tvalues: [id],\n\t})\n\tcreateOutcome(req, res, 200, 'Successfully deleted', {}, 'success')\n})\n\ndiagnosticRouter.post('/', async (req, res) => {\n\tconst expectedObs = [\n\t\t'respiratory_rate',\n\t\t'oxygen_saturation',\n\t\t'supplemental_oxygen',\n\t\t'body_temperature',\n\t\t'systolic_bp',\n\t\t'heart_rate',\n\t\t'level_of_consciousness',\n\t\t'patient_id',\n\t]\n\tconst validRequest = expectedObs.filter(obs => !(obs in req.body))\n\tif (validRequest.length) return createOutcome(req, res, 400, 'Missing data', validRequest)\n\tconst patID = req.body.patient_id\n\tdelete req.body.patient_id\n\tconst observations = Object.keys(req.body)\n\t\t.filter(key => expectedObs.includes(key))\n\t\t.map(key => new Observation(key, req.body[key]))\n\tconst queries = observations.map(({query}) => query)\n\n\tconst idList = (await Promise.all(queries.map(query => client.query(query))))\n\t\t.map(resp => resp.rows[0])\n\t\t.reduce((acc, cur) => {\n\t\t\tacc[cur.name] = cur.observation_id\n\t\t\treturn acc\n\t\t}, {})\n\tconst now = new Date()\n\tconst keys = ['last_updated', 'patient_id', ...Object.keys(idList)]\n\tconst rows = keys.join(', ')\n\tconst dolla = keys.map((_, idx) => `$${idx + 1}`).join(', ')\n\tconst query = {\n\t\tname: 'create-report',\n\t\ttext: `INSERT INTO diagnostic_report (${rows}) VALUES (${dolla}) RETURNING report_id`,\n\t\tvalues: [now, patID, ...Object.values(idList)],\n\t}\n\tconst {rows: [row]} = await client.query(query)\n\treturn createOutcome(req, res, 200, 'successfully added observation', row, 'success')\n})\n\n\nmodule.exports = diagnosticRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/diagnostic-report.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 452,
    "kind": "file",
    "name": "src/server/fhir/encounter.js",
    "content": "const encounterRouter = require('express').Router()\nconst {knex} = require('../db')\nconst {decodeJWTPayload} = require('../auth/token')\nconst Encounter = require('./classes/Encounter')\nconst OperationOutcome = require('./classes/OperationOutcome')\n\n/**\n * Handle all encoutners:\n * \trequired as FHIR offers no logical way to store patients\n */\n\n/**\n  * Accept a new ancounter\n  */\nencounterRouter.post('/', async (req, res) => {\n\tconst enc = new Encounter(req.body)\n\t// attempt to insert the data.\n\t// inserted will be false if req.body does not have the required fields\n\tconst inserted = await enc.insert()\n\tconst outcome = inserted\n\t\t? new OperationOutcome('success', 200, req.originalUrl, 'Successfully added encounter')\n\t\t: new OperationOutcome('error', 406, req.originalUrl, 'Unable to add encounter')\n\toutcome.makeResponse(res)\n})\n\n\n/**\n * find a new encounter\n * this required the practitioner to have view:allpatients to view all\n * else will fall back to practitionerpatients in table\n */\nencounterRouter.get('/', async (req, res) => {\n\tconst decodedToken = decodeJWTPayload(req.headers.token)\n\n\t// remove _include as we can use knex to search.where(req.query)\n\tconst include = req.query._include\n\tdelete req.query._include\n\n\t// queryparams may have _include=patient;encounter\n\t// split these in to an object so the fhir() method on encounter can populate\n\tconst [, ...tail] = include.split(':')\n\tconst toInclude = tail.join(':').split(';').reduce((acc, cur) => {\n\t\tacc[cur] = true\n\t\treturn acc\n\t}, {})\n\n\t// pull all encounters based on the querystring\n\tconst rows = await knex('encounter').select().where(req.query)\n\n\t// if no permission to view all:\n\t// select all from union table and filter out based on practitonerpatients\n\tif (!decodedToken.permissions.includes('view:allpatients')) {\n\t\tconst unionTable = await knex('practitionerpatients')\n\t\t\t.select()\n\t\t\t.where({practitioner_id: decodedToken.userid})\n\n\t\t// map to patient ID and remove them from the earlier rows set\n\t\tconst patientIDs = unionTable.map(group => group.patient_id)\n\n\t\t// use promise.all to 'concurrently' access the database\n\t\tconst mapped = await Promise.all(rows\n\t\t\t.filter(row => patientIDs.includes(row.patient_id))\n\t\t\t.map(row => new Encounter(row).fhir(toInclude)))\n\t\tres.json(mapped)\n\t\treturn\n\t}\n\n\t// the user has all permissions, populate these and send to user\n\tconst mapped = await Promise.all(\n\t\trows.map(row => new Encounter(row).fhir(toInclude)),\n\t)\n\tres.json(mapped)\n})\n\n// get an encounter based on the encounter ID (GET /fhir/Encounter/1)\nencounterRouter.get('/:encounter_id', async (req, res) => {\n\tconst {encounter_id} = req.params\n\tconst enc = new Encounter({encounter_id})\n\tconst populated = await enc.populate()\n\t// check if the encounter was found\n\tif (!populated) {\n\t\tconst outcome = new OperationOutcome('error', 404, req.originalUrl, 'Unable to find encounter')\n\t\treturn outcome.makeResponse(res)\n\t}\n\treturn res.json(enc.fhir())\n})\n\nencounterRouter.put('/:encounter_id', async (req, res) => {\n\tconst {encounter_id} = req.params\n\tconst enc = new Encounter({...req.body, encounter_id})\n\tconst updated = await enc.update()\n\tconst outcome = updated\n\t\t? new OperationOutcome('success', 200, req.originalUrl, 'Successfully updated encounter')\n\t\t: new OperationOutcome('error', 406, req.originalUrl, 'Unable to update encounter')\n\toutcome.makeResponse(res)\n})\n\nencounterRouter.delete('/:encounter_id', async (req, res) => {\n\tconst {encounter_id} = req.params\n\tconst enc = new Encounter({encounter_id})\n\tconst deleted = await enc.delete()\n\tconst outcome = deleted\n\t\t? new OperationOutcome('success', 200, req.originalUrl, 'Successfully deleted encounter')\n\t\t: new OperationOutcome('error', 406, req.originalUrl, 'Unable to remove encounter')\n\toutcome.makeResponse(res)\n})\n\n\nmodule.exports = encounterRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/encounter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "file",
    "name": "src/server/fhir/history.js",
    "content": "/* eslint-disable no-restricted-syntax */\nconst historyRouter = require('express').Router()\nconst OperationOutcome = require('./classes/OperationOutcome')\nconst {knex} = require('../db')\n\n/**\n * !! File does not follow FHIR specifications\n * No patient history concept exists yet, so try to keep this file impartial and plain json\n */\n\n\nhistoryRouter.get('/:id', async (req, res) => {\n\tconst [row] = await knex('patient_history').select().where({patient_id: req.params.id})\n\tif (row) {\n\t\t// aim to change to promise.all\n\t\tconst [practitioner] = await knex('practitioner').select().where({practitioner_id: row.practitioner_id})\n\t\tconst prescriptionLinks = await knex('history_prescription_medication_usage').select().where({history_id: row.history_id})\n\t\tconst otcLinks = await knex('history_otc_medication_usage').select().where({history_id: row.history_id})\n\t\tconst drugLinks = await knex('history_otc_drug_usage').select().where({history_id: row.history_id})\n\t\tconst prescriptions = await Promise.all(prescriptionLinks.map(link => knex('medication_usage').select().where({medication_usage_id: link.medication_usage_id})))\n\t\tconst otc = await Promise.all(otcLinks.map(link => knex('medication_usage').select().where({medication_usage_id: link.medication_usage_id})))\n\t\tconst recreational = await Promise.all(drugLinks.map(link => knex('medication_usage').select().where({medication_usage_id: link.medication_usage_id})))\n\t\tres.json({...row, practitioner, drugs: {prescriptions, otc, recreational}})\n\t} else {\n\t\tconst outcome = new OperationOutcome('error', 404, req.originalUrl, 'unable to find history')\n\t\toutcome.makeResponse(res)\n\t}\n})\n\nhistoryRouter.post('/', async (req, res) => {\n\ttry {\n\t\tconst historyBody = {\n\t\t\t// health history\n\t\t\tchildhood_illnesses: JSON.stringify(req.body.health['childhood-illnesses']),\n\t\t\timmunisations: JSON.stringify(req.body.health.immunisations),\n\t\t\tmedical_issues: JSON.stringify(req.body.health['medical-issues']),\n\t\t\tsurgical_operations: JSON.stringify(req.body.health.operations),\n\t\t\tother_hospitalisations: JSON.stringify(req.body.health.hispitalisations),\n\t\t\t// medications. otc and prescription meds are in mtm so omitted from this body\n\t\t\tallergies: JSON.stringify(req.body.medication.allergies),\n\t\t\t// exercise information\n\t\t\texercise_frequency: req.body.exercise.frequency,\n\t\t\t// dietary information\n\t\t\tdieting: req.body.diet.dieting,\n\t\t\tdifficulties_eating: req.body.diet['difficulties-eating'],\n\t\t\tmeals_daily: parseInt(req.body.diet['meals-eaten'], 10),\n\t\t\t// alcoholism questions\n\t\t\tdrinks_alcohol: req.body.alcohol['does-drink'] || null,\n\t\t\talcohol_type: req.body.alcohol.type || null,\n\t\t\talcoholic_drinks_weekly: req.body.alcoholfreq || null,\n\t\t\talcohol_concern: req.body.alcohol.concern || null,\n\t\t\talcohol_consider_stopping: req.body.alcohol['consider-stopping'] || null,\n\t\t\t// tobacco questions\n\t\t\ttobacco_used_past_5_years: req.body.tobacco['used-prior'],\n\t\t\ttobacco_last_smoked: req.body.tobacco['last-use'],\n\t\t\ttobacco_type: req.body.tobacco['type-used'],\n\t\t\tcurrently_uses_tobacco: req.body.tobacco['current-use'],\n\t\t\tcurrently_uses_tobacco_repalcement: req.body.tobacco['nicotine-replace-therapy'],\n\t\t\ttobacco_replacement_type: req.body.tobacco['nicotine-replacement-types'],\n\t\t\t// drugs question - type and freq mtm\n\t\t\tuses_recreational_drugs: req.body.drug['currently-use'],\n\t\t\tused_recreational_with_needle: req.body.drug.injected,\n\t\t\t// other questions\n\t\t\tmental_health_history: req.body.other['mental-health-wellbeing'],\n\t\t\tsocial_history: req.body.other['social-history'],\n\t\t\tfamily_history: req.body.other['family-history'],\n\t\t\trelevant_history: req.body.other['relevant-history'],\n\t\t\t// sign off\n\t\t\tpatient_id: req.body.patient_id,\n\t\t\tpractitioner_id: req.body.sign.practitioner_id,\n\t\t\tdate: new Date(req.body.sign.date),\n\t\t\tpractitioner_designation: req.body.sign.designation,\n\t\t\tsignature_blob: req.body.sign.image,\n\t\t}\n\t\t// console.log(req.body)\n\t\tconst [history_id] = await knex('patient_history').insert(historyBody).returning('history_id')\n\t\t// console.log({row})\n\t\tif (req.body.medication.prescription.length) {\n\t\t\tfor await (const prescription of req.body.medication.prescription) {\n\t\t\t\tconsole.log({prescription})\n\t\t\t\tconst body = {\n\t\t\t\t\tmedication_name: prescription.name,\n\t\t\t\t\tmedication_dose: prescription.dose,\n\t\t\t\t\tmedication_frequency: prescription.freq,\n\t\t\t\t}\n\t\t\t\tconsole.log(body)\n\t\t\t\t// add data to table\n\t\t\t\tconst [medication_usage_id] = await knex('medication_usage').insert(body).returning('medication_usage_id')\n\t\t\t\t// create mtm relation\n\t\t\t\tawait knex('history_prescription_medication_usage').insert({\n\t\t\t\t\tmedication_usage_id,\n\t\t\t\t\thistory_id,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (req.body.medication.otc.length) {\n\t\t\tfor await (const otc of req.body.medication.otc) {\n\t\t\t\tconsole.log({otc})\n\t\t\t\tconst body = {\n\t\t\t\t\tmedication_name: otc.name,\n\t\t\t\t\tmedication_dose: otc.dose,\n\t\t\t\t\tmedication_frequency: otc.freq,\n\t\t\t\t}\n\t\t\t\t// create drug entry\n\t\t\t\tconst [medication_usage_id] = await knex('medication_usage').insert(body).returning('medication_usage_id')\n\t\t\t\t// create mtm relation\n\t\t\t\tawait knex('history_otc_medication_usage').insert({\n\t\t\t\t\tmedication_usage_id,\n\t\t\t\t\thistory_id,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (req.body.drug['use-frequency'] && req.body.drug['use-frequency'].length) {\n\t\t\tfor await (const drug of req.body.drug['use-frequency']) {\n\t\t\t\tconsole.log({drug})\n\t\t\t\tconst body = {\n\t\t\t\t\tmedication_name: drug.name,\n\t\t\t\t\tmedication_dose: drug.dose,\n\t\t\t\t\tmedication_frequency: drug.freq,\n\t\t\t\t}\n\t\t\t\t// create drug entry\n\t\t\t\tconst [medication_usage_id] = await knex('medication_usage').insert(body).returning('medication_usage_id')\n\t\t\t\t// create mtm relation\n\t\t\t\tawait knex('history_otc_drug_usage').insert({\n\t\t\t\t\tmedication_usage_id,\n\t\t\t\t\thistory_id,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t// const results = Object.keys(queries).reduce((acc, cur) => {})\n\t\t// const resp = await knex('patient_history').insert(req.body)\n\t\tconst outcome = new OperationOutcome('success', 200, req.url, 'Successfully added history', {})\n\t\treturn outcome.makeResponse(res)\n\t} catch (err) {\n\t\tconsole.log(err)\n\t\tconst outcome = new OperationOutcome('error', 500, req.url, err)\n\t\treturn outcome.makeResponse(res)\n\t}\n})\n\nmodule.exports = historyRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/history.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 454,
    "kind": "file",
    "name": "src/server/fhir/index.js",
    "content": "const router = require('express').Router()\nconst fileUpload = require('express-fileupload')\nconst bodyParser = require('body-parser')\n\nconst logger = require('../logger')\nconst patientRouter = require('./patient')\nconst {connect} = require('../db')\nconst diagnosticRouter = require('./diagnostic-report')\nconst observationRouter = require('./observation')\nconst locationRouter = require('./location')\nconst encounterRouter = require('./encounter')\nconst historyRouter = require('./history')\nconst practitionerRouter = require('./practitioner')\nconst {createOutcome} = require('./util')\n\nconst meta = {file: 'fhir/index.js'}\n\n// https://www.hl7.org/fhir/http.html#mime-type\nrouter.use(async (req, res, next) => {\n\tres.setHeader('content-type', 'application/fhir+json')\n\tconst {_format} = req.query\n\tconst {accept, 'content-type': type} = req.headers\n\n\t// ensure that the user is specifying to use fhir json\n\tconst correctFormat = (_format && _format !== 'application/fhir+json')\n\n\t// ensure that the user can parse fhir json\n\tconst correctHeaders = accept.split(' ').includes('application/fhir+json')\n\n\t// ensure that the user is not sending a form as these are unsupported\n\tconst correctContent = (type !== 'application/x-www-form-urlencoded')\n\n\t// quick error checking\n\tif (correctFormat) {\n\t\tlogger.warn(`_format incorrect! ${_format}`, {...meta, func: 'validation mw'})\n\t\treturn createOutcome(req, res, 406, `Your _format, ${_format} is not accepted on this server`)\n\t}\n\tif (!correctHeaders) {\n\t\tlogger.warn(`headers incorrect: ${accept}`, {...meta, func: 'validation mw'})\n\t\treturn createOutcome(req, res, 406, `accept headers wrong. You sent ${accept}, but only \"application/fhir+json is supported`)\n\t}\n\tif (!correctContent) {\n\t\tlogger.warn('bad content-type (application/x-www-form-urlencoded', {...meta, func: 'validation mw'})\n\t\treturn createOutcome(req, res, 406, 'application/x-www-form-urlencoded is not accepted here', {}, 'error')\n\t}\n\tlogger.silly('good request', {...meta, func: 'validation mw'})\n\ttry {\n\t\tawait connect()\n\t} catch (err) {\n\t\tlogger.error(`error connecting to db: ${err}`, {...meta, func: 'validation mw'})\n\t}\n\treturn next()\n})\n\n// ensure that forms can be read and files can be uploaded (patient ID)\nrouter.use(fileUpload({limits: {fileSize: 50 * 1024 * 1024}}))\nrouter.use(bodyParser.urlencoded({extended: false}))\n\n// all FHIR routes. note: all sit on /fhir\nrouter.use('/Observation', observationRouter)\nrouter.use('/Diagnostics', diagnosticRouter)\nrouter.use('/Encounter', encounterRouter)\nrouter.use('/Location', locationRouter)\nrouter.use('/Patient', patientRouter)\nrouter.use('/History', historyRouter)\nrouter.use('/Practitioner', practitionerRouter)\n\n// error handler - leave at base of fhir router\nrouter.use((req, res, next, err) => {\n\tconst {code, issue} = err\n\tcreateOutcome(req, res, code, issue)\n})\n\nmodule.exports = router\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 455,
    "kind": "variable",
    "name": "meta",
    "memberof": "src/server/fhir/index.js",
    "static": true,
    "longname": "src/server/fhir/index.js~meta",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/fhir/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"file\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/server/fhir/location.js",
    "content": "// primarily used for ward management\nconst locRouter = require('express').Router()\nconst Location = require('./classes/Location')\nconst OperationOutcome = require('./classes/OperationOutcome')\nconst logger = require('../logger')\nconst {createOutcome} = require('./util')\nconst {client, knex} = require('../db')\n\nlocRouter.post('/', async (req, res) => {\n\t// metadata for easy logging\n\tconst meta = {file: 'fhir/location.js', func: 'POST /'}\n\n\t// pull out only the information we need to make a query\n\tconst {name, description, type} = req.body\n\tlogger.debug(`recieved name: ${name}; description: ${description}; type: ${type}`, meta)\n\tconst loc = new Location({name, description, type})\n\tconst {query} = loc\n\t// no query? Must be an error with their request\n\tif (!query) return createOutcome(req, res, 400, 'Error with query!', {name, description, type}, 'error')\n\tlogger.debug(`Query valid: ${JSON.stringify(query)}`, meta)\n\n\t// attempt to put this data in to the database\n\ttry {\n\t\tconst {rows: [row]} = await client.query(query)\n\t\tlogger.debug('data added to database successfully', meta)\n\t\tconst outcome = new OperationOutcome('success', 200, req.originalUrl, 'Successfully created location', {id: row.location_id})\n\t\treturn outcome.makeResponse(res)\n\t} catch (err) {\n\t\tlogger.error(`Error when inserting new location: ${err}`, meta)\n\t\tconst outcome = new OperationOutcome('error', 500, req.originalUrl, 'Error creating location', {err})\n\t\treturn outcome.makeResponse(res)\n\t}\n})\n\nlocRouter.get('/', async (req, res) => {\n\tconst {type} = req.query\n\t// ensure that requests specify location type\n\tif (!type) {\n\t\tconst outcome = new OperationOutcome('warn', 404, req.originalUrl, 'Incorrect query param')\n\t\treturn outcome.makeResponse(res)\n\t}\n\t// pull from database\n\tconst resp = await knex('location').select().where({type})\n\tconst payload = resp.map(entry => new Location({id: entry.location_id, ...entry}).fhir())\n\treturn res.json(payload)\n})\n\nlocRouter.get('/:id', async (req, res) => {\n\t// prepare and make a query to get data\n\tconst {rows: [row]} = await client.query({\n\t\tname: 'get-location',\n\t\ttext: 'SELECT * FROM location WHERE location_id = $1;',\n\t\tvalues: [req.params.id],\n\t})\n\n\t// create a location with the database data, format it correctly\n\tconst location = new Location(row)\n\tres.json(location.fhir())\n})\n\nlocRouter.delete('/:id', async (req, res) => {\n\tconst meta = {file: 'fhir/location.js', func: 'DELETE /:id'}\n\ttry {\n\t\tlogger.debug(`Attempting to delete location with ID ${req.params.id}`, meta)\n\t\tawait client.query({\n\t\t\tname: 'delete-location',\n\t\t\ttext: 'DELETE FROM location WHERE location_id = $1;',\n\t\t\tvalues: [req.params.id],\n\t\t})\n\t\tconst outcome = new OperationOutcome('information', 200, req.originalUrl, 'successfully deleted')\n\t\toutcome.makeResponse(res)\n\t} catch (err) {\n\t\tlogger.error(`Unable to delete by ID ${req.params.id}`, meta)\n\t\tlogger.error(`Error: ${err}`, meta)\n\t\tconst outcome = new OperationOutcome('error', 500, req.originalUrl, 'Error deleting location!', {err})\n\t\toutcome.makeResponse(res)\n\t}\n})\n\nmodule.exports = locRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/location.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "file",
    "name": "src/server/fhir/observation.js",
    "content": "const observationRouter = require('express').Router()\nconst {client} = require('../db')\nconst Observation = require('./classes/Observation')\n\n/**\n * not used throughout the project but serves as a reference implementation\n */\n\n// fetch all observations and format\nobservationRouter.get('/all', async (req, res) => {\n\tconst {rows} = await client.query('SELECT * FROM observation')\n\tconst formatted = await Promise.all(\n\t\trows\n\t\t\t.map(row => new Observation(row.name, row.value, row.observation_id, row.last_updated))\n\t\t\t.map(obs => obs.fhir()),\n\t)\n\tres.json(formatted)\n})\n\n// fetch a specific observation\nobservationRouter.get('/:id', async (req, res) => {\n\tconst {id} = req.params\n\tconst {rows: [row]} = await client.query({\n\t\ttext: 'SELECT * FROM observation WHERE observation_id = $1',\n\t\tvalues: [id],\n\t})\n\tconst obs = new Observation(row.name, row.value, row.observation_id, row.last_updated)\n\tconst formatted = await obs.fhir()\n\tres.json(formatted)\n})\n\n\nmodule.exports = observationRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/observation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "src/server/fhir/patient.js",
    "content": "// https://www.hl7.org/fhir/patient.html\nconst express = require('express')\nconst OperationOutcome = require('./classes/OperationOutcome')\nconst Patient = require('./classes/Patient')\nconst Contact = require('./classes/Contact')\nconst logger = require('../logger')\nconst {client, knex} = require('../db')\n\nconst patientRouter = express.Router()\n\nconst log = (level, message, func) => logger.log(level, message, {file: 'logger.js', func})\n\n// used for debugging. removed in production\npatientRouter.get('/all', async (req, res) => {\n\tlog('info', 'attempting to retrieve all patient data', 'GET /all')\n\tconst resp = await client.query('SELECT * FROM patient')\n\tres.json(resp.rows)\n})\n\n// read a specific patient\npatientRouter.get('/:id', async (req, res) => {\n\tconst {id} = req.params\n\t// create a new patient and send.\n\tconst patient = new Patient({id})\n\tconst populated = await patient.populate()\n\tif (populated) {\n\t\tconst fhir = await patient.fhir()\n\t\treturn res.json(fhir)\n\t}\n\t// patient not populated? let the user know\n\tconst outcome = new OperationOutcome('error', 406, req.originalUrl, 'could not find patient')\n\treturn outcome.makeResponse(res)\n})\n\npatientRouter.get('/', async (req, res) => {\n\tconst {_query} = req.query\n\t// handle searches and Bundle requests for all\n\tif (_query) {\n\t\tconst rows = await knex('patient')\n\t\t\t.where('fullname', 'ilike', _query)\n\t\t\t.orWhere('given', 'ilike', _query)\n\t\t\t.orWhere('family', 'ilike', _query)\n\t\tconst mapped = await Promise.all(\n\t\t\trows.map(row => new Patient({...row, id: row.patient_id}).fhir()),\n\t\t)\n\t\tres.json(mapped)\n\t}\n\tconst rows = await knex('patient')\n\tconst patients = await Promise.all(rows.map(row => new Patient({id: row.patient_id}).fhir()))\n\tconst resp = patients.map(patient => ({\n\t\turl: `/fhir/Patient/${patient.id}`,\n\t\t...patient,\n\t}))\n\tres.json({\n\t\tresourceType: 'Bundle',\n\t\tmeta: {\n\t\t\tlastUpdated: new Date(),\n\t\t},\n\t\ttype: 'searchset',\n\t\tentry: resp,\n\t})\n})\n\n// create\npatientRouter.post('/', async (req, res) => {\n\tconst meta = {file: 'fhir/patient.js', func: 'POST /'}\n\tconst rawPatient = {}\n\tconst rawContact = {}\n\tObject.keys(req.body).forEach((key) => {\n\t\tif (key.indexOf('contact') === 0) rawContact[key.replace('contact-', '')] = req.body[key]\n\t\tif (key.indexOf('patient') === 0) rawPatient[key.replace('patient-', '')] = req.body[key]\n\t})\n\tconst photo = (req.files && req.files['patient-photo']) ? req.files['patient-photo'] : {}\n\tconst patient = new Patient({...rawPatient, photo, active: true})\n\tconst contact = new Contact(rawContact)\n\tconst cResp = await contact.insert()\n\tif (!cResp) {\n\t\tlogger.debug('Unable to create contact', meta)\n\t\tconst outcome = new OperationOutcome('error', 406, req.originalUrl, 'Unable to insert contact')\n\t\treturn outcome.makeResponse(res)\n\t}\n\tlogger.debug('created contact', meta)\n\tpatient.contact_id = cResp.contact_id\n\tconst pResp = await patient.insert()\n\tif (!pResp) {\n\t\tconst outcome = new OperationOutcome('error', 406, req.originalUrl, 'Unable to insert patient')\n\t\treturn outcome.makeResponse(res)\n\t}\n\tconst outcome = new OperationOutcome('success', 200, req.originalUrl, 'success', pResp)\n\treturn outcome.makeResponse(res)\n})\n\n// update\npatientRouter.put('/:id', async (req, res) => {\n\tlogger.info(`Updating patient ${req.params.id}`, {file: 'fhir/patient.js', func: 'PUT /:id'})\n\tconst patientKeys = ['active', 'fullname', 'given', 'family', 'prefix', 'gender', 'photo_url']\n\t// create an object to enable us to create an update query\n\tconst rawPatient = Object.keys(req.body).reduce((acc, key) => {\n\t\tconst newKey = key.replace('patient-', '')\n\t\tif (key.indexOf('patient-') === 0 && patientKeys.includes(newKey)) {\n\t\t\tacc[newKey] = req.body[key]\n\t\t}\n\t\treturn acc\n\t}, {})\n\n\tconst patient = new Patient({...rawPatient, id: req.params.id})\n\tconst updated = await patient.update()\n\tlet outcome = new OperationOutcome('success', 200, req.originalUrl, 'success updating')\n\tif (!updated) outcome = new OperationOutcome('warn', 406, req.originalUrl, 'Unable to update patient')\n\toutcome.makeResponse(res)\n})\n\n// delete\npatientRouter.delete('/:id', async (req, res) => {\n\tconst {id} = req.params\n\tconst patient = new Patient({id})\n\tconst resp = await patient.delete()\n\tlet outcome = new OperationOutcome('success', 200, req.originalUrl, resp.msg)\n\tif (!resp.deleted) outcome = new OperationOutcome('error', 406, req.originalUrl, resp.msg.detail)\n\toutcome.makeResponse(res)\n})\n\nmodule.exports = patientRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/patient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "function",
    "name": "log",
    "memberof": "src/server/fhir/patient.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/fhir/patient.js~log",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/fhir/patient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 460,
    "kind": "variable",
    "name": "patientRouter",
    "memberof": "src/server/fhir/patient.js",
    "static": true,
    "longname": "src/server/fhir/patient.js~patientRouter",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/fhir/patient.js",
    "importStyle": "patientRouter",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "src/server/fhir/practitioner.js",
    "content": "const practitionerRouter = require('express').Router()\nconst Practitioner = require('./classes/Practitioner')\n\nconst {knex} = require('../db')\n\npractitionerRouter.get('/', async (req, res) => {\n\tconst practitioners = await knex('practitioner')\n\tconst fhirPractitioners = practitioners\n\t\t.map(row => new Practitioner(row).fhir())\n\t\t.map(fhirRow => ({\n\t\t\tfullUrl: `${req.originalUrl}/${fhirRow.id}`,\n\t\t\t...fhirRow,\n\t\t}))\n\tres.send({\n\t\tresourceType: 'Bundle',\n\t\tmeta: {\n\t\t\tlastUpdated: new Date(),\n\t\t},\n\t\ttype: 'searchset',\n\t\tentry: fhirPractitioners,\n\t})\n})\n\npractitionerRouter.get('/:id', async (req, res) => {\n\tconst [practitioner] = await knex('practitioner').select().where({\n\t\tpractitioner_id: req.params.id,\n\t})\n\tconst fhirPractitioner = new Practitioner(practitioner).fhir()\n\tres.json(fhirPractitioner)\n})\n\nmodule.exports = practitionerRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/practitioner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "src/server/fhir/util.js",
    "content": "/**\n * create an OperationOutcome\n * @param {Express.Request} req request\n * @param {Express.Response} res Response\n * @param {number} code HTTP Status code\n * @param {string} text details to send to user\n * @param {object} diagnostics further diagnostic data\n * @param {string} severity how bad the error is\n */\nfunction createOutcome(req, res, code, text, diagnostics = {}, severity = 'error') {\n\tconst err = {\n\t\tresourceType: 'OperationOutcome',\n\t\tissue: [{\n\t\t\tseverity,\n\t\t\tcode,\n\t\t}],\n\t\texpression: [req.originalUrl],\n\t}\n\tres.status(code).json(Object.assign({}, err, {details: {text}, diagnostics}))\n}\n\nmodule.exports = {\n\tcreateOutcome,\n}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/fhir/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "createOutcome",
    "memberof": "src/server/fhir/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/fhir/util.js~createOutcome",
    "access": "public",
    "export": false,
    "importPath": "fyp/src/server/fhir/util.js",
    "importStyle": null,
    "description": "create an OperationOutcome",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "request"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "HTTP Status code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "details to send to user"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "diagnostics",
        "description": "further diagnostic data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "severity",
        "description": "how bad the error is"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "file",
    "name": "src/server/index.js",
    "content": "const express = require('express')\nconst swaggerUI = require('swagger-ui-express')\nconst auth = require('./auth')\nconst apiDocs = require('./swagger')\nconst permissionsRouter = require('./permissions')\n\nconst router = express.Router()\nconst fhir = require('./fhir')\n\nrouter.use('/docs/api', swaggerUI.serve)\nrouter.get('/docs/api', swaggerUI.setup(apiDocs, {explorer: true}))\nrouter.use(auth)\nrouter.use('/permissions', permissionsRouter)\nrouter.use('/fhir', fhir)\n\nmodule.exports = router\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "variable",
    "name": "router",
    "memberof": "src/server/index.js",
    "static": true,
    "longname": "src/server/index.js~router",
    "access": "public",
    "export": true,
    "importPath": "fyp/src/server/index.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "file",
    "name": "src/server/permissions.js",
    "content": "const permissionsRouter = require('express').Router()\nconst {knex} = require('./db')\nconst {decodeJWTPayload} = require('./auth/token')\n// query for practitioner\n\n// requires edit:link\n// creates a link between a patient and user\npermissionsRouter.post('/create', async (req, res) => {\n\tconst {permissions} = decodeJWTPayload(req.headers.token)\n\tif (!permissions.includes('edit:link')) {\n\t\tres.sendStatus(401)\n\t\treturn\n\t}\n\tconst resp = await knex('practitionerpatients').insert({\n\t\tpractitioner_id: req.body.practitionerID,\n\t\tpatient_id: req.body.patientID,\n\t})\n\tres.json(resp)\n})\n\n\n// removes a link between a patient and practitioner\npermissionsRouter.post('/destroy', async (req, res) => {\n\tconst {permissions} = decodeJWTPayload(req.headers.token)\n\tif (!permissions.includes('edit:link')) {\n\t\tres.sendStatus(401)\n\t\treturn\n\t}\n\t// del from database\n\tconst unionDeleted = await knex('practitionerpatients')\n\t\t.where({\n\t\t\tpractitioner_id: req.body.practitionerID,\n\t\t\tpatient_id: req.body.patientID,\n\t\t})\n\t\t.del()\n\tres.json(unionDeleted)\n})\n\n// toggle permissions, requires edit:permissions\npermissionsRouter.post('/toggle', async (req, res) => {\n\tconst decodedToken = decodeJWTPayload(req.headers.token)\n\tconsole.log(decodedToken)\n\tif (decodedToken.permissions.includes('edit:permissions')) {\n\t\t// if the permission is in the permission set, remove it\n\t\tconsole.log(req.body)\n\t\tconst index = req.body.set.indexOf(req.body.permission)\n\n\t\tif (index > -1) req.body.set.splice(index, 1)\n\t\telse req.body.set.push(req.body.permission)\n\n\t\tconst [row] = await knex('practitioner')\n\t\t\t.where({practitioner_id: req.body.practitionerID})\n\t\t\t.update({\n\t\t\t\tpermissions: JSON.stringify(req.body.set),\n\t\t\t}).returning('*')\n\t\t// delete password hash before sending to user\n\t\tdelete row.passhash\n\t\tres.send(row)\n\t} else {\n\t\tres.sendStatus(401)\n\t}\n})\n\n// view practitioner info sans password\npermissionsRouter.get('/view/:id', async (req, res) => {\n\tconst [practitioner] = await knex('practitioner').select().where({\n\t\tpractitioner_id: req.params.id,\n\t})\n\tdelete practitioner.passhash\n\tres.json(practitioner)\n})\n\n// view practitoner relationships for permissions page highlighting\npermissionsRouter.get('/relationships/:id', async (req, res) => {\n\tconst unionTable = await knex('practitionerpatients')\n\t\t.select()\n\t\t.where({practitioner_id: req.params.id})\n\tres.json(unionTable)\n})\n\nmodule.exports = permissionsRouter\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/permissions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 467,
    "kind": "file",
    "name": "src/server/swagger/definitions.js",
    "content": "module.exports = {\n\tDiagnosticReportLinked: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tid: {type: 'integer'},\n\t\t\tmeta: {$ref: '#/definitions/Meta'},\n\t\t\tsubject: {type: 'string'},\n\t\t\tstatus: {type: 'string'},\n\t\t\tresult: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\t$ref: '#/definitions/Observation',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tDiagnosticReport: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tid: {type: 'integer'},\n\t\t\tmeta: {$ref: '#/definitions/Meta'},\n\t\t\tsubject: {type: 'string'},\n\t\t\tstatus: {type: 'string'},\n\t\t\tresult: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: 'string',\n\t\t\t},\n\t\t},\n\t},\n\tMeta: {\n\t\tproperties: {\n\t\t\tlastUpdated: {type: 'string'},\n\t\t},\n\t},\n\tLocationResponse: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tid: {type: 'integer'},\n\t\t\tmeta: {$ref: '#/definitions/Meta'},\n\t\t\tstatus: {type: 'string'},\n\t\t\tname: {type: 'string'},\n\t\t\tdescription: {type: 'string'},\n\t\t\tcoding: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tObservationList: {\n\t\ttype: 'array',\n\t\t$ref: '#/definitions/Observation',\n\t},\n\tObservation: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tid: {type: 'integer'},\n\t\t\tstatus: {type: 'string'},\n\t\t\tsubject: {$ref: '#/definitions/Reference'},\n\t\t\tvalueQuantity: {$ref: '#/definitions/ValueQuantity'},\n\t\t},\n\t},\n\tReference: {\n\t\tproperties: {\n\t\t\treference: {type: 'string'},\n\t\t},\n\t},\n\tValueQuantity: {\n\t\tproperties: {\n\t\t\tvalue: {type: 'string'},\n\t\t\tsystem: {type: 'string'},\n\t\t\tunitCode: {type: 'string'},\n\t\t},\n\t},\n\tPatientResponse: {\n\t\tproperties: {\n\t\t\tidentifier: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/definitions/Identifier',\n\t\t\t},\n\t\t\tresourceType: {type: 'string'},\n\t\t\tactive: {type: 'boolean'},\n\t\t\tname: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/definitions/Name',\n\t\t\t},\n\t\t\tgender: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['male', 'female', 'other'],\n\t\t\t},\n\t\t\tphoto: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/definitions/Photo',\n\t\t\t},\n\t\t\tcontact: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/ContactResponse',\n\t\t\t},\n\t\t},\n\t},\n\tClass: {\n\t\tproperties: {\n\t\t\tdata: {type: 'string'},\n\t\t},\n\t},\n\tEncounterResponse: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tmeta: {$ref: '#/definitions/Meta'},\n\t\t\tstatus: {type: 'string'},\n\t\t\tclass: {\n\t\t\t\t$ref: '#/definitions/Class',\n\t\t\t},\n\t\t\tsubject: {$ref: '#/definitions/Reference'},\n\t\t\tlocation: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\t$ref: '#/definitions/Meta',\n\t\t\t\t},\n\t\t\t},\n\n\t\t},\n\t},\n\tIdentifier: {\n\t\tproperties: {\n\t\t\tuse: {type: 'string'},\n\t\t\tsystem: {type: 'string'},\n\t\t\tvalue: {type: 'string'},\n\t\t\tassigner: {type: 'string'},\n\t\t},\n\t},\n\tName: {\n\t\tproperties: {\n\t\t\tuse: {type: 'string'},\n\t\t\ttext: {type: 'string'},\n\t\t\tfamily: {type: 'string'},\n\t\t\tgiven: {type: 'string'},\n\t\t},\n\t},\n\tPhoto: {\n\t\tproperties: {\n\t\t\tcontentType: {type: 'string'},\n\t\t\turl: {type: 'string'},\n\t\t\thash: {type: 'string'},\n\t\t},\n\t},\n\tContactResponse: {\n\t\tproperties: {\n\t\t\tname: {\n\t\t\t\ttype: 'string',\n\t\t\t\t$ref: '#/definitions/ContactName',\n\t\t\t},\n\t\t},\n\t},\n\tContactName: {\n\t\tproperties: {\n\t\t\tuse: {type: 'string'},\n\t\t\ttext: {type: 'string'},\n\t\t\tfamily: {type: 'string'},\n\t\t\tgiven: {type: 'string'},\n\t\t\tprefix: {type: 'array'},\n\t\t\ttelecom: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/definitions/ContactTelecom',\n\t\t\t},\n\t\t},\n\t},\n\tContactTelecom: {\n\t\tproperties: {\n\t\t\tsystem: {type: 'string'},\n\t\t\tvalue: {type: 'string'},\n\t\t\tuse: {type: 'string'},\n\t\t},\n\t},\n\tOperationOutcome: {\n\t\tproperties: {\n\t\t\tresourceType: {type: 'string'},\n\t\t\tissue: {\n\t\t\t\ttype: 'array',\n\t\t\t\t$ref: '#/definitions/OperationIssue',\n\t\t\t},\n\t\t\texpression: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tOperationIssue: {\n\t\tproperties: {\n\t\t\tseverity: {type: 'string'},\n\t\t\tcode: {type: 'integer'},\n\t\t},\n\t},\n}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/swagger/definitions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 468,
    "kind": "file",
    "name": "src/server/swagger/index.js",
    "content": "const definitions = require('./definitions')\n\nmodule.exports = {\n\tswagger: '2.0',\n\tinfo: {\n\t\tversion: '1.0.0',\n\t\ttitle: 'FHIR Implementation for Node.js',\n\t\tdescription: 'A FYP @ UoP',\n\t\tlicense: {\n\t\t\tname: 'GPL-3.0',\n\t\t\turl: 'https://opensource.org/licenses/GPL-3.0',\n\t\t},\n\t},\n\thost: 'localhost:5000',\n\tbasePath: '/fhir',\n\ttags: [\n\t\t{\n\t\t\tname: 'Patient',\n\t\t\tdescription: 'Patients and Contacts in the system',\n\t\t},\n\t\t{\n\t\t\tname: 'Vitals',\n\t\t\tdescription: 'Used to record vital signs',\n\t\t},\n\t\t{\n\t\t\tname: 'Encounter',\n\t\t\tdescription: 'Encounters with patients. Usually used for admissions to track rooms',\n\t\t},\n\t\t{\n\t\t\tname: 'Observation',\n\t\t\tdescription: 'Patient observation',\n\t\t},\n\t\t{\n\t\t\tname: 'DiagnosticReport',\n\t\t\tdescription: 'Vital sign observations',\n\t\t},\n\t],\n\taccepts: ['application/fhir+json'],\n\tproduces: ['application/fhir+json'],\n\tpaths: {\n\t\t'/Patient': {\n\t\t\tpost: {\n\t\t\t\ttags: ['Patient'],\n\t\t\t\tdescription: 'Create a new patient in the FHIR server',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-prefix',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Prefix for our patient (Mr, Mrs, Dr)',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-given',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patients given/first name',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-fullname',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Fullname for the patient',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-gender',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Patient's gender\",\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-family',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Patient's family name\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'profile',\n\t\t\t\t\t\tin: 'form',\n\t\t\t\t\t\tdescription: 'patient photograph',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'contact-prefix',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Prefix for our contact (Mr, Mrs, Dr)',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'contact-given',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Contact's given/first name\",\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'contact-fullname',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Fullname for the contact',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'contact-phone',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Contact's phone number\",\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'contact-family',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Contact's family name\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tproduces: ['application/fhir+json'],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'New patient is created',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Patient/{patient_id}': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'patient_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID of the patient thet we want to interact with ',\n\t\t\t\ttype: 'string',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['Patient'],\n\t\t\t\tsummary: 'Get a patient by their ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'Patient (and contact) has been found',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tdelete: {\n\t\t\t\ttags: ['Patient'],\n\t\t\t\tsummary: 'Delete patient with given ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'Patient is deleted from the database',\n\t\t\t\t\t\tschema: {$ref: '#/definitions/OperationOutcome'},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tput: {\n\t\t\t\ttags: ['Patient'],\n\t\t\t\tsummary: 'Update a patient with their ID',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-active',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Prefix for our patient (Mr, Mrs, Dr)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-prefix',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Prefix for our patient (Mr, Mrs, Dr)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-given',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patients given/first name',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-fullname',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Fullname for the patient',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-gender',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Patient's gender\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-family',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: \"Patient's family name\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient-photo_url',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Prefix for our patient (Mr, Mrs, Dr)',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'User is updated',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Diagnostics/': {\n\t\t\tpost: {\n\t\t\t\ttags: ['DiagnosticReport'],\n\t\t\t\tsummary: 'Create a diagnostic report',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'respiratory_rate',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patient respiratory rate (/min)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'oxygen_saturation',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patient oxygen saturation (%)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'supplemental_oxygen',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Whether the patient has supplemental oxygen (true/false)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'body_temperature',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patient body temperature (C)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'systolic_bp',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'patient blood pressure (mmHg)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'heart_rate',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'patient heart rate (/min)',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'level_of_consciousness',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'AVPU level of consciousness',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient_id',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Patient ID (database)',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital recordings have been updated',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Diagnostics/{diagnostic_id}': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'diagnostic_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID diagnostics to view ',\n\t\t\t\ttype: 'string',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['DiagnosticReport'],\n\t\t\t\tsummary: 'View a diagnostic report by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital signs',\n\t\t\t\t\t\tschema: '#/definitions/DiagnosticReport',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tdelete: {\n\t\t\t\ttags: ['DiagnosticReport'],\n\t\t\t\tsummary: 'View a diagnostic report by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital signs has been deleted',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Diagnostics/{diagnostic_id}/linked': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'diagnostic_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID diagnostics to view ',\n\t\t\t\ttype: 'string',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['DiagnosticReport', 'Vitals'],\n\t\t\t\tsummary: 'View a diagnostic report by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital signs',\n\t\t\t\t\t\tschema: '#/definitions/DiagnosticReportLinked',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Encounter': {\n\t\t\tpost: {\n\t\t\t\ttags: ['Encounter'],\n\t\t\t\tsummary: 'Create an encounter',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'class',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'The type of encounter (generally \"admission\")',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'status',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'The status of the visit (generally \"finished\")',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient_id',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'The patient to which this encounter pertains',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'location_id',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'Where the encounter took place',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'An encounter has been created',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Encounter/{encounter_id}': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'encounter_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID of a given encounter',\n\t\t\t\ttype: 'integer',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['Encounter'],\n\t\t\t\tsummary: 'Get an encounter by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'An enounter has been fetched',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/EncounterResponse',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tput: {\n\t\t\t\ttags: ['Encounter'],\n\t\t\t\tsummary: 'Update an encounter by ID',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'class',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'The type of encounter (generally \"admission\")',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'status',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'The status of the visit (generally \"finished\")',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'patient_id',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'The patient to which this encounter pertains',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'location_id',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\tdescription: 'Where the encounter took place',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital signs has been deleted',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tdelete: {\n\t\t\t\ttags: ['Encounter'],\n\t\t\t\tsummary: 'Delete an encounter by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A persons vital signs has been deleted',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Location': {\n\t\t\tpost: {\n\t\t\t\ttags: ['Location'],\n\t\t\t\tdescription: 'create a new location',\n\t\t\t\tparameters: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'Name of the new location',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'description',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'Description of the new location',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\tin: 'body',\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tdescription: 'The type of new location (wing/ward)',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A location was successfully added',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'/Location/{location_id}': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'location_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID of a given location',\n\t\t\t\ttype: 'integer',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['Location'],\n\t\t\t\tsummary: 'get a location',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A location in the area',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/defintions/LocationResponse',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tdelete: {\n\t\t\t\ttags: ['Location'],\n\t\t\t\tsummary: 'Delete a location',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'A location was successfully deleted',\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t$ref: '#/definitions/OperationOutcome',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\n\t\t'/Observation/{observation_id}': {\n\t\t\tparameters: [{\n\t\t\t\tname: 'observation_id',\n\t\t\t\tin: 'path',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'ID of a given observation',\n\t\t\t\ttype: 'integer',\n\t\t\t}],\n\t\t\tget: {\n\t\t\t\ttags: ['Observation', 'Vitals'],\n\t\t\t\tsummary: 'Get an observation by ID',\n\t\t\t\tresponses: {\n\t\t\t\t\t200: {\n\t\t\t\t\t\tdescription: 'Observation has been found',\n\t\t\t\t\t\tschema: {$ref: '#/definitions/Observation'},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tdefinitions,\n}\n",
    "static": true,
    "longname": "/home/hjf/code/git/fyp/src/server/swagger/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# FYP\n> FHIR server with UI to record patient vital signs\n\n## Prerequisites\n* Node.js ^11.x.x\n* yarn ^1.12.x\n* postgres ^10.6\n* Database setup according to `db/schema.psql`\n\n## Setup\n1. Install dependencies: `yarn`\n2. Setup environment: `mv .env-sample .env`\n3. Setup the database: `yarn create:db`\n4. Build the bundle: `yarn build:prod`\n5. Run! `node bin/www`",
    "longname": "/home/hjf/code/git/fyp/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"fyp\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Final year project @portsoc\",\n  \"main\": \"bin/www.js\",\n  \"repository\": \"https://github.com/hjfitz/fyp\",\n  \"author\": \"Harry <up780461@myport.ac.uk>\",\n  \"license\": \"GPL-3.0\",\n  \"private\": false,\n  \"scripts\": {\n    \"start\": \"node bin/www\",\n    \"dev\": \"nodemon bin/www\",\n    \"build:dev\": \"webpack --mode=development\",\n    \"build:watch\": \"webpack --mode=development --watch\",\n    \"build:prod\": \"webpack --mode=production\",\n    \"lint\": \"eslint src/**/*.js{x,}\",\n    \"build:docs\": \"esdoc\",\n    \"build:docs:all\": \"yarn build:docs ./server.js ./bin/www.js ./src/**/**/*.js\"\n  },\n  \"engines\": {\n    \"node\": \">=11.0.0\",\n    \"yarn\": \">=1.12.3\"\n  },\n  \"engineStrict\": true,\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\",\n    \"bcrypt\": \"^3.0.4\",\n    \"body-parser\": \"^1.18.3\",\n    \"chart.js\": \"^2.8.0\",\n    \"compression\": \"^1.7.3\",\n    \"crypto-js\": \"^3.1.9-1\",\n    \"csprng\": \"^0.1.2\",\n    \"date-fns\": \"^1.30.1\",\n    \"express\": \"^4.16.4\",\n    \"express-fileupload\": \"^1.1.1-alpha.1\",\n    \"express-form-data\": \"^2.0.8\",\n    \"googleapis\": \"^37.2.0\",\n    \"helmet\": \"^3.15.0\",\n    \"ismobilejs\": \"^0.5.1\",\n    \"jsonwebtoken\": \"^8.4.0\",\n    \"knex\": \"^0.16.3\",\n    \"lodash\": \"^4.17.11\",\n    \"materialize-css\": \"^1.0.0-rc.2\",\n    \"mime-types\": \"^2.1.21\",\n    \"morgan\": \"^1.9.1\",\n    \"multer\": \"^1.4.1\",\n    \"node-sass\": \"^4.11.0\",\n    \"password-sheriff\": \"^1.1.0\",\n    \"pg\": \"^7.8.0\",\n    \"preact\": \"^8.4.2\",\n    \"preact-router\": \"^2.6.1\",\n    \"qs\": \"^6.7.0\",\n    \"request-promise\": \"^4.2.4\",\n    \"sass-loader\": \"^7.1.0\",\n    \"shortid\": \"^2.2.14\",\n    \"source-map\": \"^0.7.3\",\n    \"split\": \"^1.0.1\",\n    \"swagger-ui-express\": \"^4.0.2\",\n    \"webpack\": \"^4.27.1\",\n    \"winston\": \"^3.1.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.2.0\",\n    \"@babel/plugin-transform-react-jsx\": \"^7.2.0\",\n    \"@babel/polyfill\": \"^7.2.5\",\n    \"@babel/preset-env\": \"^7.2.0\",\n    \"babel-loader\": \"^8.0.4\",\n    \"contentful-sdk-jsdoc\": \"^2.2.0\",\n    \"css-loader\": \"^2.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.4\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.9.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"jsdoc\": \"^3.5.5\",\n    \"nodemon\": \"^1.18.9\",\n    \"style-loader\": \"^0.23.1\",\n    \"tui-jsdoc-template\": \"^1.2.2\",\n    \"webpack-build-notifier\": \"^0.1.30\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n}\n",
    "longname": "/home/hjf/code/git/fyp/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]